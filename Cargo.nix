
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, fetchurl ? pkgs.fetchurl
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Any custom profile configuration from Cargo.toml
, profiles ? {}
  # Which cargo profile to build with
, profile ? "release"
  # Opts to pass in all rustc invocations
, globalRustcOpts ? []
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "valence-coprocessor-ethereum" = rec {
      packageId = "valence-coprocessor-ethereum";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-coprocessor-ethereum";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-coprocessor-ethereum-controller" = rec {
      packageId = "valence-coprocessor-ethereum-controller";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-coprocessor-ethereum-controller";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-coprocessor-ethereum-service" = rec {
      packageId = "valence-coprocessor-ethereum-service";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-coprocessor-ethereum-service";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-coprocessor-ethereum-service-circuit" = rec {
      packageId = "valence-coprocessor-ethereum-service-circuit";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-coprocessor-ethereum-service-circuit";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };



  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "addchain" = rec {
        crateName = "addchain";
        version = "0.2.0";
        edition = "2018";
        description = "Generate addition chains";
        sha256 = "0w45hpybsx9gzhlxf6x9451kycg8xwj3x8qzjnk8wqm55926jbiv";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        description = "A cross-platform symbolication library written in Rust, using `gimli`";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [ "loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [ "std" "dep:object" "dep:memmap2" "dep:typed-arena" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.1";
        edition = "2021";
        description = "A simple clean-room implementation of the Adler-32 checksum";
        sha256 = "1ymy18s9hs7ya1pjc9864l30wk8p2qfqdi7mhhcc5nfakxbij09j";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        description = "A non-cryptographic hash function using AES-NI for high performance";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        description = "Fast multiple substring searching.";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.21";
        edition = "2018";
        description = "Mirror of Rust's allocator API";
        sha256 = "08zrzs022xwndihvzdn78yqarv2b9696y67i6h78nla3ww87jgb8";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "alloy-consensus" = rec {
        crateName = "alloy-consensus";
        version = "0.9.2";
        edition = "2021";
        description = "Ethereum consensus interface";
        sha256 = "04zhmdbx6l9ww3gw54y35w5pk24kmii748f431pzljjmfp18s4zl";
        libName = "alloy_consensus";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "kzg-sidecar" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-trie";
            packageId = "alloy-trie";
            usesDefaultFeatures = false;
            features = [ "ethereum" ];
          }
          {
            name = "auto_impl";
            packageId = "auto_impl";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "from" "deref" "deref_mut" "into_iterator" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "arbitrary" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "rand" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:rand" "dep:arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" ];
          "k256" = [ "dep:k256" "alloy-primitives/k256" "alloy-eips/k256" ];
          "kzg" = [ "dep:c-kzg" "alloy-eips/kzg" "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "dep:alloy-serde" "alloy-eips/serde" "alloy-trie/serde" ];
          "serde-bincode-compat" = [ "alloy-eips/serde-bincode-compat" "serde_with" ];
          "serde_with" = [ "dep:serde_with" ];
          "std" = [ "alloy-eips/std" "c-kzg?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "alloy-consensus-any" = rec {
        crateName = "alloy-consensus-any";
        version = "0.9.2";
        edition = "2021";
        description = "Consensus interface for any network";
        sha256 = "0b54qv433mny0gwrgr52mygglk59dqdz7z982378h4n3h8c4x80g";
        libName = "alloy_consensus_any";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "dep:alloy-serde" "alloy-eips/serde" ];
          "std" = [ "alloy-eips/std" ];
        };
      };
      "alloy-eip2930" = rec {
        crateName = "alloy-eip2930";
        version = "0.1.0";
        edition = "2021";
        description = "Implementation of EIP-2930 type definitions";
        sha256 = "0hgwp8zbplgsrp1z1pcgzpa3r2axkp16skq13ah8fzs5883cys80";
        libName = "alloy_eip2930";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:rand" "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "alloy-eip7702" = rec {
        crateName = "alloy-eip7702";
        version = "0.5.1";
        edition = "2021";
        description = "Implementation of EIP-7702 type definitions";
        sha256 = "032xb3cis5q6da949kgak5sfy0npsh8fgs4gh4gd0rmk70yv25cv";
        libName = "alloy_eip7702";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:rand" "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "k256" = [ "alloy-primitives/k256" "dep:k256" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "serde-bincode-compat" = [ "serde_with" ];
          "serde_with" = [ "dep:serde_with" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" "thiserror/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "alloy-eips" = rec {
        crateName = "alloy-eips";
        version = "0.9.2";
        edition = "2021";
        description = "Ethereum Improvement Proprosal (EIP) implementations";
        sha256 = "09kma79bm408nkk3fpacwy92l6wq7n8cc3hf7q09kqq9xmlmipaj";
        libName = "alloy_eips";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-eip2930";
            packageId = "alloy-eip2930";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eip7702";
            packageId = "alloy-eip7702";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "c-kzg";
            packageId = "c-kzg";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "as_ref" "deref" "deref_mut" "from" "into_iterator" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "kzg-sidecar" "dep:arbitrary" "alloy-primitives/arbitrary" "alloy-serde?/arbitrary" "alloy-eip2930/arbitrary" "alloy-eip7702/arbitrary" "alloy-eip7702/k256" ];
          "default" = [ "std" "kzg-sidecar" ];
          "k256" = [ "alloy-eip7702/k256" ];
          "kzg" = [ "kzg-sidecar" "sha2" "dep:c-kzg" "dep:once_cell" ];
          "kzg-sidecar" = [ "sha2" ];
          "serde" = [ "dep:alloy-serde" "dep:serde" "alloy-primitives/serde" "c-kzg?/serde" "alloy-eip2930/serde" "alloy-eip7702/serde" ];
          "serde-bincode-compat" = [ "alloy-eip7702/serde-bincode-compat" ];
          "sha2" = [ "dep:sha2" ];
          "ssz" = [ "std" "dep:ethereum_ssz" "dep:ethereum_ssz_derive" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "serde?/std" "c-kzg?/std" "once_cell?/std" ];
        };
        resolvedDefaultFeatures = [ "kzg-sidecar" "serde" "sha2" ];
      };
      "alloy-network-primitives" = rec {
        crateName = "alloy-network-primitives";
        version = "0.9.2";
        edition = "2021";
        description = "Primitive types for Alloy network abstraction";
        sha256 = "107z8zwkdnqvcflk0rjwvq0xw0kfrc4kz0iid03is2ilf5mkq77k";
        libName = "alloy_network_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloy-primitives/std" ];
        };
      };
      "alloy-primitives 0.8.25" = rec {
        crateName = "alloy-primitives";
        version = "0.8.25";
        edition = "2021";
        description = "Ethereum primitive types";
        sha256 = "0klxil5w1aadz99mva8c5j6c43zj46ah46gjl4ryj30sx47ljxwc";
        libName = "alloy_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            usesDefaultFeatures = false;
            features = [ "as_ref" "add" "add_assign" "not" "deref" "deref_mut" "from" "from_str" "index" "index_mut" "into" "into_iterator" "display" "deref" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "default-hasher" "inline-more" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
          {
            name = "ruint";
            packageId = "ruint";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
        ];
        features = {
          "allocative" = [ "dep:allocative" ];
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "ruint/arbitrary" "ruint/proptest" "indexmap?/arbitrary" ];
          "asm-keccak" = [ "dep:keccak-asm" ];
          "default" = [ "std" "map" "map-foldhash" ];
          "getrandom" = [ "dep:getrandom" ];
          "hex-compat" = [ "hex/hex" ];
          "k256" = [ "dep:k256" ];
          "map" = [ "dep:hashbrown" ];
          "map-foldhash" = [ "map" "dep:foldhash" ];
          "map-fxhash" = [ "map" "dep:rustc-hash" ];
          "map-hashbrown" = [ "map" ];
          "map-indexmap" = [ "map" "dep:indexmap" ];
          "nightly" = [ "hex/nightly" "ruint/nightly" "hashbrown?/nightly" "rustc-hash?/nightly" ];
          "postgres" = [ "std" "dep:postgres-types" "ruint/postgres" ];
          "rand" = [ "dep:rand" "getrandom" "ruint/rand" "rustc-hash?/rand" ];
          "rayon" = [ "dep:rayon" "hashbrown?/rayon" "indexmap?/rayon" ];
          "rlp" = [ "dep:alloy-rlp" "ruint/alloy-rlp" ];
          "serde" = [ "dep:serde" "bytes/serde" "hex/serde" "ruint/serde" "hashbrown?/serde" "indexmap?/serde" "rand?/serde" ];
          "sha3-keccak" = [ "dep:sha3" ];
          "std" = [ "bytes/std" "hex/std" "ruint/std" "alloy-rlp?/std" "foldhash?/std" "indexmap?/std" "k256?/std" "keccak-asm?/std" "proptest?/std" "rand?/std" "rand?/std_rng" "rustc-hash?/std" "serde?/std" "sha3?/std" ];
        };
        resolvedDefaultFeatures = [ "map" "rlp" "serde" ];
      };
      "alloy-primitives 1.2.1" = rec {
        crateName = "alloy-primitives";
        version = "1.2.1";
        edition = "2024";
        description = "Ethereum primitive types";
        sha256 = "0mgv00k5li3x11imvvz7rbkk120b9r6lkjv51gh88kjxclkfsxv1";
        libName = "alloy_primitives";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            usesDefaultFeatures = false;
            features = [ "as_ref" "add" "add_assign" "not" "deref" "deref_mut" "from" "from_str" "index" "index_mut" "into" "into_iterator" "display" "deref" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "default-hasher" "inline-more" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "k256";
            packageId = "k256";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ecdsa" ];
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "os_rng" ];
          }
          {
            name = "ruint";
            packageId = "ruint";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
        ];
        features = {
          "allocative" = [ "dep:allocative" ];
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "ruint/arbitrary" "ruint/proptest" "indexmap?/arbitrary" ];
          "asm-keccak" = [ "dep:keccak-asm" ];
          "default" = [ "std" "map" "map-foldhash" ];
          "diesel" = [ "std" "dep:diesel" "ruint/diesel" ];
          "getrandom" = [ "dep:getrandom" ];
          "hex-compat" = [ "hex/hex" ];
          "k256" = [ "dep:k256" ];
          "map" = [ "dep:hashbrown" ];
          "map-foldhash" = [ "map" "dep:foldhash" ];
          "map-fxhash" = [ "map" "dep:rustc-hash" ];
          "map-hashbrown" = [ "map" ];
          "map-indexmap" = [ "map" "dep:indexmap" ];
          "nightly" = [ "hex/nightly" "ruint/nightly" "hashbrown?/nightly" "rustc-hash?/nightly" ];
          "postgres" = [ "std" "dep:postgres-types" "ruint/postgres" ];
          "rand" = [ "dep:rand" "getrandom" "ruint/rand-09" "rustc-hash?/rand" ];
          "rayon" = [ "dep:rayon" "hashbrown?/rayon" "indexmap?/rayon" ];
          "rlp" = [ "dep:alloy-rlp" "ruint/alloy-rlp" ];
          "serde" = [ "dep:serde" "bytes/serde" "hex/serde" "ruint/serde" "hashbrown?/serde" "indexmap?/serde" "rand?/serde" ];
          "sha3-keccak" = [ "dep:sha3" ];
          "std" = [ "bytes/std" "hex/std" "ruint/std" "alloy-rlp?/std" "foldhash?/std" "indexmap?/std" "k256?/std" "keccak-asm?/std" "proptest?/std" "rand?/std" "rand?/thread_rng" "rustc-hash?/std" "serde?/std" "sha3?/std" ];
        };
        resolvedDefaultFeatures = [ "k256" "serde" ];
      };
      "alloy-rlp" = rec {
        crateName = "alloy-rlp";
        version = "0.3.12";
        edition = "2021";
        description = "Implementation of Ethereum RLP serialization";
        sha256 = "1d1l0s837f26j7xfn0ig3xvf8gyjv1qdpx6lph6hip2zfqxxhw2z";
        libName = "alloy_rlp";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-rlp-derive";
            packageId = "alloy-rlp-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "default" = [ "std" ];
          "derive" = [ "dep:alloy-rlp-derive" ];
          "std" = [ "bytes/std" "arrayvec?/std" ];
        };
        resolvedDefaultFeatures = [ "arrayvec" "derive" ];
      };
      "alloy-rlp-derive" = rec {
        crateName = "alloy-rlp-derive";
        version = "0.3.12";
        edition = "2021";
        description = "Derive macros for alloy-rlp";
        sha256 = "0wrvryfar62jb3ckak6gs9g2gv1n6z0afzmwq5kxlbcn27ajidv4";
        procMacro = true;
        libName = "alloy_rlp_derive";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "alloy-rpc-types-eth" = rec {
        crateName = "alloy-rpc-types-eth";
        version = "0.9.2";
        edition = "2021";
        description = "Types for the `eth` Ethereum JSON-RPC namespace";
        sha256 = "1hm5fr5n1g96azqbzyfr4ahrjgfc0mrclcqpdkc1nhh2bihvqf09";
        libName = "alloy_rpc_types_eth";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-consensus-any";
            packageId = "alloy-consensus-any";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-network-primitives";
            packageId = "alloy-network-primitives";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" "map" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "arrayvec" "derive" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-consensus";
            packageId = "alloy-consensus";
            usesDefaultFeatures = false;
            features = [ "std" "arbitrary" ];
          }
          {
            name = "alloy-eips";
            packageId = "alloy-eips";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "k256" ];
          }
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "rlp" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "alloy-primitives/arbitrary" "alloy-serde?/arbitrary" "alloy-eips/arbitrary" ];
          "default" = [ "std" "serde" ];
          "jsonrpsee-types" = [ "dep:jsonrpsee-types" ];
          "k256" = [ "alloy-consensus/k256" "alloy-eips/k256" ];
          "serde" = [ "dep:serde" "dep:serde_json" "dep:alloy-serde" "alloy-primitives/serde" "alloy-consensus/serde" "alloy-eips/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-consensus/std" "alloy-eips/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "alloy-serde" = rec {
        crateName = "alloy-serde";
        version = "0.9.2";
        edition = "2021";
        description = "Alloy serde helpers";
        sha256 = "0mcvrl6469m4qis2vlh7z3x73fzf7a3q93a0bx9dgkjd3p3na15f";
        libName = "alloy_serde";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "serde" "map" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" "alloc" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rand" "rlp" "serde" "arbitrary" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "alloy-primitives/arbitrary" "std" ];
          "default" = [ "std" ];
          "std" = [ "alloy-primitives/std" "serde/std" "serde_json/std" ];
        };
      };
      "alloy-sol-macro" = rec {
        crateName = "alloy-sol-macro";
        version = "0.8.25";
        edition = "2021";
        description = "Solidity to Rust procedural macro";
        sha256 = "1wjrzml1pnq6xf97mzknx6mrm483ad0l49f2aklqlchxm7lyh2p1";
        procMacro = true;
        libName = "alloy_sol_macro";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-sol-macro-expander";
            packageId = "alloy-sol-macro-expander";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
        ];
        features = {
          "json" = [ "alloy-sol-macro-expander/json" ];
        };
      };
      "alloy-sol-macro-expander" = rec {
        crateName = "alloy-sol-macro-expander";
        version = "0.8.25";
        edition = "2021";
        description = "Expander used in the Solidity to Rust procedural macro";
        sha256 = "09lgz7a7fpbk873a174si3q5xf79kxn4s5vwc2y52xqjdjl5vbc3";
        libName = "alloy_sol_macro_expander";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-sol-macro-input";
            packageId = "alloy-sol-macro-input";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "proc-macro-error2";
            packageId = "proc-macro-error2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity";
            usesDefaultFeatures = false;
            features = [ "visit" "visit-mut" ];
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            usesDefaultFeatures = false;
            features = [ "keccak" ];
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro-input/json" ];
        };
      };
      "alloy-sol-macro-input" = rec {
        crateName = "alloy-sol-macro-input";
        version = "0.8.25";
        edition = "2021";
        description = "Input types for sol!-like macros";
        sha256 = "17ls817n037ll8bl8q05qym4f9iixvlivzzkhrv3pfprsgq30gds";
        libName = "alloy_sol_macro_input";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "dunce";
            packageId = "dunce";
          }
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "macro-string";
            packageId = "macro-string";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
          {
            name = "syn-solidity";
            packageId = "syn-solidity";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "json" = [ "dep:alloy-json-abi" "dep:serde_json" ];
        };
      };
      "alloy-sol-types" = rec {
        crateName = "alloy-sol-types";
        version = "0.8.25";
        edition = "2021";
        description = "Compile-time ABI and EIP-712 implementations";
        sha256 = "1ax9nj6lsczdwyk8xgj3dza1jiqxcxkslqbpq0q04i3a8rh5wgfl";
        libName = "alloy_sol_types";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-sol-macro";
            packageId = "alloy-sol-macro";
            usesDefaultFeatures = false;
          }
          {
            name = "const-hex";
            packageId = "const-hex";
            rename = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" "core-error" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "arbitrary" "serde" "rlp" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "alloy-primitives/arbitrary" ];
          "default" = [ "std" ];
          "eip712-serde" = [ "dep:serde" "alloy-primitives/serde" ];
          "json" = [ "dep:alloy-json-abi" "alloy-sol-macro/json" ];
          "std" = [ "alloy-primitives/std" "hex/std" "alloy-json-abi?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "eip712-serde" ];
      };
      "alloy-trie" = rec {
        crateName = "alloy-trie";
        version = "0.7.9";
        edition = "2021";
        description = "Fast Merkle-Patricia Trie (MPT) state root calculator
and proof generator for prefix-sorted nibbles
";
        sha256 = "12vfk6nkalp1hcw43dlsp6d3bpkchn2p907pcblhf3s29s2r8nnr";
        libName = "alloy_trie";
        authors = [
          "rkrasiuk <rokrassyuk@gmail.com>"
          "gakonst <me@gakonst.com>"
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
            features = [ "rlp" "map" ];
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            usesDefaultFeatures = false;
            features = [ "derive" "arrayvec" ];
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "add" "add_assign" "deref" "from" "not" ];
          }
          {
            name = "nybbles";
            packageId = "nybbles";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
            features = [ "const_new" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "std" "dep:arbitrary" "dep:derive_arbitrary" "dep:proptest" "dep:proptest-derive" "alloy-primitives/arbitrary" "nybbles/arbitrary" ];
          "default" = [ "std" "alloy-primitives/default" ];
          "serde" = [ "dep:serde" "alloy-primitives/serde" "arrayvec/serde" "nybbles/serde" ];
          "std" = [ "alloy-primitives/std" "alloy-rlp/std" "arrayvec/std" "derive_more/std" "nybbles/std" "tracing/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "ethereum" "serde" ];
      };
      "android-tzdata" = rec {
        crateName = "android-tzdata";
        version = "0.1.1";
        edition = "2018";
        description = "Parser for the Android-specific tzdata file";
        sha256 = "1w7ynjxrfs97xg3qlcdns4kgfpwcdv824g611fq32cag4cdr96g9";
        libName = "android_tzdata";
        authors = [
          "RumovZ"
        ];

      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        description = "Minimal Android system properties wrapper";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "ansi_term" = rec {
        crateName = "ansi_term";
        version = "0.12.1";
        edition = "2015";
        description = "Library for ANSI terminal colours and styles (bold, underline)";
        sha256 = "1ljmkbilxgmhavxvxqa7qvm6f3fjggi7q2l3a72q9x0cxjvrnanm";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.19";
        edition = "2021";
        description = "A simple cross platform library for writing colored text to a terminal.";
        sha256 = "0crr9a207dyn8k66xgvhvmlxm9raiwpss3syfa35c6265s9z26ih";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [ "auto" "wincon" ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [ "auto" "default" "wincon" ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.11";
        edition = "2021";
        description = "ANSI text styling";
        sha256 = "1gbbzi0zbgff405q14v8hhpi1kz2drzl9a75r3qhks47lindjbl6";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.7";
        edition = "2021";
        description = "Parse ANSI Style Escapes";
        sha256 = "1hhmkkfr95d462b3zf6yl2vfzdqfy5726ya572wwg8ha9y148xjf";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [ "default" "utf8" ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.3";
        edition = "2021";
        description = "Look up colored console capabilities";
        sha256 = "1sgs2hq54wayrmpvy784ww2ccv9f8yhhpasv12z872bx0jvdx2vc";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.9";
        edition = "2021";
        description = "Styling legacy Windows terminals";
        sha256 = "10n8mcgr89risdf35i73zc67aaa392bhggwzqlri1fv79297ags0";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "once_cell_polyfill";
            packageId = "once_cell_polyfill";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_System_Console" "Win32_Foundation" ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.98";
        edition = "2018";
        description = "Flexible concrete Error type built on std::error::Error";
        sha256 = "11ylvjdrcjs0q9jgk1af4r5cx1qppj63plxqkq595vmc24rjsvg1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ark-bn254" = rec {
        crateName = "ark-bn254";
        version = "0.5.0";
        edition = "2021";
        description = "The BN254 pairing-friendly elliptic curve";
        sha256 = "1g76nfv5l4h4271592gq4ijdd5pkyhm5n4v3bkx3wrnjx1bsp7nn";
        libName = "ark_bn254";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-r1cs-std" = [ "dep:ark-r1cs-std" ];
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "r1cs" = [ "ark-r1cs-std" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" "ark-r1cs-std?/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "default" "scalar_field" ];
      };
      "ark-ec" = rec {
        crateName = "ark-ec";
        version = "0.5.0";
        edition = "2021";
        description = "A library for elliptic curves and pairings";
        sha256 = "1klgh7ns6g4f393hriqcny9bhcfiqjkmbrrq29n88qk1a4nqzmj3";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "8" target."has_atomic") && (builtins.elem "16" target."has_atomic") && (builtins.elem "32" target."has_atomic") && (builtins.elem "64" target."has_atomic") && (builtins.elem "ptr" target."has_atomic"));
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "fnv";
            packageId = "fnv";
            usesDefaultFeatures = false;
            target = { target, features }: (!((builtins.elem "8" target."has_atomic") && (builtins.elem "16" target."has_atomic") && (builtins.elem "32" target."has_atomic") && (builtins.elem "64" target."has_atomic") && (builtins.elem "ptr" target."has_atomic")));
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
            features = [ "inline-more" "allocator-api2" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ff 0.4.2" = rec {
        crateName = "ark-ff";
        version = "0.4.2";
        edition = "2021";
        description = "A library for finite fields";
        sha256 = "1fk6546nddgs3lsnv1s06fh8mnik5h1ijmck928d4jpla3w7m17c";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.4.2";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.4.2";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
      };
      "ark-ff 0.5.0" = rec {
        crateName = "ark-ff";
        version = "0.5.0";
        edition = "2021";
        description = "A library for finite fields";
        sha256 = "0w7aawjjs8d1b11c215b5s6asvdlx410avczm9ibn3qyxnhanxx1";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm 0.5.0";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros 0.5.0";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ff-asm 0.4.2" = rec {
        crateName = "ark-ff-asm";
        version = "0.4.2";
        edition = "2021";
        description = "A library for generating x86-64 assembly for finite field multiplication";
        sha256 = "0j13p6ymma3ypbjipfkc937pn57as8qpwgrpg5nvrl2mw97smm1y";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-asm 0.5.0" = rec {
        crateName = "ark-ff-asm";
        version = "0.5.0";
        edition = "2021";
        description = "A library for generating x86-64 assembly for finite field multiplication";
        sha256 = "0q3bg9nak0nv7a2mzyb95r8b5xg0y24s82j0zqqjmq3dgqpmm532";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.4.2" = rec {
        crateName = "ark-ff-macros";
        version = "0.4.2";
        edition = "2021";
        description = "A library for generating x86-64 assembly for finite field multiplication";
        sha256 = "0ra5a4paqbqqlc9a3cnwkwxh7l1411wsnna1az28k218wjq7kgks";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros 0.5.0" = rec {
        crateName = "ark-ff-macros";
        version = "0.5.0";
        edition = "2021";
        description = "A library for generating x86-64 assembly for finite field multiplication";
        sha256 = "1cy40yp7hkr3y443cmkrnx9mdkdc875058pa7ilzfczf6c3i5gh9";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-poly" = rec {
        crateName = "ark-poly";
        version = "0.5.0";
        edition = "2021";
        description = "A library for efficient polynomial arithmetic via FFTs over finite fields";
        sha256 = "09zy0dvin1g5jdvab54j5wg37d371vjpj5ndi4mz01x2kn1hb4sp";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "8" target."has_atomic") && (builtins.elem "16" target."has_atomic") && (builtins.elem "32" target."has_atomic") && (builtins.elem "64" target."has_atomic") && (builtins.elem "ptr" target."has_atomic"));
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "educe";
            packageId = "educe";
          }
          {
            name = "fnv";
            packageId = "fnv";
            usesDefaultFeatures = false;
            target = { target, features }: (!((builtins.elem "8" target."has_atomic") && (builtins.elem "16" target."has_atomic") && (builtins.elem "32" target."has_atomic") && (builtins.elem "64" target."has_atomic") && (builtins.elem "ptr" target."has_atomic")));
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
            features = [ "inline-more" "allocator-api2" ];
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" "ark-serialize/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
      };
      "ark-serialize 0.4.2" = rec {
        crateName = "ark-serialize";
        version = "0.4.2";
        edition = "2021";
        description = "A library for serializing types in the arkworks ecosystem";
        sha256 = "1992x2cd05pw3v5hfqnb8114g2cwdk3cmmcvz0i2ygdq09dbidxd";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
      };
      "ark-serialize 0.5.0" = rec {
        crateName = "ark-serialize";
        version = "0.5.0";
        edition = "2021";
        description = "A library for serializing types in the arkworks ecosystem";
        sha256 = "1xw860hc2m6a8q0kd3mc634hy3h3z14cfaxmvzbvqzhhmy50ck9z";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "parallel" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "default" "derive" ];
      };
      "ark-serialize-derive" = rec {
        crateName = "ark-serialize-derive";
        version = "0.5.0";
        edition = "2021";
        description = "A library for deriving serialization traits for the arkworks ecosystem";
        sha256 = "17dn3c1pgzdsjpvcv315by403jjvq15fb23y4l6wmp7xc3v8hf11";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "ark-std 0.4.0" = rec {
        crateName = "ark-std";
        version = "0.4.0";
        edition = "2021";
        description = "A library for no_std compatibility";
        sha256 = "11aigd20y0x9l3mw1bxsrgklzbscn86lrp78mmjbgskf1hg3z2cl";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "ark-std 0.5.0" = rec {
        crateName = "ark-std";
        version = "0.5.0";
        edition = "2021";
        description = "A library for no_std compatibility";
        sha256 = "16j4d5p8901bwhicqz2xy7zn2xyn347sy6a6ybj9w7hkqrf24si4";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        description = "Macros to take array references of slices";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        description = "A vector with fixed capacity, backed by an array (it can be stored on the stack too). Implements fixed capacity ArrayVec and ArrayString.";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "async-stream" = rec {
        crateName = "async-stream";
        version = "0.3.6";
        edition = "2021";
        description = "Asynchronous streams using async & await notation";
        sha256 = "0xl4zqncrdmw2g6241wgr11dxdg4h7byy6bz3l6si03qyfk72nhb";
        libName = "async_stream";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "async-stream-impl";
            packageId = "async-stream-impl";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-stream-impl" = rec {
        crateName = "async-stream-impl";
        version = "0.3.6";
        edition = "2021";
        description = "proc macros for async-stream crate";
        sha256 = "0kaplfb5axsvf1gfs2gk6c4zx6zcsns0yf3ssk7iwni7bphlvhn7";
        procMacro = true;
        libName = "async_stream_impl";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "visit-mut" ];
          }
        ];

      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.88";
        edition = "2021";
        description = "Type erasure for async trait methods";
        sha256 = "1dgxvz7g75cmz6vqqz0mri4xazc6a8xfj1db6r9fxz29lzyd6fg5";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "atomic-polyfill" = rec {
        crateName = "atomic-polyfill";
        version = "1.0.3";
        edition = "2021";
        description = "Atomic polyfills, for targets where they're not available.";
        sha256 = "1x00ndablb89zvbr8m03cgjzgajg86fqn8pgz85yy2gy1pivrwlc";
        libName = "atomic_polyfill";
        authors = [
          "Dario Nieuwenhuis <dirbaio@dirbaio.net>"
        ];
        dependencies = [
          {
            name = "critical-section";
            packageId = "critical-section";
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        description = "A synchronization primitive for task wakeup";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "auto_impl" = rec {
        crateName = "auto_impl";
        version = "1.3.0";
        edition = "2021";
        description = "Automatically implement traits for common smart pointers and closures";
        sha256 = "1rzysfb0zpwsi2lg043fj596xj2a4xir2lc0fd17im64vc5vgp7z";
        procMacro = true;
        authors = [
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "visit" "visit-mut" ];
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.5.0";
        edition = "2015";
        description = "Automatic cfg for Rust compiler features";
        sha256 = "1s77f98id9l4af4alklmzq46f21c980v13z2r1pcxx6bqgw0d1n0";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "axum" = rec {
        crateName = "axum";
        version = "0.7.9";
        edition = "2021";
        description = "Web framework that focuses on ergonomics and modularity";
        sha256 = "07z7wqczi9i8xb4460rvn39p4wjqwr32hx907crd1vwb2fy8ijpd";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum-core";
            packageId = "axum-core";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" "server" "service" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "matchit";
            packageId = "matchit";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            features = [ "raw_value" ];
          }
          {
            name = "serde_path_to_error";
            packageId = "serde_path_to_error";
            optional = true;
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            optional = true;
            features = [ "time" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "util" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "raw_value" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "net" "test-util" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            rename = "tower";
            features = [ "util" "timeout" "limit" "load-shed" "steer" "filter" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "__private_docs" = [ "axum-core/__private_docs" "tower/full" "dep:tower-http" ];
          "default" = [ "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" ];
          "form" = [ "dep:serde_urlencoded" ];
          "http1" = [ "dep:hyper" "hyper?/http1" "hyper-util?/http1" ];
          "http2" = [ "dep:hyper" "hyper?/http2" "hyper-util?/http2" ];
          "json" = [ "dep:serde_json" "dep:serde_path_to_error" ];
          "macros" = [ "dep:axum-macros" ];
          "multipart" = [ "dep:multer" ];
          "query" = [ "dep:serde_urlencoded" ];
          "tokio" = [ "dep:hyper-util" "dep:tokio" "tokio/net" "tokio/rt" "tower/make" "tokio/macros" ];
          "tower-log" = [ "tower/log" ];
          "tracing" = [ "dep:tracing" "axum-core/tracing" ];
          "ws" = [ "dep:hyper" "tokio" "dep:tokio-tungstenite" "dep:sha1" "dep:base64" ];
        };
        resolvedDefaultFeatures = [ "default" "form" "http1" "json" "matched-path" "original-uri" "query" "tokio" "tower-log" "tracing" ];
      };
      "axum-core" = rec {
        crateName = "axum-core";
        version = "0.4.5";
        edition = "2021";
        description = "Core types and traits for axum";
        sha256 = "16b1496c4gm387q20hkv5ic3k5bd6xmnvk50kwsy6ymr8rhvvwh9";
        libName = "axum_core";
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "__private_docs" = [ "dep:tower-http" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "backoff" = rec {
        crateName = "backoff";
        version = "0.4.0";
        edition = "2018";
        description = "Retry operations with exponential backoff policy.
";
        sha256 = "1h80d9xn5wngxdgza2m8w4x1kyhk0x6k9ydvsj50j2pcn6fdnbdn";
        authors = [
          "Tibor Benke <ihrwein@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "instant";
            packageId = "instant";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio_1";
            optional = true;
            features = [ "time" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            rename = "tokio_1";
            features = [ "macros" "time" "rt-multi-thread" ];
          }
        ];
        features = {
          "async-std" = [ "futures" "async_std_1" ];
          "async_std_1" = [ "dep:async_std_1" ];
          "futures" = [ "futures-core" "pin-project-lite" ];
          "futures-core" = [ "dep:futures-core" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "tokio" = [ "futures" "tokio_1" ];
          "tokio_1" = [ "dep:tokio_1" ];
          "wasm-bindgen" = [ "instant/wasm-bindgen" "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-core" "pin-project-lite" "tokio" "tokio_1" ];
      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        description = "A library to acquire a stack trace (backtrace) at runtime in a Rust program.
";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "base16ct" = rec {
        crateName = "base16ct";
        version = "0.2.0";
        edition = "2021";
        description = "Pure Rust implementation of Base16 a.k.a hexadecimal (RFC 4648) which avoids
any usages of data-dependent branches/LUTs and thereby provides portable
\"best effort\" constant-time operation and embedded-friendly no_std support
";
        sha256 = "1kylrjhdzk7qpknrvlphw8ywdnvvg39dizw9622w3wk5xba04zsc";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "base64" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        description = "encodes and decodes base64 as bytes or utf8";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64ct" = rec {
        crateName = "base64ct";
        version = "1.8.0";
        edition = "2024";
        description = "Pure Rust implementation of Base64 (RFC 4648) which avoids any usages of
data-dependent branches/LUTs and thereby provides portable \"best effort\"
constant-time operation and embedded-friendly no_std support
";
        sha256 = "1fj4vc6ghy3j1120r7dwn4xw90crfy46b448g5pm9w6an13qn92m";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "bincode 1.3.3" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        description = "A binary serialization / deserialization strategy that uses Serde for transforming structs into bytes and vice versa!";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bincode 2.0.1" = rec {
        crateName = "bincode";
        version = "2.0.1";
        edition = "2021";
        description = "A binary serialization / deserialization strategy for transforming structs into bytes and vice versa!";
        sha256 = "0h5pxp3dqkigjwy926a03sl69n9wv7aq4142a20kw9lhn3bzbsin";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Zoey Riordan <zoey@dos.cafe>"
          "Victor Koenders <bincode@trangar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unty";
            packageId = "unty";
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "bincode_derive" = [ "dep:bincode_derive" ];
          "default" = [ "std" "derive" ];
          "derive" = [ "bincode_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" ];
      };
      "bindgen" = rec {
        crateName = "bindgen";
        version = "0.70.1";
        edition = "2018";
        description = "Automatically generates Rust FFI bindings to C and C++ libraries.";
        sha256 = "0vyf0jp6apcy9kjyz4s8vldj0xqycnbzb6zv3skkwiqdi3nqz7gl";
        libPath = "lib.rs";
        authors = [
          "Jyun-Yan You <jyyou.tw@gmail.com>"
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Nick Fitzgerald <fitzgen@gmail.com>"
          "The Servo project developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cexpr";
            packageId = "cexpr";
          }
          {
            name = "clang-sys";
            packageId = "clang-sys";
            features = [ "clang_6_0" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "prettyplease";
            packageId = "prettyplease";
            optional = true;
            features = [ "verbatim" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" "unicode-perl" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 1.1.0";
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "extra-traits" "visit-mut" ];
          }
        ];
        features = {
          "default" = [ "logging" "prettyplease" "runtime" ];
          "experimental" = [ "dep:annotate-snippets" ];
          "logging" = [ "dep:log" ];
          "prettyplease" = [ "dep:prettyplease" ];
          "runtime" = [ "clang-sys/runtime" ];
          "static" = [ "clang-sys/static" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "prettyplease" "runtime" ];
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        description = "A macro to generate structures which behave like bitflags.
";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bitvec" = rec {
        crateName = "bitvec";
        version = "1.0.1";
        edition = "2021";
        description = "Addresses memory by bits, for packed collections and bitfields";
        sha256 = "173ydyj2q5vwj88k6xgjnfsshs4x9wbvjjv7sm0h36r34hn87hhv";
        dependencies = [
          {
            name = "funty";
            packageId = "funty";
            usesDefaultFeatures = false;
          }
          {
            name = "radium";
            packageId = "radium";
          }
          {
            name = "tap";
            packageId = "tap";
          }
          {
            name = "wyz";
            packageId = "wyz";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "atomic" "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "atomic" "default" "std" ];
      };
      "blake2" = rec {
        crateName = "blake2";
        version = "0.10.6";
        edition = "2018";
        description = "BLAKE2 hash functions";
        sha256 = "1zlf7w7gql12v61d9jcbbswa3dw8qxsjglylsiljp9f9b3a2ll26";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "simd_asm" = [ "simd_opt" ];
          "simd_opt" = [ "simd" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake2b_simd" = rec {
        crateName = "blake2b_simd";
        version = "1.0.3";
        edition = "2021";
        description = "a pure Rust BLAKE2b implementation with dynamic SIMD";
        sha256 = "16cxmm4pr5jx9xc0msj1qn018ram3vz9k17cj57r97hm1fi07s86";
        authors = [
          "Jack O'Connor"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        description = "the BLAKE3 hash function";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon-core" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        description = "Buffer type for block processing of data";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
          }
        ];

      };
      "bls12_381" = rec {
        crateName = "bls12_381";
        version = "0.7.1";
        edition = "2021";
        description = "Implementation of the BLS12-381 pairing-friendly elliptic curve construction";
        sha256 = "0hary1bvjyiwkarfrj5gnmw1aa81chx43khmnlpwrrrpfjkrdhd3";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pairing";
            packageId = "pairing";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" ];
          "bits" = [ "ff/bits" ];
          "default" = [ "groups" "pairings" "alloc" "bits" ];
          "digest" = [ "dep:digest" ];
          "experimental" = [ "digest" ];
          "group" = [ "dep:group" ];
          "groups" = [ "group" ];
          "nightly" = [ "subtle/nightly" ];
          "pairing" = [ "dep:pairing" ];
          "pairings" = [ "groups" "pairing" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "default" "group" "groups" "pairing" "pairings" ];
      };
      "blst" = rec {
        crateName = "blst";
        version = "0.3.15";
        edition = "2018";
        description = "Bindings for blst BLS12-381 library";
        links = "blst";
        sha256 = "105hj0mf38mc3b61xpd3jnk670mmp5k896d5szfbdj9ay6b9im2g";
        authors = [
          "sean-sn <sean@supranational.net>"
        ];
        dependencies = [
          {
            name = "threadpool";
            packageId = "threadpool";
            target = { target, features }: (!(("wasm32" == target."arch" or null) || ("none" == target."os" or null) || ("unknown" == target."os" or null) || ("uefi" == target."os" or null)));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = { target, features }: ("msvc" == target."env" or null);
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde-secret" = [ "serde" ];
        };
      };
      "buf-fs" = rec {
        crateName = "buf-fs";
        version = "0.1.2";
        edition = "2024";
        description = "A buffer based, in-memory filesystem.";
        sha256 = "11haxi88wplrk83qp4rrwp1q3j28fdz7xwmaks9p9y6pxwwck02i";
        libName = "buf_fs";
        authors = [
          "Victor Lopez <vhrlopes@gmail.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-sdmmc";
            packageId = "embedded-sdmmc";
            usesDefaultFeatures = false;
          }
          {
            name = "relative-path";
            packageId = "relative-path";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];

      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.19.0";
        edition = "2021";
        description = "A fast bump allocation arena for Rust.";
        sha256 = "0hsdndvcpqbjb85ghrhska2qxvp9i75q2vb70hma9fxqawdy9ia6";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "bench_allocator_api" = [ "allocator_api" "blink-alloc/nightly" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "byte-slice-cast" = rec {
        crateName = "byte-slice-cast";
        version = "1.2.3";
        edition = "2018";
        description = "Safely cast bytes slices from/to slices of built-in fundamental numeric types";
        sha256 = "178c6ghnqwq472xypxabk27kjid01qxifw3bff8nj63jf8pihxbm";
        libName = "byte_slice_cast";
        authors = [
          "Sebastian Dröge <sebastian@centricular.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.1";
        edition = "2018";
        description = "A crate for mucking around with piles of bytes.";
        sha256 = "08ilqv7x5lckj82i41j5lx2is9krcxiibgrs9pispr245rwsaxjw";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn" ];
          "must_cast_extra" = [ "must_cast" ];
        };
      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        description = "Library for reading/writing numbers in big-endian and little-endian.";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        description = "Types and traits for working with bytes";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "extra-platforms" = [ "dep:extra-platforms" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "c-kzg" = rec {
        crateName = "c-kzg";
        version = "1.0.3";
        edition = "2021";
        description = "A minimal implementation of the Polynomial Commitments API for EIP-4844, written in C.";
        links = "ckzg";
        sha256 = "0a49iq6vjk656rzkbwcs2ch6x7qm6iqsa0xqdwrh0cxbzrr7yc7h";
        build = "bindings/rust/build.rs";
        libName = "c_kzg";
        libPath = "bindings/rust/src/lib.rs";
        dependencies = [
          {
            name = "blst";
            packageId = "blst";
            usesDefaultFeatures = false;
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
            target = { target, features }: ("msvc" == target."env" or null);
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" "portable" "ethereum_kzg_settings" ];
          "ethereum_kzg_settings" = [ "dep:once_cell" ];
          "generate-bindings" = [ "dep:bindgen" ];
          "no-threads" = [ "blst/no-threads" ];
          "portable" = [ "blst/portable" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "hex/std" "libc/std" "serde?/std" "once_cell?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "camino" = rec {
        crateName = "camino";
        version = "1.1.10";
        edition = "2018";
        description = "UTF-8 paths";
        sha256 = "1asw3160i5x2r98lsfym3my8dps0fyk25qi206bddn3i271mp90d";
        authors = [
          "Without Boats <saoirse@without.boats>"
          "Ashley Williams <ashley666ashley@gmail.com>"
          "Steve Klabnik <steve@steveklabnik.com>"
          "Rain <rain@sunshowers.io>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "proptest" = [ "dep:proptest" ];
          "proptest1" = [ "proptest" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "serde" "serde1" ];
      };
      "cargo-platform" = rec {
        crateName = "cargo-platform";
        version = "0.1.9";
        edition = "2021";
        description = "Cargo's representation of a target platform.";
        sha256 = "1sinpmqjdk3q9llbmxr0h0nyvqrif1r5qs34l000z73b024z2np3";
        libName = "cargo_platform";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "cargo_metadata" = rec {
        crateName = "cargo_metadata";
        version = "0.18.1";
        edition = "2018";
        description = "structured access to the output of `cargo metadata`";
        sha256 = "0drh0zndl4qgndy6kg6783cydbvhxgv0hcg7d9hhqx0zwi3nb21d";
        authors = [
          "Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>"
        ];
        dependencies = [
          {
            name = "camino";
            packageId = "camino";
            features = [ "serde1" ];
          }
          {
            name = "cargo-platform";
            packageId = "cargo-platform";
          }
          {
            name = "semver";
            packageId = "semver";
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            features = [ "unbounded_depth" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "builder" = [ "derive_builder" ];
          "derive_builder" = [ "dep:derive_builder" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "cbindgen" = rec {
        crateName = "cbindgen";
        version = "0.27.0";
        edition = "2018";
        description = "A tool for generating C bindings to Rust code.";
        crateBin = [];
        sha256 = "1sqm3axr678d72yihgmpr9d17mj99ccibxfqhw53mgzwzkbqvkiz";
        authors = [
          "Emilio Cobos Álvarez <emilio@crisal.io>"
          "Jeff Muizelaar <jmuizelaar@mozilla.com>"
          "Kartikaya Gupta <kats@mozilla.com>"
          "Ryan Hunt <rhunt@eqrion.net>"
        ];
        dependencies = [
          {
            name = "clap";
            packageId = "clap";
            optional = true;
          }
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "extra-traits" "fold" "full" "parsing" "printing" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "toml";
            packageId = "toml";
          }
        ];
        features = {
          "clap" = [ "dep:clap" ];
          "default" = [ "clap" ];
        };
        resolvedDefaultFeatures = [ "clap" "default" ];
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.29";
        edition = "2018";
        description = "A build-time dependency for Cargo build scripts to assist in invoking the native
C compiler to compile native C code into a static archive to be linked into Rust
code.
";
        sha256 = "0qlkaspjmywvjyfqhpv2x4kwrqs6b69zg33wfi2l8fg2im9rj5aw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
      };
      "cexpr" = rec {
        crateName = "cexpr";
        version = "0.6.0";
        edition = "2018";
        description = "A C expression parser and evaluator";
        sha256 = "0rl77bwhs5p979ih4r0202cn5jrfsrbgrksp40lkfz5vk1x3ib3g";
        authors = [
          "Jethro Beekman <jethro@jbeekman.nl>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.1";
        edition = "2018";
        description = "A macro to ergonomically define an item depending on a large number of #[cfg]
parameters. Structured like an if-else chain, the first matching branch is the
item that gets emitted.
";
        sha256 = "0s0jr5j797q1vqjcd41l0v5izlmlqm7lxy512b418xz5r65mfmcm";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        description = "A tiny utility to help save you a lot of effort with long winded `#[cfg()]` checks.";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.41";
        edition = "2021";
        description = "Date and time library for Rust";
        sha256 = "0k8wy2mph0mgipq28vv3wirivhb31pqs7jyid0dzjivz0i9djsf4";
        dependencies = [
          {
            name = "android-tzdata";
            packageId = "android-tzdata";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "iana-time-zone";
            packageId = "iana-time-zone";
            optional = true;
            target = { target, features }: (target."unix" or false);
            features = [ "fallback" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-link" ];
          "windows-link" = [ "dep:windows-link" ];
        };
        resolvedDefaultFeatures = [ "alloc" "android-tzdata" "clock" "iana-time-zone" "now" "std" "winapi" "windows-link" ];
      };
      "clang-sys" = rec {
        crateName = "clang-sys";
        version = "1.8.1";
        edition = "2021";
        description = "Rust bindings for libclang.";
        links = "clang";
        sha256 = "1x1r9yqss76z8xwpdanw313ss6fniwc1r7dzb5ycjn0ph53kj0hb";
        libName = "clang_sys";
        authors = [
          "Kyle Mayes <kyle@mayeses.com>"
        ];
        dependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
          {
            name = "libloading";
            packageId = "libloading";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        devDependencies = [
          {
            name = "glob";
            packageId = "glob";
          }
        ];
        features = {
          "clang_10_0" = [ "clang_9_0" ];
          "clang_11_0" = [ "clang_10_0" ];
          "clang_12_0" = [ "clang_11_0" ];
          "clang_13_0" = [ "clang_12_0" ];
          "clang_14_0" = [ "clang_13_0" ];
          "clang_15_0" = [ "clang_14_0" ];
          "clang_16_0" = [ "clang_15_0" ];
          "clang_17_0" = [ "clang_16_0" ];
          "clang_18_0" = [ "clang_17_0" ];
          "clang_3_6" = [ "clang_3_5" ];
          "clang_3_7" = [ "clang_3_6" ];
          "clang_3_8" = [ "clang_3_7" ];
          "clang_3_9" = [ "clang_3_8" ];
          "clang_4_0" = [ "clang_3_9" ];
          "clang_5_0" = [ "clang_4_0" ];
          "clang_6_0" = [ "clang_5_0" ];
          "clang_7_0" = [ "clang_6_0" ];
          "clang_8_0" = [ "clang_7_0" ];
          "clang_9_0" = [ "clang_8_0" ];
          "libloading" = [ "dep:libloading" ];
          "runtime" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [ "clang_3_5" "clang_3_6" "clang_3_7" "clang_3_8" "clang_3_9" "clang_4_0" "clang_5_0" "clang_6_0" "libloading" "runtime" ];
      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.41";
        edition = "2021";
        description = "A simple to use, efficient, and full-featured Command Line Argument Parser";
        crateBin = [];
        sha256 = "1ydd3a22bxkn2a7bajnw57cwjhawqciyhz2x3rqm8fi4h0pd74my";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [ "clap_builder/debug" "clap_derive?/debug" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "deprecated" = [ "clap_builder/deprecated" "clap_derive?/deprecated" ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [ "clap_builder/unstable-doc" "derive" ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-markdown" = [ "clap_derive/unstable-markdown" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [ "clap_builder/unstable-v5" "clap_derive?/unstable-v5" "deprecated" ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [ "color" "default" "derive" "env" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.41";
        edition = "2021";
        description = "A simple to use, efficient, and full-featured Command Line Argument Parser";
        sha256 = "0g8w6da5y13kv93psl8c00c7f4q01753wmwx84wr2bv2x50snzkh";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [ "std" "color" "help" "usage" "error-context" "suggestions" ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [ "dep:strsim" "error-context" ];
          "unicode" = [ "dep:unicode-width" "dep:unicase" ];
          "unstable-doc" = [ "cargo" "wrap_help" "env" "unicode" "string" "unstable-ext" ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [ "help" "dep:terminal_size" ];
        };
        resolvedDefaultFeatures = [ "color" "env" "error-context" "help" "std" "suggestions" "usage" ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.41";
        edition = "2021";
        description = "Parse command line argument by defining a struct, derive crate.";
        sha256 = "14glxqpfjs7z6m37f3ycrhgdkpyqmgwbr4vk1y34rjjrd8w54kzg";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-markdown" = [ "dep:pulldown-cmark" "dep:anstyle" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.5";
        edition = "2021";
        description = "Minimal, flexible command line parser";
        sha256 = "0xb6pjza43irrl99axbhs12pxq4sr8x7xd36p703j57f5i3n2kxr";

      };
      "cobs" = rec {
        crateName = "cobs";
        version = "0.3.0";
        edition = "2021";
        description = "    This is an implementation of the Consistent Overhead Byte Stuffing (COBS) algorithm.
    COBS is an algorithm for transforming a message into an encoding where a specific value
    (the \"sentinel\" value) is not used. This value can then be used to mark frame boundaries
    in a serial communication channel. ";
        sha256 = "18f0kxxa1fqb8pz2dxwssnhsrvhrs5j4p8xllgin5d7h36sn3a8g";
        authors = [
          "Allen Welkie <>"
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "defmt" = [ "dep:defmt" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "thiserror/std" ];
          "use_std" = [ "std" ];
        };
      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.4";
        edition = "2021";
        description = "Global override of color control";
        sha256 = "0x8ymkz1xr77rcj1cfanhf416pc4v681gmkc9dzb3jqja7f62nxh";

      };
      "console" = rec {
        crateName = "console";
        version = "0.15.11";
        edition = "2021";
        description = "A terminal and console abstraction for Rust";
        sha256 = "1n5gmsjk6isbnw6qss043377kln20lfwlmdk3vswpwpr21dwnk05";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "unicode-width" ];
      };
      "const-hex" = rec {
        crateName = "const-hex";
        version = "1.14.1";
        edition = "2021";
        description = "Fast byte array to hex string conversion";
        sha256 = "1zq7c8f5x8g88yynp6zkgbv7igb5scpzfx5j7n6s95hbsh72xql3";
        libName = "const_hex";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "hex";
            packageId = "hex";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "__fuzzing" = [ "dep:proptest" "std" ];
          "alloc" = [ "hex?/alloc" "serde?/alloc" "proptest?/alloc" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "serde" = [ "hex?/serde" "dep:serde" ];
          "std" = [ "hex?/std" "serde?/std" "proptest?/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "core-error" "serde" ];
      };
      "const-oid" = rec {
        crateName = "const-oid";
        version = "0.9.6";
        edition = "2021";
        description = "Const-friendly implementation of the ISO/IEC Object Identifier (OID) standard
as defined in ITU X.660, with support for BER/DER encoding/decoding as well as
heapless no_std (i.e. embedded) support
";
        sha256 = "1y0jnqaq7p2wvspnx7qj76m7hjcqpz73qzvr9l2p9n2s51vr6if2";
        libName = "const_oid";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
        };
      };
      "const_format" = rec {
        crateName = "const_format";
        version = "0.2.34";
        edition = "2021";
        description = "Compile-time string formatting";
        sha256 = "1pb3vx4k0bl3cy45fmba36hzds1jhkr8y9k3j5nnvm4abjb9fvqj";
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "const_format_proc_macros";
            packageId = "const_format_proc_macros";
          }
        ];
        features = {
          "__debug" = [ "const_format_proc_macros/debug" ];
          "__inline_const_pat_tests" = [ "__test" "fmt" ];
          "__only_new_tests" = [ "__test" ];
          "all" = [ "fmt" "derive" "rust_1_64" "assert" ];
          "assert" = [ "assertc" ];
          "assertc" = [ "fmt" "assertcp" ];
          "assertcp" = [ "rust_1_51" ];
          "const_generics" = [ "rust_1_51" ];
          "constant_time_as_str" = [ "fmt" ];
          "derive" = [ "fmt" "const_format_proc_macros/derive" ];
          "fmt" = [ "rust_1_83" ];
          "konst" = [ "dep:konst" ];
          "more_str_macros" = [ "rust_1_64" ];
          "nightly_const_generics" = [ "const_generics" ];
          "rust_1_64" = [ "rust_1_51" "konst" "konst/rust_1_64" ];
          "rust_1_83" = [ "rust_1_64" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "const_format_proc_macros" = rec {
        crateName = "const_format_proc_macros";
        version = "0.2.34";
        edition = "2021";
        description = "Implementation detail of the `const_format` crate";
        sha256 = "0i3pxxcl4xvwq4mlfg3csb4j0n6v0mhj07p6yk0vlvdirznc4mqx";
        procMacro = true;
        authors = [
          "rodrimati1992 <rodrimatt1985@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "all" = [ "derive" ];
          "debug" = [ "syn/extra-traits" ];
          "derive" = [ "syn" "syn/derive" "syn/printing" ];
          "syn" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        description = "Compares two equal-sized byte strings in constant time.";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "core-foundation 0.10.1" = rec {
        crateName = "core-foundation";
        version = "0.10.1";
        edition = "2021";
        description = "Bindings to Core Foundation for macOS";
        sha256 = "1xjns6dqf36rni2x9f47b65grxwdm20kwdg9lhmzdrrkwadcv9mj";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation 0.9.4" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        description = "Bindings to Core Foundation for macOS";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        description = "Bindings to Core Foundation for macOS";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        description = "Lightweight runtime CPU feature detection for aarch64, loongarch64, and x86/x86_64 targets,
with no_std support and support for mobile targets including Android and iOS
";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target.name == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "critical-section" = rec {
        crateName = "critical-section";
        version = "1.2.0";
        edition = "2018";
        description = "Cross-platform critical section";
        sha256 = "02ylhcykxjc40xrfhk1lwc21jqgz4dbwv3jr49ymw733c51yl3kr";
        libName = "critical_section";
        features = {
          "std" = [ "restore-state-bool" ];
        };
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.15";
        edition = "2021";
        description = "Multi-producer multi-consumer channels for message passing";
        sha256 = "1cicd9ins0fkpfgvz9vhz3m9rpkh6n8d3437c3wnfsdkd3wgif42";
        libName = "crossbeam_channel";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        description = "Concurrent work-stealing deque";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        description = "Epoch-based garbage collection";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        description = "Utilities for concurrent programming";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.4";
        edition = "2021";
        description = "Crunchy unroller: deterministically unroll constant loops";
        sha256 = "1mbp5navim2qr3x48lyvadqblcxc1dm0lqr0swrkkwy2qblvw3s6";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "crypto-bigint" = rec {
        crateName = "crypto-bigint";
        version = "0.5.5";
        edition = "2021";
        description = "Pure Rust implementation of a big integer library which has been designed from
the ground-up for use in cryptographic applications. Provides constant-time,
no_std-friendly implementations of modern formulas using const generics.
";
        sha256 = "0xmbdff3g6ii5sbxjxc31xfkv9lrmyril4arh3dzckd4gjsjzj8d";
        libName = "crypto_bigint";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            features = [ "std" ];
          }
        ];
        features = {
          "alloc" = [ "serdect?/alloc" ];
          "default" = [ "rand" ];
          "der" = [ "dep:der" ];
          "generic-array" = [ "dep:generic-array" ];
          "rand" = [ "rand_core/std" ];
          "rand_core" = [ "dep:rand_core" ];
          "rlp" = [ "dep:rlp" ];
          "serde" = [ "dep:serdect" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "generic-array" "rand_core" "zeroize" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        description = "Common cryptographic traits";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ctrlc" = rec {
        crateName = "ctrlc";
        version = "3.4.7";
        edition = "2021";
        description = "Easy Ctrl-C handler for Rust projects";
        sha256 = "0wvf4w2wbpdnhp828jqw435x5ly4k7k1y1vzxxbdddsrlj03gya6";
        authors = [
          "Antti Keränen <detegr@gmail.com>"
        ];
        dependencies = [
          {
            name = "nix";
            packageId = "nix";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [ "fs" "signal" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Threading" "Win32_Security" "Win32_System_Console" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" "Win32_System_IO" "Win32_System_Console" ];
          }
        ];
        features = {
        };
      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.11";
        edition = "2021";
        description = "A proc-macro library for reading attributes into structs when
implementing custom derives.
";
        sha256 = "1vmlphlrlw4f50z16p4bc9p5qwdni1ba95qmxfrrmzs6dh8lczzw";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.11";
        edition = "2021";
        description = "Helper crate for proc-macro library for reading attributes into structs when
implementing custom derives. Use https://crates.io/crates/darling in your code.
";
        sha256 = "0bj1af6xl4ablnqbgn827m43b8fiicgv180749f5cphqdmcvj00d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.11";
        edition = "2021";
        description = "Internal support for a proc-macro library for reading attributes into structs when
implementing custom derives. Use https://crates.io/crates/darling in your code.
";
        sha256 = "1bbfbc2px6sj1pqqq97bgqn6c8xdnb2fmz66f7f40nrqrcybjd7w";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "dashu" = rec {
        crateName = "dashu";
        version = "0.4.2";
        edition = "2021";
        description = "A library set of big numbers";
        sha256 = "1q6pnczwgcidam8jcylq0r2pia0jn3i15f85xyaikzr33snfbcw5";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-macros";
            packageId = "dashu-macros";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-ratio";
            packageId = "dashu-ratio";
            usesDefaultFeatures = false;
            features = [ "dashu-float" ];
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "decimal-extras" = [ "dashu-float/postgres-types" "dashu-float/diesel" ];
          "default" = [ "std" "num-order" ];
          "num-order" = [ "dashu-int/num-order" "dashu-float/num-order" "dashu-ratio/num-order" ];
          "num-traits" = [ "dashu-int/num-traits" "dashu-float/num-traits" "dashu-ratio/num-traits" ];
          "num-traits_v02" = [ "dashu-int/num-traits_v02" "dashu-float/num-traits_v02" "dashu-ratio/num-traits_v02" ];
          "rand" = [ "dashu-int/rand" "dashu-float/rand" "dashu-ratio/rand" ];
          "rand_v08" = [ "dashu-int/rand_v08" "dashu-float/rand_v08" "dashu-ratio/rand_v08" ];
          "serde" = [ "dashu-int/serde" "dashu-float/serde" "dashu-ratio/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" "dashu-float/std" "dashu-ratio/std" ];
          "zeroize" = [ "dashu-int/zeroize" "dashu-float/zeroize" "dashu-ratio/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "num-order" "std" ];
      };
      "dashu-base" = rec {
        crateName = "dashu-base";
        version = "0.4.1";
        edition = "2021";
        description = "Common trait definitions and tools for the `dashu` libraries";
        sha256 = "12gjivqax003blwg9g9zrr4k1509042dnbgazxc8r9jsp3v0pf60";
        libName = "dashu_base";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "dashu-float" = rec {
        crateName = "dashu-float";
        version = "0.4.3";
        edition = "2021";
        description = "A big float library supporting arbitrary precision, arbitrary base and arbitrary rounding mode";
        sha256 = "1rv323visgbwr9w9n31zchrx7f1d6mpq2jph46yy3lnvm12q81w5";
        libName = "dashu_float";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
            rename = "_num-modular";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" "num-order" ];
          "diesel" = [ "diesel_v2" ];
          "diesel_v1" = [ "dep:diesel_v1" ];
          "diesel_v2" = [ "dep:diesel_v2" ];
          "num-order" = [ "dep:num-order" "dep:_num-modular" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" "dashu-int/num-traits_v02" ];
          "postgres-types" = [ "postgres-types_v02" ];
          "postgres-types_v02" = [ "dep:postgres-types_v02" "dep:_bytes" "std" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" "dashu-int/rand_v08" ];
          "serde" = [ "dep:serde" "dashu-int/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" ];
          "zeroize" = [ "dep:zeroize" "dashu-int/zeroize" ];
        };
        resolvedDefaultFeatures = [ "num-order" "std" ];
      };
      "dashu-int" = rec {
        crateName = "dashu-int";
        version = "0.4.1";
        edition = "2021";
        description = "A big integer library with good performance";
        sha256 = "1gwzvgzm21kw324s30lcknxm934vzwfv5fzg8k8a8d6a660d16gf";
        libName = "dashu_int";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
          "Tomek Czajka <tczajka@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
        ];
        features = {
          "default" = [ "std" "num-order" ];
          "num-integer" = [ "num-integer_v01" ];
          "num-integer_v01" = [ "dep:num-integer_v01" ];
          "num-order" = [ "dep:num-order" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "dashu-base/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "num-order" "std" ];
      };
      "dashu-macros" = rec {
        crateName = "dashu-macros";
        version = "0.4.1";
        edition = "2021";
        description = "Procedure macros for creating big numbers";
        sha256 = "045by0y6a3g7c064zw5sk6acdppr9sgg177dx7v6crrnyqz1qf4k";
        procMacro = true;
        libName = "dashu_macros";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-ratio";
            packageId = "dashu-ratio";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];

      };
      "dashu-ratio" = rec {
        crateName = "dashu-ratio";
        version = "0.4.1";
        edition = "2021";
        description = "A big rational library with good performance";
        sha256 = "1jb4hwj8fm26nyh13fafvyzjnkrmkr0x6s9al3wcrqbwvl23pqs7";
        libName = "dashu_ratio";
        authors = [
          "Jacob Zhong <cmpute@gmail.com>"
        ];
        dependencies = [
          {
            name = "dashu-base";
            packageId = "dashu-base";
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-float";
            packageId = "dashu-float";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dashu-int";
            packageId = "dashu-int";
            usesDefaultFeatures = false;
          }
          {
            name = "num-modular";
            packageId = "num-modular";
            rename = "_num-modular";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-order";
            packageId = "num-order";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "dashu-float" = [ "dep:dashu-float" ];
          "default" = [ "std" "num-order" "dashu-float" ];
          "num-order" = [ "dep:num-order" "dep:_num-modular" ];
          "num-traits" = [ "num-traits_v02" ];
          "num-traits_v02" = [ "dep:num-traits_v02" "dashu-int/num-traits_v02" ];
          "rand" = [ "rand_v08" ];
          "rand_v08" = [ "dep:rand_v08" "dashu-int/rand_v08" ];
          "serde" = [ "dep:serde" "dashu-int/serde" ];
          "std" = [ "dashu-base/std" "dashu-int/std" ];
          "zeroize" = [ "dep:zeroize" "dashu-int/zeroize" ];
        };
        resolvedDefaultFeatures = [ "dashu-float" "num-order" "std" ];
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.9.0";
        edition = "2018";
        description = "Efficient and customizable data-encoding functions like base64, base32, and hex";
        sha256 = "0xm46371aw613ghc12ay4vsnn49hpcmcwlijnqy8lbp2bpd308ra";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "der" = rec {
        crateName = "der";
        version = "0.7.10";
        edition = "2021";
        description = "Pure Rust embedded-friendly implementation of the Distinguished Encoding Rules
(DER) for Abstract Syntax Notation One (ASN.1) as described in ITU X.690 with
full support for heapless no_std targets
";
        sha256 = "1jyxacyxdx6mxbkfw99jz59dzvcd9k17rq01a7xvn1dr6wl87hg7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468";
            optional = true;
            features = [ "alloc" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "arbitrary" = [ "dep:arbitrary" "const-oid?/arbitrary" "std" ];
          "bytes" = [ "dep:bytes" "alloc" ];
          "derive" = [ "dep:der_derive" ];
          "flagset" = [ "dep:flagset" ];
          "oid" = [ "dep:const-oid" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "zeroize" ];
          "std" = [ "alloc" ];
          "time" = [ "dep:time" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "oid" "pem" "std" "zeroize" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.4.0";
        edition = "2021";
        description = "Ranged integers";
        sha256 = "13h6skwk411wzhf1l9l7d3yz5y6vg9d7s3dwhhb4a942r88nm7lw";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "dep:deranged-macros" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "rand08" "rand09" ];
          "rand08" = [ "dep:rand08" ];
          "rand09" = [ "dep:rand09" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "std" ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        description = "A set of alternative `derive` attributes for Rust";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "use_core" ];
      };
      "derive_more 1.0.0" = rec {
        crateName = "derive_more";
        version = "1.0.0";
        edition = "2021";
        description = "Adds #[derive(x)] macros for more traits";
        sha256 = "01cd8pskdjg10dvfchi6b8a9pa1ja1ic0kbn45dl8jdyrfwrk6sa";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 1.0.0";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "deref" "deref_mut" "from" "into_iterator" "not" ];
      };
      "derive_more 2.0.1" = rec {
        crateName = "derive_more";
        version = "2.0.1";
        edition = "2021";
        description = "Adds #[derive(x)] macros for more traits";
        sha256 = "0y3n97cc7rsvgnj211p92y1ppzh6jzvq5kvk6340ghkhfp7l4ch9";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "derive_more-impl";
            packageId = "derive_more-impl 2.0.1";
          }
        ];
        features = {
          "add" = [ "derive_more-impl/add" ];
          "add_assign" = [ "derive_more-impl/add_assign" ];
          "as_ref" = [ "derive_more-impl/as_ref" ];
          "constructor" = [ "derive_more-impl/constructor" ];
          "debug" = [ "derive_more-impl/debug" ];
          "default" = [ "std" ];
          "deref" = [ "derive_more-impl/deref" ];
          "deref_mut" = [ "derive_more-impl/deref_mut" ];
          "display" = [ "derive_more-impl/display" ];
          "error" = [ "derive_more-impl/error" ];
          "from" = [ "derive_more-impl/from" ];
          "from_str" = [ "derive_more-impl/from_str" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "index" = [ "derive_more-impl/index" ];
          "index_mut" = [ "derive_more-impl/index_mut" ];
          "into" = [ "derive_more-impl/into" ];
          "into_iterator" = [ "derive_more-impl/into_iterator" ];
          "is_variant" = [ "derive_more-impl/is_variant" ];
          "mul" = [ "derive_more-impl/mul" ];
          "mul_assign" = [ "derive_more-impl/mul_assign" ];
          "not" = [ "derive_more-impl/not" ];
          "sum" = [ "derive_more-impl/sum" ];
          "testing-helpers" = [ "derive_more-impl/testing-helpers" "dep:rustc_version" ];
          "try_from" = [ "derive_more-impl/try_from" ];
          "try_into" = [ "derive_more-impl/try_into" ];
          "try_unwrap" = [ "derive_more-impl/try_unwrap" ];
          "unwrap" = [ "derive_more-impl/unwrap" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "default" "deref" "deref_mut" "display" "from" "from_str" "index" "index_mut" "into" "into_iterator" "not" "std" ];
      };
      "derive_more-impl 1.0.0" = rec {
        crateName = "derive_more-impl";
        version = "1.0.0";
        edition = "2021";
        description = "Internal implementation of `derive_more` crate";
        sha256 = "08mxyd456ygk68v5nfn4dyisn82k647w9ri2jl19dqpvmnp30wyb";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "default" "deref" "deref_mut" "from" "into_iterator" "not" ];
      };
      "derive_more-impl 2.0.1" = rec {
        crateName = "derive_more-impl";
        version = "2.0.1";
        edition = "2021";
        description = "Internal implementation of `derive_more` crate";
        sha256 = "1wqxcb7d5lzvpplz9szp4rwy1r23f5wmixz0zd2vcjscqknji9mx";
        procMacro = true;
        libName = "derive_more_impl";
        authors = [
          "Jelte Fennema <github-tech@jeltef.nl>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        features = {
          "as_ref" = [ "syn/extra-traits" "syn/visit" ];
          "debug" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "display" = [ "syn/extra-traits" "dep:unicode-xid" ];
          "error" = [ "syn/extra-traits" ];
          "from" = [ "syn/extra-traits" ];
          "full" = [ "add" "add_assign" "as_ref" "constructor" "debug" "deref" "deref_mut" "display" "error" "from" "from_str" "index" "index_mut" "into" "into_iterator" "is_variant" "mul" "mul_assign" "not" "sum" "try_from" "try_into" "try_unwrap" "unwrap" ];
          "into" = [ "syn/extra-traits" ];
          "is_variant" = [ "dep:convert_case" ];
          "mul" = [ "syn/extra-traits" ];
          "mul_assign" = [ "syn/extra-traits" ];
          "not" = [ "syn/extra-traits" ];
          "testing-helpers" = [ "dep:rustc_version" ];
          "try_into" = [ "syn/extra-traits" ];
          "try_unwrap" = [ "dep:convert_case" ];
          "unwrap" = [ "dep:convert_case" ];
        };
        resolvedDefaultFeatures = [ "add" "add_assign" "as_ref" "default" "deref" "deref_mut" "display" "from" "from_str" "index" "index_mut" "into" "into_iterator" "not" ];
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        description = "Traits for cryptographic hash functions and message authentication codes";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "const-oid";
            packageId = "const-oid";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "const-oid" "core-api" "default" "mac" "oid" "std" "subtle" ];
      };
      "dirs" = rec {
        crateName = "dirs";
        version = "5.0.1";
        edition = "2015";
        description = "A tiny low-level library that provides platform-specific standard locations of directories for config, cache and other data on Linux, Windows, macOS and Redox by leveraging the mechanisms defined by the XDG base/user directory specifications on Linux, the Known Folder API on Windows, and the Standard Directory guidelines on macOS.";
        sha256 = "0992xk5vx75b2x91nw9ssb51mpl8x73j9rxmpi96cryn0ffmmi24";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "dirs-sys";
            packageId = "dirs-sys";
          }
        ];

      };
      "dirs-sys" = rec {
        crateName = "dirs-sys";
        version = "0.4.1";
        edition = "2015";
        description = "System-level helper functions for the dirs and directories crates.";
        sha256 = "071jy0pvaad9lsa6mzawxrh7cmr7hsmsdxwzm7jzldfkrfjha3sj";
        libName = "dirs_sys";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "option-ext";
            packageId = "option-ext";
          }
          {
            name = "redox_users";
            packageId = "redox_users";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_UI_Shell" "Win32_Foundation" "Win32_Globalization" "Win32_System_Com" ];
          }
        ];

      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        description = "A derive macro for implementing the display Trait via a doc comment and string interpolation
";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.1";
        edition = "2015";
        description = "Trait object downcasting support using only safe Rust. It supports type
parameters, associated types, and type constraints.
";
        sha256 = "1lmrq383d1yszp7mg5i7i56b17x2lnn3kb91jwsq0zykvg2jbcvm";
        libName = "downcast_rs";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "downloader" = rec {
        crateName = "downloader";
        version = "0.2.8";
        edition = "2018";
        description = "A simple way to download things via HTTP/HTTPS";
        sha256 = "0d2aibqwp92ihbdh66xwjs9bw01jprsakwxjcpai41w3ss4fihcs";
        authors = [
          "Tobias Hunger <tobias.hunger@gmail.com>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "default" = [ "default-tls" ];
          "default-tls" = [ "reqwest/default-tls" ];
          "digest" = [ "dep:digest" ];
          "indicatif" = [ "dep:indicatif" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
          "tui" = [ "indicatif" ];
          "verify" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "digest" "rustls-tls" "verify" ];
      };
      "dunce" = rec {
        crateName = "dunce";
        version = "1.0.5";
        edition = "2021";
        description = "Normalize Windows paths to the most compatible format, avoiding UNC where possible";
        sha256 = "04y8wwv3vvcqaqmqzssi6k0ii9gs6fpz96j5w9nky2ccsl23axwj";
        authors = [
          "Kornel <kornel@geekhood.net>"
        ];

      };
      "ecdsa" = rec {
        crateName = "ecdsa";
        version = "0.16.9";
        edition = "2021";
        description = "Pure Rust implementation of the Elliptic Curve Digital Signature Algorithm
(ECDSA) as specified in FIPS 186-4 (Digital Signature Standard), providing
RFC6979 deterministic signatures as well as support for added entropy
";
        sha256 = "1jhb0bcbkaz4001sdmfyv8ajrv8a1cg7z7aa5myrd4jjbhmz69zf";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            optional = true;
          }
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "digest" "sec1" ];
          }
          {
            name = "rfc6979";
            packageId = "rfc6979";
            optional = true;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
            features = [ "rand_core" ];
          }
          {
            name = "spki";
            packageId = "spki";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" "signature/alloc" "spki/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "default" = [ "digest" ];
          "der" = [ "dep:der" ];
          "dev" = [ "arithmetic" "digest" "elliptic-curve/dev" "hazmat" ];
          "digest" = [ "dep:digest" "signature/digest" ];
          "pem" = [ "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "digest" "elliptic-curve/pkcs8" "der" ];
          "rfc6979" = [ "dep:rfc6979" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "signing" = [ "arithmetic" "digest" "hazmat" "rfc6979" ];
          "spki" = [ "dep:spki" ];
          "std" = [ "alloc" "elliptic-curve/std" "signature/std" ];
          "verifying" = [ "arithmetic" "digest" "hazmat" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "der" "digest" "hazmat" "pem" "pkcs8" "rfc6979" "serde" "serdect" "signing" "spki" "std" "verifying" ];
      };
      "educe" = rec {
        crateName = "educe";
        version = "0.6.0";
        edition = "2021";
        description = "This crate offers procedural macros designed to facilitate the swift implementation of Rust's built-in traits.";
        sha256 = "05wlg6wzil59lxc3kbs476gwykj6m63dbfv83frxx35xw54w0yqx";
        procMacro = true;
        authors = [
          "Magic Len <len@magiclen.org>"
        ];
        dependencies = [
          {
            name = "enum-ordinalize";
            packageId = "enum-ordinalize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "Debug" "Clone" "Copy" "PartialEq" "Eq" "PartialOrd" "Ord" "Hash" "Default" "Deref" "DerefMut" "Into" ];
          "full" = [ "syn/full" ];
        };
        resolvedDefaultFeatures = [ "Clone" "Copy" "Debug" "Default" "Deref" "DerefMut" "Eq" "Hash" "Into" "Ord" "PartialEq" "PartialOrd" "default" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        description = "The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.
";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" "use_std" ];
      };
      "elf" = rec {
        crateName = "elf";
        version = "0.7.4";
        edition = "2021";
        description = "A pure-rust library for parsing ELF files";
        sha256 = "0yyij25ps8mln1s1xzwggjr88gb2b35c8jf8az25dmfvfaar0ia4";
        authors = [
          "Christopher Cole <chris.cole.09@gmail.com>"
        ];
        features = {
          "default" = [ "std" "to_str" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "to_str" ];
      };
      "elliptic-curve" = rec {
        crateName = "elliptic-curve";
        version = "0.13.8";
        edition = "2021";
        description = "General purpose Elliptic Curve Cryptography (ECC) support, including types
and traits for representing various elliptic curve forms, scalars, points,
and public/secret keys composed thereof.
";
        sha256 = "0ixx4brgnzi61z29r3g1606nh2za88hzyz8c5r3p6ydzhqq09rmm";
        libName = "elliptic_curve";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
          }
          {
            name = "crypto-bigint";
            packageId = "crypto-bigint";
            usesDefaultFeatures = false;
            features = [ "rand_core" "generic-array" "zeroize" ];
          }
          {
            name = "digest";
            packageId = "digest";
            optional = true;
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            usesDefaultFeatures = false;
            features = [ "zeroize" ];
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pem-rfc7468";
            packageId = "pem-rfc7468";
            optional = true;
            features = [ "alloc" ];
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "sec1";
            packageId = "sec1";
            optional = true;
            features = [ "subtle" "zeroize" ];
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "ff?/alloc" "group?/alloc" "pkcs8?/alloc" "sec1?/alloc" "zeroize/alloc" ];
          "arithmetic" = [ "group" ];
          "bits" = [ "arithmetic" "ff/bits" "dep:tap" ];
          "default" = [ "arithmetic" ];
          "dev" = [ "arithmetic" "dep:hex-literal" "pem" "pkcs8" ];
          "digest" = [ "dep:digest" ];
          "ecdh" = [ "arithmetic" "digest" "dep:hkdf" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "ff" ];
          "hash2curve" = [ "arithmetic" "digest" ];
          "jwk" = [ "dep:base64ct" "dep:serde_json" "alloc" "serde" "zeroize/alloc" ];
          "pem" = [ "dep:pem-rfc7468" "alloc" "arithmetic" "pkcs8" "sec1/pem" ];
          "pkcs8" = [ "dep:pkcs8" "sec1" ];
          "sec1" = [ "dep:sec1" ];
          "serde" = [ "dep:serdect" "alloc" "pkcs8" "sec1/serde" ];
          "std" = [ "alloc" "rand_core/std" "pkcs8?/std" "sec1?/std" ];
          "voprf" = [ "digest" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ff" "group" "hazmat" "pem" "pkcs8" "sec1" "serde" "std" ];
      };
      "embedded-hal" = rec {
        crateName = "embedded-hal";
        version = "1.0.0";
        edition = "2021";
        description = " A Hardware Abstraction Layer (HAL) for embedded systems ";
        sha256 = "128bb4h3kw8gvz6w7xa0z0j6nrk5jhm3aa7v350clkh0nzz906in";
        libName = "embedded_hal";
        authors = [
          "The Embedded HAL Team <embedded-hal@teams.rust-embedded.org>"
          "Jorge Aparicio <jorge@japaric.io>"
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
        ];
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
        };
      };
      "embedded-io 0.4.0" = rec {
        crateName = "embedded-io";
        version = "0.4.0";
        edition = "2021";
        description = "Embedded IO traits";
        sha256 = "1v9wrc5nsgaaady7i3ya394sik5251j0iq5rls7mrx7fv696h6pg";
        libName = "embedded_io";
        features = {
          "defmt" = [ "dep:defmt" ];
          "futures" = [ "std" "async" "dep:futures" ];
          "log" = [ "dep:log" ];
          "std" = [ "alloc" "futures?/std" ];
          "tokio" = [ "std" "async" "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "embedded-io 0.6.1" = rec {
        crateName = "embedded-io";
        version = "0.6.1";
        edition = "2021";
        description = "Embedded IO traits";
        sha256 = "0v901xykajh3zffn6x4cnn4fhgfw3c8qpjwbsk6gai3gaccg3l7d";
        libName = "embedded_io";
        features = {
          "defmt-03" = [ "dep:defmt-03" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "embedded-sdmmc" = rec {
        crateName = "embedded-sdmmc";
        version = "0.8.2";
        edition = "2021";
        description = "A basic SD/MMC driver for Embedded Rust.";
        sha256 = "14jyjl3w35fjmpdzwgdb62lv7ckcnbl294b2s3wxza97yc82l4x1";
        libName = "embedded_sdmmc";
        authors = [
          "Jonathan 'theJPster' Pallant <github@thejpster.org.uk>"
          "Rust Embedded Community Developers"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-hal";
            packageId = "embedded-hal";
          }
          {
            name = "heapless";
            packageId = "heapless 0.8.0";
          }
        ];
        features = {
          "default" = [ "log" ];
          "defmt-log" = [ "dep:defmt" ];
          "log" = [ "dep:log" ];
        };
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        description = "UTF-8 and UTF-16 character types, iterators and related methods for char, u8 and u16.
";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "encoding_rs" = rec {
        crateName = "encoding_rs";
        version = "0.8.35";
        edition = "2018";
        description = "A Gecko-oriented implementation of the Encoding Standard";
        sha256 = "1wv64xdrr9v37rqqdjsyb8l8wzlcbab80ryxhrszvnj59wy0y0vm";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "any_all_workaround" = [ "dep:any_all_workaround" ];
          "default" = [ "alloc" ];
          "fast-legacy-encode" = [ "fast-hangul-encode" "fast-hanja-encode" "fast-kanji-encode" "fast-gb-hanzi-encode" "fast-big5-hanzi-encode" ];
          "serde" = [ "dep:serde" ];
          "simd-accel" = [ "any_all_workaround" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "enum-map" = rec {
        crateName = "enum-map";
        version = "2.7.3";
        edition = "2021";
        description = "A map with C-like enum keys represented internally as an array";
        sha256 = "1sgjgl4mmz93jdkfdsmapc3dmaq8gddagw9s0fd501w2vyzz6rk8";
        libName = "enum_map";
        authors = [
          "Kamila Borowska <kamila@borowska.pw>"
        ];
        dependencies = [
          {
            name = "enum-map-derive";
            packageId = "enum-map-derive";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "enum-map-derive" = rec {
        crateName = "enum-map-derive";
        version = "0.17.0";
        edition = "2021";
        description = "Macros 1.1 implementation of #[derive(Enum)]";
        sha256 = "1sv4mb343rsz4lc3rh7cyn0pdhf7fk18k1dgq8kfn5i5x7gwz0pj";
        procMacro = true;
        libName = "enum_map_derive";
        authors = [
          "Kamila Borowska <kamila@borowska.pw>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "proc-macro" ];
          }
        ];

      };
      "enum-ordinalize" = rec {
        crateName = "enum-ordinalize";
        version = "4.3.0";
        edition = "2021";
        description = "This library enables enums to not only obtain the ordinal values of their variants but also allows for the construction of enums from an ordinal value.";
        sha256 = "1max64z9giii61qcwl56rndd7pakaylkaij5zqbbbvjl9vxdr87y";
        libName = "enum_ordinalize";
        dependencies = [
          {
            name = "enum-ordinalize-derive";
            packageId = "enum-ordinalize-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "derive" "traits" ];
          "derive" = [ "dep:enum-ordinalize-derive" ];
          "traits" = [ "enum-ordinalize-derive?/traits" ];
        };
        resolvedDefaultFeatures = [ "derive" ];
      };
      "enum-ordinalize-derive" = rec {
        crateName = "enum-ordinalize-derive";
        version = "4.3.1";
        edition = "2021";
        description = "This crate provides a procedural macro that enables enums to not only obtain the ordinal values of their variants but also allows for the construction of enums from an ordinal value.";
        sha256 = "1zy53fabazimwv5cl0366k834ybixzl84lxj9mfavbnlfn532a0d";
        procMacro = true;
        libName = "enum_ordinalize_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
        };
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        description = "Traits for key comparison in maps.";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.13";
        edition = "2018";
        description = "Cross-platform interface to the `errno` variable.";
        sha256 = "1bd5g3srn66zr3bspac0150bvpg1s7zi6zwhwhlayivciz12m3kp";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.60.2";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Diagnostics_Debug" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "eventsource-stream" = rec {
        crateName = "eventsource-stream";
        version = "0.2.3";
        edition = "2018";
        description = "A basic building block for building an Eventsource from a Stream of bytes";
        sha256 = "1awhkl4xh9f66j9m770qvn2l74cr4l59ssqmv4lz99a7j9bg9zkl";
        libName = "eventsource_stream";
        authors = [
          "Julian Popescu <jpopesculian@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "futures-core/std" "nom/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "eyre" = rec {
        crateName = "eyre";
        version = "0.6.12";
        edition = "2018";
        description = "Flexible concrete Error Reporting type built on std::error::Error with customizable Reports";
        sha256 = "1v1a3vb9gs5zkwp4jzkcfnpg0gvyp4ifydzx37f4qy14kzcibnbw";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Jane Lusby <jlusby42@gmail.com>"
        ];
        dependencies = [
          {
            name = "indenter";
            packageId = "indenter";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "auto-install" "track-caller" ];
          "pyo3" = [ "dep:pyo3" ];
        };
        resolvedDefaultFeatures = [ "auto-install" "default" "track-caller" ];
      };
      "fastrand" = rec {
        crateName = "fastrand";
        version = "2.3.0";
        edition = "2018";
        description = "A simple and fast random number generator";
        sha256 = "1ghiahsw1jd68df895cy5h3gzwk30hndidn3b682zmshpgmrx41p";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [ "std" "getrandom" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "ff 0.12.1" = rec {
        crateName = "ff";
        version = "0.12.1";
        edition = "2021";
        description = "Library for building and interfacing with finite fields";
        sha256 = "0q3imz4m3dj2cy182i20wa8kbclgj13ddfngqb2miicc6cjzq4yh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "bitvec" "default" "std" ];
      };
      "ff 0.13.1" = rec {
        crateName = "ff";
        version = "0.13.1";
        edition = "2021";
        description = "Library for building and interfacing with finite fields";
        sha256 = "14v3bc6q24gbcjnxjfbq2dddgf4as2z2gd4mj35gjlrncpxhpdf0";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff_derive";
            packageId = "ff_derive";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "bits" "std" ];
          "derive" = [ "byteorder" "ff_derive" ];
          "derive_bits" = [ "bits" "ff_derive/bits" ];
          "ff_derive" = [ "dep:ff_derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "bitvec" "byteorder" "default" "derive" "derive_bits" "ff_derive" "std" ];
      };
      "ff_derive" = rec {
        crateName = "ff_derive";
        version = "0.13.1";
        edition = "2021";
        description = "Procedural macro library used to build custom prime field implementations";
        sha256 = "0q0v2p64zd6q630776a9hqch7hwggal6nz2qjy8ykc1n41ji43gi";
        procMacro = true;
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "addchain";
            packageId = "addchain";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.3.3";
          }
          {
            name = "num-integer";
            packageId = "num-integer";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "bits" ];
      };
      "flume" = rec {
        crateName = "flume";
        version = "0.11.1";
        edition = "2018";
        description = "A blazingly fast multi-producer channel";
        sha256 = "15ch0slxa8sqsi6c73a0ky6vdnh48q8cxjf7rksa3243m394s3ns";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "nanorand";
            packageId = "nanorand";
            optional = true;
            features = [ "getrandom" ];
          }
          {
            name = "spin";
            packageId = "spin";
            rename = "spin1";
            features = [ "mutex" ];
          }
        ];
        features = {
          "async" = [ "futures-sink" "futures-core" ];
          "default" = [ "async" "select" "eventual-fairness" ];
          "eventual-fairness" = [ "select" "nanorand" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "nanorand" = [ "dep:nanorand" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "eventual-fairness" "futures-core" "futures-sink" "nanorand" "select" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        description = "Fowler–Noll–Vo hash function";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foldhash" = rec {
        crateName = "foldhash";
        version = "0.1.5";
        edition = "2021";
        description = "A fast, non-cryptographic, minimally DoS-resistant hashing algorithm.";
        sha256 = "1wisr1xlc2bj7hk4rgkcjkz3j2x4dhd1h9lwk7mj8p71qpdgbi6r";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        description = "A framework for Rust wrappers over C APIs";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        libName = "foreign_types";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];

      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        description = "An internal crate used by foreign-types";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        libName = "foreign_types_shared";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        description = "Parser and serializer for the application/x-www-form-urlencoded syntax, as used by HTML forms.";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "funty" = rec {
        crateName = "funty";
        version = "2.0.0";
        edition = "2018";
        description = "Trait generalization over the primitive types";
        sha256 = "177w048bm0046qlzvp33ag3ghqkqw4ncpzcm5lq36gxf2lla7mg6";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        description = "An implementation of futures and streams featuring zero allocations,
composability, and iterator-like interfaces.
";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        description = "Channels for asynchronous communication using futures-rs.
";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        description = "The core traits and types in for the `futures` library.
";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        description = "Executors for asynchronous tasks based on the futures-rs library.
";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        description = "The `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and `AsyncBufRead` traits for the futures-rs library.
";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        description = "The futures-rs procedural macro implementations.
";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        description = "The asynchronous `Sink` trait for the futures-rs library.
";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        description = "Tools for working with tasks.
";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        description = "Common utilities and extension traits for the futures-rs library.
";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" ];
      };
      "gcd" = rec {
        crateName = "gcd";
        version = "2.3.0";
        edition = "2021";
        description = "Calculate the greatest common divisor";
        sha256 = "06l4fib4dh4m6gazdrzzzinhvcpcfh05r4i4gzscl03vnjhqnx8x";
        authors = [
          "Corey Farwell <coreyf@rwell.org>"
        ];

      };
      "gen_ops" = rec {
        crateName = "gen_ops";
        version = "0.4.0";
        edition = "2021";
        description = "Macros for operator overloading for generic types";
        sha256 = "02hfbxyz79z284g4l9gdqhw99rn8pgyb0si9babj1102nyfy2k9h";
        authors = [
          "K Vinayak <kvinayakklly4@gmail.com>"
        ];

      };
      "generic-array 0.14.7" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        description = "Generic types implementing functionality of arrays";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" "zeroize" ];
      };
      "generic-array 1.1.0" = rec {
        crateName = "generic-array";
        version = "1.1.0";
        edition = "2021";
        description = "Generic types implementing functionality of arrays";
        sha256 = "0jkrabz14jb3wpvyhcaf4dh7gj76zc3f38bhrvpc7hkig6r2slcn";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
            features = [ "const-generics" ];
          }
        ];
        features = {
          "const-default" = [ "dep:const-default" ];
          "faster-hex" = [ "dep:faster-hex" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "serde" ];
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        description = "A small cross-platform library for retrieving random data from system source";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "custom" "js" "js-sys" "rdrand" "std" "wasm-bindgen" ];
      };
      "getrandom 0.3.3" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        description = "A small cross-platform library for retrieving random data from system source";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = { target, features }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi 0.14.2+wasi-0.2.4";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "dep:compiler_builtins" "dep:core" ];
          "wasm_js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" "wasm_js" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        description = "A library for reading and writing the DWARF debugging format.";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.2";
        edition = "2015";
        description = "Support for matching file paths against Unix shell style patterns.
";
        sha256 = "1cm2w34b5w45fxr522h5b0fv1bxchfswcj560m3pnjbia7asvld8";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "group 0.12.1" = rec {
        crateName = "group";
        version = "0.12.1";
        edition = "2021";
        description = "Elliptic curve group traits and utilities";
        sha256 = "1ixspxqdpq0hxg0hd9s6rngrp6rll21v4jjnr7ar1lzvdhxgpysx";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "memuse";
            packageId = "memuse";
            optional = true;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "memuse" "wnaf-memuse" ];
      };
      "group 0.13.0" = rec {
        crateName = "group";
        version = "0.13.0";
        edition = "2021";
        description = "Elliptic curve group traits and utilities";
        sha256 = "0qqs2p5vqnv3zvq9mfjkmw3qlvgqb0c3cm6p33srkh7pc9sfzygh";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.13.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "memuse" = [ "dep:memuse" ];
          "rand" = [ "dep:rand" ];
          "rand_xorshift" = [ "dep:rand_xorshift" ];
          "tests" = [ "alloc" "rand" "rand_xorshift" ];
          "wnaf-memuse" = [ "alloc" "memuse" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "h2" = rec {
        crateName = "h2";
        version = "0.4.11";
        edition = "2021";
        description = "An HTTP/2 client and server";
        sha256 = "118771sqbsa6cn48y9waxq24jx80f5xy8af0lq5ixq7ifsi51nhp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-util" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "codec" "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" "sync" "net" ];
          }
        ];
        features = {
        };
      };
      "halo2" = rec {
        crateName = "halo2";
        version = "0.1.0-beta.2";
        edition = "2018";
        description = "[BETA] Fast zero-knowledge proof-carrying data implementation with no trusted setup";
        sha256 = "15armrhslknn33pc9lk1b94phlxxsm5a8b8h70azwlw2ndwwf8ra";
        authors = [
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "halo2_proofs";
            packageId = "halo2_proofs";
          }
        ];

      };
      "halo2_proofs" = rec {
        crateName = "halo2_proofs";
        version = "0.1.0";
        edition = "2021";
        description = "Fast PLONK-based zero-knowledge proving system with no trusted setup
";
        sha256 = "0q1pjcazcfz92rscc875plixzwznag3qbdpjqxj87vmd942ph9g9";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
          }
          {
            name = "group";
            packageId = "group 0.12.1";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves 0.4.1";
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "dev-graph" = [ "plotters" "tabbycat" ];
          "gadget-traces" = [ "backtrace" ];
          "plotters" = [ "dep:plotters" ];
          "tabbycat" = [ "dep:tabbycat" ];
        };
      };
      "hash32 0.2.1" = rec {
        crateName = "hash32";
        version = "0.2.1";
        edition = "2015";
        description = "32-bit hashing machinery";
        sha256 = "0rrbv5pc5b1vax6j6hk7zvlrpw0h6aybshxy9vbpgsrgfrc5zhxh";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];

      };
      "hash32 0.3.1" = rec {
        crateName = "hash32";
        version = "0.3.1";
        edition = "2015";
        description = "32-bit hashing algorithms";
        sha256 = "01h68z8qi5gl9lnr17nz10lay8wjiidyjdyd60kqx8ibj090pmj7";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
        ];

      };
      "hashbrown 0.12.3" = rec {
        crateName = "hashbrown";
        version = "0.12.3";
        edition = "2021";
        description = "A Rust port of Google's SwissTable hash map";
        sha256 = "1268ka4750pyg2pbgsr43f0289l5zah4arir2k4igx5a8c6fg7la";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "ahash-compile-time-rng" = [ "ahash/compile-time-rng" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "raw" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        description = "A Rust port of Google's SwissTable hash map";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "allocator-api2" "default" "inline-more" "serde" ];
      };
      "hashbrown 0.15.4" = rec {
        crateName = "hashbrown";
        version = "0.15.4";
        edition = "2021";
        description = "A Rust port of Google's SwissTable hash map";
        sha256 = "1mg045sm1nm00cwjm7ndi80hcmmv1v3z7gnapxyhd9qxc62sqwar";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "equivalent";
            packageId = "equivalent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "foldhash";
            packageId = "foldhash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "allocator-api2" "default" "default-hasher" "equivalent" "inline-more" "raw-entry" "serde" ];
      };
      "headers" = rec {
        crateName = "headers";
        version = "0.4.1";
        edition = "2018";
        description = "typed HTTP headers";
        sha256 = "1sr4zygaq1b2f0k7b5l8vx5vp05wvd82w7vpavgvr52xvdd4scdk";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "headers-core";
            packageId = "headers-core";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httpdate";
            packageId = "httpdate";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "sha1";
            packageId = "sha1";
          }
        ];
        features = {
        };
      };
      "headers-core" = rec {
        crateName = "headers-core";
        version = "0.3.0";
        edition = "2015";
        description = "typed HTTP headers core trait";
        sha256 = "1r1w80i2bhmyh8s5mjr2dz6baqlrm6cak6yvzm4jq96lacjs5d2l";
        libName = "headers_core";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "http";
            packageId = "http";
          }
        ];

      };
      "heapless 0.7.17" = rec {
        crateName = "heapless";
        version = "0.7.17";
        edition = "2018";
        description = "`static` friendly data structures that don't require dynamic memory allocation";
        sha256 = "0kwn2wzk9fnsqnwp6rqjqhvh6hfq4rh225xwqjm72b5n1ry4bind";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = { target, features }: ("avr" == target."arch" or null);
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (target.name == "riscv32i-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (target.name == "riscv32imc-unknown-none-elf");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            optional = true;
            target = { target, features }: (target.name == "thumbv6m-none-eabi");
          }
          {
            name = "atomic-polyfill";
            packageId = "atomic-polyfill";
            target = { target, features }: (target.name == "xtensa-esp32s2-none-elf");
          }
          {
            name = "hash32";
            packageId = "hash32 0.2.1";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "spin";
            packageId = "spin";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:atomic-polyfill" ];
          "cas" = [ "atomic-polyfill" ];
          "default" = [ "cas" ];
          "defmt" = [ "dep:defmt" ];
          "defmt-impl" = [ "defmt" ];
          "serde" = [ "dep:serde" ];
          "ufmt-impl" = [ "ufmt-write" ];
          "ufmt-write" = [ "dep:ufmt-write" ];
        };
        resolvedDefaultFeatures = [ "atomic-polyfill" "cas" "serde" ];
      };
      "heapless 0.8.0" = rec {
        crateName = "heapless";
        version = "0.8.0";
        edition = "2021";
        description = "`static` friendly data structures that don't require dynamic memory allocation";
        sha256 = "1b9zpdjv4qkl2511s2c80fz16fx9in4m9qkhbaa8j73032v9xyqb";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
          "Per Lindgren <per.lindgren@ltu.se>"
          "Emil Fresk <emil.fresk@gmail.com>"
        ];
        dependencies = [
          {
            name = "hash32";
            packageId = "hash32 0.3.1";
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "defmt-03" = [ "dep:defmt" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable-atomic-critical-section" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/critical-section" ];
          "portable-atomic-unsafe-assume-single-core" = [ "dep:portable-atomic" "portable-atomic" "portable-atomic?/unsafe-assume-single-core" ];
          "serde" = [ "dep:serde" ];
          "ufmt" = [ "dep:ufmt-write" ];
        };
      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        description = "heck is a case conversion library.";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        description = "heck is a case conversion library.";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi" = rec {
        crateName = "hermit-abi";
        version = "0.5.2";
        edition = "2021";
        description = "Hermit system calls definitions.";
        sha256 = "1744vaqkczpwncfy960j2hxrbjl1q01csm84jpd9dajbdr2yy3zw";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        description = "Encoding and decoding data into/from hexadecimal representation.";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "serde" "std" ];
      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        description = "Generic implementation of Hash-based Message Authentication Code (HMAC)";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "reset" ];
      };
      "http" = rec {
        crateName = "http";
        version = "1.3.1";
        edition = "2018";
        description = "A set of types for representing HTTP requests and responses.
";
        sha256 = "0r95i5h7dr1xadp1ac9453w0s62s27hzkam356nyx2d9mqqmva7l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        description = "Trait representing an asynchronous, streaming, HTTP request or response body.
";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.3";
        edition = "2018";
        description = "Combinators and adapters for HTTP request or response bodies.
";
        sha256 = "0jm6jv4gxsnlsi1kzdyffjrj8cfr3zninnxpw73mvkxy4qzdj8dh";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "channel" = [ "dep:tokio" ];
          "full" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.10.1";
        edition = "2018";
        description = "A tiny, safe, speedy, zero-copy HTTP/1.x parser.";
        sha256 = "11ycd554bw2dkgw0q61xsa7a4jn1wb1xbfacmf3dbwsikvkkvgvd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "httpdate" = rec {
        crateName = "httpdate";
        version = "1.0.3";
        edition = "2021";
        description = "HTTP date parsing and formatting";
        sha256 = "1aa9rd2sac0zhjqh24c9xvir96g188zldkx0hr6dnnlx5904cfyz";
        authors = [
          "Pyfisch <pyfisch@posteo.org>"
        ];

      };
      "hyper" = rec {
        crateName = "hyper";
        version = "1.6.0";
        edition = "2021";
        description = "A protective and efficient HTTP library for all.";
        sha256 = "103ggny2k31z0iq2gzwk2vbx601wx6xkpjpxn40hr3p3b0b5fayc";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "httpdate";
            packageId = "httpdate";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "const_generics" "const_new" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "client" = [ "dep:want" "dep:pin-project-lite" "dep:smallvec" ];
          "ffi" = [ "dep:http-body-util" "futures-util?/alloc" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "http1" = [ "dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa" ];
          "http2" = [ "dep:futures-channel" "dep:futures-util" "dep:h2" ];
          "server" = [ "dep:httpdate" "dep:pin-project-lite" "dep:smallvec" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http1" "http2" "server" ];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.27.7";
        edition = "2021";
        description = "Rustls+hyper integration for pure rust HTTPS";
        sha256 = "0n6g8998szbzhnvcs1b7ibn745grxiqmlpg53xz206v826v3xjg3";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "aws-lc-rs" ];
          "fips" = [ "aws-lc-rs" "rustls/fips" ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "http1" "http2" "ring" "tls12" "webpki-roots" "webpki-tokio" ];
      };
      "hyper-timeout" = rec {
        crateName = "hyper-timeout";
        version = "0.5.2";
        edition = "2018";
        description = "A connect, read and write timeout aware connector to be used with hyper Client.";
        sha256 = "1c431l5ckr698248yd6bnsmizjy2m1da02cbpmsnmkpvpxkdb41b";
        libName = "hyper_timeout";
        authors = [
          "Herman J. Radtke III <herman@hermanradtke.com>"
        ];
        dependencies = [
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "http1" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "http1" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "http1" "server" "server-graceful" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "io-util" "macros" ];
          }
        ];

      };
      "hyper-tls" = rec {
        crateName = "hyper-tls";
        version = "0.6.0";
        edition = "2018";
        description = "Default TLS implementation for use with hyper";
        sha256 = "1q36x2yps6hhvxq5r7mc8ph9zz6xlb573gx0x3yskb0fi736y83h";
        libName = "hyper_tls";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "http1" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "io-util" ];
          }
        ];
        features = {
          "alpn" = [ "native-tls/alpn" ];
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.15";
        edition = "2021";
        description = "hyper utilities";
        sha256 = "1pyi2h8idwyadljs95gpihjvkfkmcxi5vn7s882vy0kg9jyxarkz";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "system-configuration";
            packageId = "system-configuration";
            optional = true;
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-registry";
            packageId = "windows-registry";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" "signal" ];
          }
        ];
        features = {
          "client" = [ "hyper/client" "dep:tracing" "dep:futures-channel" "dep:tower-service" ];
          "client-legacy" = [ "client" "dep:socket2" "tokio/sync" "dep:libc" "dep:futures-util" ];
          "client-proxy" = [ "client" "dep:base64" "dep:ipnet" "dep:percent-encoding" ];
          "client-proxy-system" = [ "dep:system-configuration" "dep:windows-registry" ];
          "full" = [ "client" "client-legacy" "client-proxy" "client-proxy-system" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" "tracing" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [ "server" "http1" "http2" ];
          "server-graceful" = [ "server" "tokio/sync" ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [ "dep:tokio" "tokio/net" "tokio/rt" "tokio/time" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "client-legacy" "client-proxy" "client-proxy-system" "default" "http1" "http2" "server" "server-auto" "service" "tokio" ];
      };
      "iana-time-zone" = rec {
        crateName = "iana-time-zone";
        version = "0.1.63";
        edition = "2021";
        description = "get the IANA time zone for the current system";
        sha256 = "1n171f5lbc7bryzmp1h30zw86zbvl5480aq02z92lcdwvvjikjdh";
        libName = "iana_time_zone";
        authors = [
          "Andrew Straw <strawman@astraw.com>"
          "René Kijewski <rene.kijewski@fu-berlin.de>"
          "Ryan Lopopolo <rjl@hyperbo.la>"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "iana-time-zone-haiku";
            packageId = "iana-time-zone-haiku";
            target = { target, features }: ("haiku" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
          }
          {
            name = "windows-core";
            packageId = "windows-core 0.61.2";
            target = { target, features }: ("windows" == target."os" or null);
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "fallback" ];
      };
      "iana-time-zone-haiku" = rec {
        crateName = "iana-time-zone-haiku";
        version = "0.1.2";
        edition = "2018";
        description = "iana-time-zone support crate for Haiku OS";
        sha256 = "17r6jmj31chn7xs9698r122mapq85mfnv98bb4pg6spm0si2f67k";
        libName = "iana_time_zone_haiku";
        authors = [
          "René Kijewski <crates.io@k6i.de>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "2.0.0";
        edition = "2021";
        description = "Collection of API for use in ICU libraries.";
        sha256 = "0izfgypv1hsxlz1h8fc2aak641iyvkak16aaz5b4aqg3s3sp4010";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" ];
          "databake" = [ "dep:databake" "zerovec/databake" ];
          "serde" = [ "dep:serde" "zerovec/serde" "potential_utf/serde" "alloc" ];
        };
      };
      "icu_locale_core" = rec {
        crateName = "icu_locale_core";
        version = "2.0.0";
        edition = "2021";
        description = "API for managing Unicode Language and Locale Identifiers";
        sha256 = "02phv7vwhyx6vmaqgwkh2p4kc2kciykv2px6g4h8glxfrh02gphc";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "alloc" ];
          "serde" = [ "dep:serde" "tinystr/serde" "alloc" ];
          "zerovec" = [ "dep:zerovec" "tinystr/zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "2.0.0";
        edition = "2021";
        description = "API for normalizing text into Unicode Normalization Forms";
        sha256 = "0ybrnfnxx4sf09gsrxri8p48qifn54il6n3dq2xxgx4dw7l80s23";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "dep:icu_normalizer_data" "icu_properties?/compiled_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "icu_properties" "icu_collections/databake" "zerovec/databake" "icu_properties?/datagen" "icu_provider/export" ];
          "default" = [ "compiled_data" "utf8_iter" "utf16_iter" ];
          "icu_properties" = [ "dep:icu_properties" ];
          "serde" = [ "dep:serde" "icu_collections/serde" "zerovec/serde" "icu_properties?/serde" "icu_provider/serde" ];
          "utf16_iter" = [ "dep:utf16_iter" "write16" ];
          "utf8_iter" = [ "dep:utf8_iter" ];
          "write16" = [ "dep:write16" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "2.0.0";
        edition = "2021";
        description = "Data for the icu_normalizer crate";
        sha256 = "1lvjpzxndyhhjyzd1f6vi961gvzhj244nribfpdqxjdgjdl0s880";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "2.0.1";
        edition = "2021";
        description = "Definitions for Unicode properties";
        sha256 = "0az349pjg8f18lrjbdmxcpg676a7iz2ibc09d2wfz57b3sf62v01";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = [ "yoke" "zerofrom" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" "icu_collections/alloc" ];
          "compiled_data" = [ "dep:icu_properties_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "potential_utf/databake" "zerovec/databake" "icu_collections/databake" "icu_locale_core/databake" "zerotrie/databake" "icu_provider/export" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "icu_locale_core/serde" "potential_utf/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" "zerotrie/serde" ];
          "unicode_bidi" = [ "dep:unicode-bidi" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "2.0.1";
        edition = "2021";
        description = "Data for the icu_properties crate";
        sha256 = "0cnn3fkq6k88w7p86w7hsd1254s4sl783rpz4p6hlccq74a5k119";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "2.0.0";
        edition = "2021";
        description = "Trait and struct definitions for the ICU data provider";
        sha256 = "1bz5v02gxv1i06yhdhs2kbwxkw3ny9r2vvj9j288fhazgfi0vj03";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "icu_locale_core/alloc" "zerovec/alloc" "zerotrie/alloc" ];
          "baked" = [ "zerotrie" ];
          "deserialize_bincode_1" = [ "serde" "dep:bincode" "std" ];
          "deserialize_json" = [ "serde" "dep:serde_json" ];
          "deserialize_postcard_1" = [ "serde" "dep:postcard" ];
          "export" = [ "serde" "dep:erased-serde" "dep:databake" "std" "sync" "dep:postcard" "zerovec/databake" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" "yoke/serde" ];
          "std" = [ "alloc" ];
          "zerotrie" = [ "dep:zerotrie" ];
        };
        resolvedDefaultFeatures = [ "baked" "zerotrie" ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        description = "Utility for applying case rules to Rust identifiers.";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        description = "IDNA (Internationalizing Domain Names in Applications) and Punycode.";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = [ "idna_adapter/compiled_data" ];
          "default" = [ "std" "compiled_data" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "compiled_data" "std" ];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.1";
        edition = "2021";
        description = "Back end adapter for idna";
        sha256 = "0i0339pxig6mv786nkqcxnwqa87v4m94b2653f6k3aj0jmhfkjis";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "icu_normalizer/compiled_data" "icu_properties/compiled_data" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "impl-trait-for-tuples" = rec {
        crateName = "impl-trait-for-tuples";
        version = "0.2.3";
        edition = "2021";
        description = "Attribute macro to implement a trait for tuples
";
        sha256 = "1nagmq8p805hlg04zqknjd9sjp8h5d5n1r2gk304iy5b8crmmsx0";
        procMacro = true;
        libName = "impl_trait_for_tuples";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "visit" "fold" "extra-traits" ];
          }
        ];

      };
      "indenter" = rec {
        crateName = "indenter";
        version = "0.3.3";
        edition = "2018";
        description = "A formatter wrapper that indents the text, designed for error display impls
";
        sha256 = "10y6i6y4ls7xsfsc1r3p5j2hhbxhaqnk5zzk8aj52b14v05ba8yf";
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "indexmap 1.9.3" = rec {
        crateName = "indexmap";
        version = "1.9.3";
        edition = "2021";
        description = "A hash table with consistent order and fast iteration.";
        sha256 = "16dxmy7yvk51wvnih3a3im6fp5lmx0wx76i03n06wyak6cwhw1xx";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.12.3";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
          "serde-1" = [ "serde" ];
        };
      };
      "indexmap 2.10.0" = rec {
        crateName = "indexmap";
        version = "2.10.0";
        edition = "2021";
        description = "A hash table with consistent order and fast iteration.";
        sha256 = "0qd6g26gxzl6dbf132w48fa8rr95glly3jhbk90i29726d9xhk7y";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "indicatif" = rec {
        crateName = "indicatif";
        version = "0.17.11";
        edition = "2021";
        description = "A progress bar and cli reporting library for Rust";
        sha256 = "0db2b2r79r9x8x4lysq1ci9xm13c0xg0sqn3z960yh2bk2430fqq";
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
            features = [ "ansi-parsing" ];
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "default" = [ "unicode-width" "console/unicode-width" ];
          "futures" = [ "dep:futures-core" ];
          "improved_unicode" = [ "unicode-segmentation" "unicode-width" "console/unicode-width" ];
          "in_memory" = [ "vt100" ];
          "rayon" = [ "dep:rayon" ];
          "tokio" = [ "dep:tokio" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "vt100" = [ "dep:vt100" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode-width" ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        description = "Unmaintained, consider using web-time instead - A partial replacement for std::time::Instant that works on WASM to.";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [ "js-sys" "wasm-bindgen_rs" "web-sys" ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "io-uring" = rec {
        crateName = "io-uring";
        version = "0.7.8";
        edition = "2021";
        description = "The low-level `io_uring` userspace interface for Rust";
        sha256 = "04whnj5a4pml44jhsmmf4p87bpgr7swkcijx4yjcng8900pj0vmq";
        libName = "io_uring";
        authors = [
          "quininer <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "direct-syscall" = [ "sc" ];
          "overwrite" = [ "bindgen" ];
          "sc" = [ "dep:sc" ];
        };
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.11.0";
        edition = "2018";
        description = "Provides types and useful methods for working with IPv4 and IPv6 network addresses, commonly called IP prefixes. The new `IpNet`, `Ipv4Net`, and `Ipv6Net` types build on the existing `IpAddr`, `Ipv4Addr`, and `Ipv6Addr` types already provided in Rust's standard library and align to their design to stay consistent. The module also provides useful traits that extend `Ipv4Addr` and `Ipv6Addr` with methods for `Add`, `Sub`, `BitAnd`, and `BitOr` operations. The module only uses stable feature so it is guaranteed to compile using the stable toolchain.";
        sha256 = "0c5i9sfi2asai28m8xp48k5gvwkqrg5ffpi767py6mzsrswv17s6";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [ "serde" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "iri-string" = rec {
        crateName = "iri-string";
        version = "0.7.8";
        edition = "2021";
        description = "IRI as string types";
        sha256 = "1cl0wfq97wq4s1p4dl0ix5cfgsc5fn7l22ljgw9ab9x1qglypifv";
        libName = "iri_string";
        authors = [
          "YOSHIOKA Takuma <nop_thread@nops.red>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "memchr" = [ "dep:memchr" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        description = "Polyfill for `is_terminal` stdlib feature for use with older MSRVs";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        description = "Extra iterator adaptors, iterator methods, free functions, and macros.";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        description = "Extra iterator adaptors, iterator methods, free functions, and macros.";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        description = "Extra iterator adaptors, iterator methods, free functions, and macros.";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itertools 0.14.0" = rec {
        crateName = "itertools";
        version = "0.14.0";
        edition = "2018";
        description = "Extra iterator adaptors, iterator methods, free functions, and macros.";
        sha256 = "118j6l1vs2mx65dqhwyssbrxpawa90886m3mzafdvyip41w2q69b";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        description = "Fast integer primitive to string conversion";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.77";
        edition = "2021";
        description = "Bindings for all JS global objects and functions in all JS environments like
Node.js and browsers, built on `#[wasm_bindgen]` using the `wasm-bindgen` crate.
";
        sha256 = "13x2qcky5l22z4xgivi59xhjjx4kxir1zg7gcj0f1ijzd4yg7yhw";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "jubjub" = rec {
        crateName = "jubjub";
        version = "0.9.0";
        edition = "2021";
        description = "Implementation of the Jubjub elliptic curve group";
        sha256 = "03vvs9l22ni2zlllb59b0dcnbi6gmkv4yrh55ddwvqazk1gxyxd5";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Eirik Ogilvie-Wigley <eowigley@gmail.com>"
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitvec";
            packageId = "bitvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bls12_381";
            packageId = "bls12_381";
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "ff/alloc" "group/alloc" ];
          "bits" = [ "ff/bits" ];
          "default" = [ "alloc" "bits" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "default" ];
      };
      "k256" = rec {
        crateName = "k256";
        version = "0.13.4";
        edition = "2021";
        description = "secp256k1 elliptic curve library written in pure Rust with support for ECDSA
signing/verification/public-key recovery, Taproot Schnorr signatures (BIP340),
Elliptic Curve Diffie-Hellman (ECDH), and general-purpose secp256k1 elliptic
curve group operations which can be used to implement arbitrary protocols
";
        sha256 = "06s1lxjp49zgmbxnfdy2kajyklbkl4s3jvdvy0amg552padr3qzn";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "signature";
            packageId = "signature";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "critical-section" = [ "once_cell/critical-section" "precomputed-tables" ];
          "default" = [ "arithmetic" "ecdsa" "pkcs8" "precomputed-tables" "schnorr" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "hex-literal" = [ "dep:hex-literal" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "once_cell" = [ "dep:once_cell" ];
          "pem" = [ "ecdsa-core/pem" "elliptic-curve/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core/pkcs8" "elliptic-curve/pkcs8" ];
          "precomputed-tables" = [ "arithmetic" "once_cell" ];
          "schnorr" = [ "arithmetic" "sha256" "signature" ];
          "serde" = [ "ecdsa-core/serde" "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "signature" = [ "dep:signature" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" "once_cell?/std" ];
          "test-vectors" = [ "hex-literal" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "expose-field" "once_cell" "pkcs8" "precomputed-tables" "schnorr" "serde" "serdect" "sha2" "sha256" "signature" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        description = "Pure Rust implementation of the Keccak sponge function including the keccak-f
and keccak-p variants
";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        description = "A macro for declaring lazily evaluated statics in Rust.";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        dependencies = [
          {
            name = "spin";
            packageId = "spin";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "once" ];
          }
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
        resolvedDefaultFeatures = [ "spin" "spin_no_std" ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.174";
        edition = "2021";
        description = "Raw FFI bindings to platform libraries like libc.";
        sha256 = "0xl7pqvw7g2874dy3kjady2fjr4rhj5lxsnxkkhr5689jcr6jw8i";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libloading" = rec {
        crateName = "libloading";
        version = "0.8.8";
        edition = "2015";
        description = "Bindings around the platform's dynamic library loading primitives with greatly improved memory safety.";
        sha256 = "0rw6q94psj3d6k0bi9nymqhyrz78lbdblryphhaszsw9p9ikj0q7";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.53.2";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libm" = rec {
        crateName = "libm";
        version = "0.2.15";
        edition = "2021";
        description = "libm in pure Rust";
        sha256 = "1plpzf0p829viazdj57yw5dhmlr8ywf3apayxc2f2bq5a6mvryzr";
        authors = [
          "Jorge Aparicio <jorge@japaric.io>"
        ];
        features = {
          "default" = [ "arch" ];
          "unstable" = [ "unstable-intrinsics" "unstable-float" ];
        };
        resolvedDefaultFeatures = [ "arch" "default" ];
      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.1.4";
        edition = "2021";
        description = "Redox stable ABI";
        sha256 = "0f06ikfym363zrqy9llp4asgcbakz0aiq0ds0rkljdg52088100m";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "call" "std" "redox_syscall" ];
          "ioslice" = [ "dep:ioslice" ];
          "mkns" = [ "ioslice" ];
          "redox_syscall" = [ "dep:redox_syscall" ];
        };
        resolvedDefaultFeatures = [ "call" "std" ];
      };
      "linux-raw-sys" = rec {
        crateName = "linux-raw-sys";
        version = "0.9.4";
        edition = "2021";
        description = "Generated bindings for Linux's userspace API";
        sha256 = "04kyjdrq79lz9ibrf7czk6cv9d3jl597pb9738vzbsbzy1j5i56d";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" "general" "errno" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "no_std" ];
        };
        resolvedDefaultFeatures = [ "elf" "errno" "general" "ioctl" "no_std" ];
      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.8.0";
        edition = "2021";
        description = "A key-value Map implementation based on a flat, sorted Vec.";
        sha256 = "0mlrlskwwhirxk3wsz9psh6nxcy491n0dh8zl02qgj0jzpssw7i4";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.13";
        edition = "2021";
        description = "Wrappers to create fully-featured Mutex and RwLock types. Compatible with no_std.";
        sha256 = "0rd73p4299mjwl4hhlfj9qr88v3r0kc8s1nszkfmnq2ky43nb4wn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        description = "A lightweight logging facade for Rust
";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lru 0.12.5" = rec {
        crateName = "lru";
        version = "0.12.5";
        edition = "2015";
        description = "A LRU cache implementation";
        sha256 = "0f1a7cgqxbyhrmgaqqa11m3azwhcc36w0v5r4izgbhadl3sg8k13";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru 0.14.0" = rec {
        crateName = "lru";
        version = "0.14.0";
        edition = "2015";
        description = "A LRU cache implementation";
        sha256 = "160ivb75982rdarpals1d9cxcfjlixl7kwx6k7ghpwamc48cg34z";
        authors = [
          "Jerome Froelich <jeromefroelic@hotmail.com>"
        ];
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            optional = true;
          }
        ];
        features = {
          "default" = [ "hashbrown" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "nightly" = [ "hashbrown" "hashbrown/nightly" ];
        };
        resolvedDefaultFeatures = [ "default" "hashbrown" ];
      };
      "lru-slab" = rec {
        crateName = "lru-slab";
        version = "0.1.2";
        edition = "2021";
        description = "Pre-allocated storage with constant-time LRU tracking";
        sha256 = "0m2139k466qj3bnpk66bwivgcx3z88qkxvlzk70vd65jq373jaqi";
        libName = "lru_slab";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
        ];

      };
      "macro-string" = rec {
        crateName = "macro-string";
        version = "0.1.4";
        edition = "2021";
        description = "Eager evaluation of macros like `concat!` and `env!`";
        sha256 = "1qq42babqlm25823idy2h7q1q8lzx5k6s2bv73ww6pn6hr0869qv";
        libName = "macro_string";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "printing" "proc-macro" ];
          }
        ];

      };
      "matchers" = rec {
        crateName = "matchers";
        version = "0.1.0";
        edition = "2018";
        description = "Regex matching on character and byte streams.
";
        sha256 = "0n2mbk7lg2vf962c8xwzdq96yrc9i0p8dbmm4wa1nnkcp1dhfqw2";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "regex-automata";
            packageId = "regex-automata 0.1.10";
          }
        ];

      };
      "matchit" = rec {
        crateName = "matchit";
        version = "0.7.3";
        edition = "2021";
        description = "A high performance, zero-copy URL router.";
        sha256 = "156bgdmmlv4crib31qhgg49nsjk88dxkdqp80ha2pk2rk6n6ax0f";
        authors = [
          "Ibraheem Ahmed <ibraheem@ibraheem.ca>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.5";
        edition = "2021";
        description = "Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for
1, 2 or 3 byte search and single substring search.
";
        sha256 = "1h2bh2jajkizz04fh047lpid5wgw2cr9igpkdhl3ibzscpd858ij";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memuse" = rec {
        crateName = "memuse";
        version = "0.2.2";
        edition = "2018";
        description = "Traits for measuring dynamic memory usage of types";
        sha256 = "0r692y5lwz0hqp604plsghh3d83zw76k16a6rbw8iw5l7vsbp5rx";
        authors = [
          "Jack Grigg <thestr4d@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "nonempty" = [ "dep:nonempty" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "mime" = rec {
        crateName = "mime";
        version = "0.3.17";
        edition = "2015";
        description = "Strongly Typed Mimes";
        sha256 = "16hkibgvb9klh0w0jk5crr5xv90l3wlf77ggymzjmvl1818vnxv8";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        description = "Fast float parsing conversion routines.";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.9";
        edition = "2021";
        description = "DEFLATE compression and decompression library rewritten in Rust based on miniz";
        sha256 = "05k3pdg8bjjzayq3rf0qhpirq9k37pxnasfn4arbs17phqn6m9qz";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "adler2/rustc-dep-of-std" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "1.0.4";
        edition = "2021";
        description = "Lightweight non-blocking I/O.";
        sha256 = "073n3kam3nz8j8had35fd2nn7j6a33pi3y5w3kq608cari2d9gkq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "msgpacker" = rec {
        crateName = "msgpacker";
        version = "0.4.8";
        edition = "2021";
        description = "MessagePack protocol implementation for Rust.";
        sha256 = "1cr057qr7690xbrzyhqk9vpqw8nyxf5cwi3kfsf4w0vd7bn74jhk";
        authors = [
          "Victor Lopez <victor@codx.io>"
        ];
        dependencies = [
          {
            name = "msgpacker-derive";
            packageId = "msgpacker-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "derive" ];
          "derive" = [ "msgpacker-derive" ];
          "msgpacker-derive" = [ "dep:msgpacker-derive" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "msgpacker-derive" "std" ];
      };
      "msgpacker-derive" = rec {
        crateName = "msgpacker-derive";
        version = "0.3.1";
        edition = "2021";
        description = "Derive macros for the MessagePack protocol implementation for Rust.";
        sha256 = "0nkvymzhwq8vjxbj686dzm5gy74axrhsnrq628c615qdmjjyq9p9";
        procMacro = true;
        libName = "msgpacker_derive";
        authors = [
          "Victor Lopez <victor@codx.io>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "multer" = rec {
        crateName = "multer";
        version = "3.1.0";
        edition = "2018";
        description = "An async parser for `multipart/form-data` content-type in Rust.";
        sha256 = "0jr2snfay5fjz50yvdja4vbnddlj1iriiqjym88pbj3daiv7gs43";
        authors = [
          "Rousan Ali <hello@rousan.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "httparse";
            packageId = "httparse";
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "spin";
            packageId = "spin";
            usesDefaultFeatures = false;
            features = [ "spin_mutex" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "all" = [ "json" ];
          "json" = [ "serde" "serde_json" ];
          "log" = [ "dep:log" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-io" = [ "tokio" "tokio-util" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "tokio" ];
      };
      "nanorand" = rec {
        crateName = "nanorand";
        version = "0.7.0";
        edition = "2021";
        description = "A tiny, fast, zero-dep library for random number generation.";
        sha256 = "1hr60b8zlfy7mxjcwx2wfmhpkx7vfr3v9x12shmv1c10b0y32lba";
        authors = [
          "Lucy <lucy@absolucy.moe>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
            features = [ "rdrand" "js" ];
          }
        ];
        features = {
          "default" = [ "std" "tls" "wyrand" "pcg64" "chacha" ];
          "getrandom" = [ "dep:getrandom" ];
          "rdseed" = [ "std" ];
          "std" = [ "alloc" ];
          "tls" = [ "std" "wyrand" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "chacha" "default" "getrandom" "pcg64" "std" "tls" "wyrand" ];
      };
      "native-tls" = rec {
        crateName = "native-tls";
        version = "0.2.14";
        edition = "2015";
        description = "A wrapper over a platform's native TLS implementation";
        sha256 = "03hga800x8bzkp8h7frnm7yp545dwwawgmaq673vx7byk1139pl7";
        libName = "native_tls";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            target = { target, features }: (!(("windows" == target."os" or null) || ("apple" == target."vendor" or null)));
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "security-framework";
            packageId = "security-framework 2.11.1";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "tempfile";
            packageId = "tempfile";
          }
        ];
        features = {
          "alpn" = [ "security-framework/alpn" ];
          "vendored" = [ "openssl/vendored" ];
        };
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.30.1";
        edition = "2021";
        description = "Rust friendly bindings to *nix APIs";
        sha256 = "1dixahq9hk191g0c2ydc0h1ppxj0xw536y6rl63vlnp06lx3ylkl";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "event" = [ "poll" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "default" "feature" "fs" "process" "signal" "user" ];
      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        description = "An implementation of `std::hash::Hasher` which does not hash at all.";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        libName = "nohash_hasher";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        description = "A byte-oriented, zero-copy, parser combinators library";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "ntapi" = rec {
        crateName = "ntapi";
        version = "0.4.1";
        edition = "2018";
        description = "FFI bindings for Native API";
        sha256 = "1r38zhbwdvkis2mzs6671cm1p6djgsl49i7bwxzrvhwicdf8k8z8";
        authors = [
          "MSxDOS <melcodos@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [ "cfg" "evntrace" "in6addr" "inaddr" "minwinbase" "ntsecapi" "windef" "winioctl" ];
          }
        ];
        features = {
          "default" = [ "user" ];
          "impl-default" = [ "winapi/impl-default" ];
        };
        resolvedDefaultFeatures = [ "default" "user" ];
      };
      "nu-ansi-term" = rec {
        crateName = "nu-ansi-term";
        version = "0.46.0";
        edition = "2018";
        description = "Library for ANSI terminal colors and styles (bold, underline)";
        sha256 = "115sywxh53p190lyw97alm14nc004qj5jm5lvdj608z84rbida3p";
        libName = "nu_ansi_term";
        authors = [
          "ogham@bsago.me"
          "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>"
          "Josh Triplett <josh@joshtriplett.org>"
          "The Nushell Project Developers"
        ];
        dependencies = [
          {
            name = "overload";
            packageId = "overload";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "consoleapi" "errhandlingapi" "fileapi" "handleapi" "processenv" ];
          }
        ];
        features = {
          "derive_serde_style" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "num" = rec {
        crateName = "num";
        version = "0.4.3";
        edition = "2021";
        description = "A collection of numeric types and traits for Rust, including bigint,
complex, rational, range iterators, generic integers, and more!
";
        sha256 = "08yb2fc1psig7pkzaplm495yp7c30m4pykpkwmi5bxrgid705g9m";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "alloc" = [ "dep:num-bigint" "num-rational/num-bigint" ];
          "default" = [ "std" ];
          "libm" = [ "num-complex/libm" "num-traits/libm" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "dep:num-bigint" "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/num-bigint-std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "std" ];
      };
      "num-bigint 0.3.3" = rec {
        crateName = "num-bigint";
        version = "0.3.3";
        edition = "2018";
        description = "Big integer implementation for Rust";
        sha256 = "1hxjawydfbnxqyqza0n2sh5sk9rslm0wsn7xdh53dwnby8rphvsz";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-bigint 0.4.6" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        description = "Big integer implementation for Rust";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.4.6";
        edition = "2021";
        description = "Complex numbers implementation for Rust";
        sha256 = "15cla16mnw12xzf5g041nxbjjm9m85hdgadd5dl5d0b30w9qmy3k";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "bytecheck" = [ "dep:bytecheck" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "libm" = [ "num-traits/libm" ];
          "rand" = [ "dep:rand" ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        description = "`num_conv` is a crate to convert between integer types without using `as` casts. This provides
better certainty when refactoring, makes the exact behavior of code more explicit, and allows using
turbofish syntax.
";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        description = "Integer traits and functions";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        description = "External iterators for generic mathematics";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-modular" = rec {
        crateName = "num-modular";
        version = "0.6.1";
        edition = "2018";
        description = "Implementation of efficient integer division and modular arithmetic operations with generic number types.
Supports various backends including num-bigint, etc..
";
        sha256 = "0zv4miws3q1i93a0bd9wgc4njrr5j5786kr99hzxi9vgycdjdfqp";
        libName = "num_modular";
        features = {
          "num-bigint" = [ "dep:num-bigint" ];
          "num-integer" = [ "dep:num-integer" ];
          "num-traits" = [ "dep:num-traits" ];
        };
      };
      "num-order" = rec {
        crateName = "num-order";
        version = "1.2.0";
        edition = "2018";
        description = "Numerically consistent `Eq`, `Ord` and `Hash` implementations for various `num` types (`u32`, `f64`, `num_bigint::BigInt`, etc.)";
        sha256 = "1dhvdncf91ljxh9sawnfxcbiqj1gnag08lyias0cy3y4jxmmjysk";
        libName = "num_order";
        dependencies = [
          {
            name = "num-modular";
            packageId = "num-modular";
          }
        ];
        features = {
          "num-bigint" = [ "dep:num-bigint" "num-traits" ];
          "num-complex" = [ "dep:num-complex" ];
          "num-rational" = [ "dep:num-rational" "num-traits" ];
          "num-traits" = [ "dep:num-traits" ];
        };
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.4.2";
        edition = "2021";
        description = "Rational numbers implementation for Rust";
        sha256 = "093qndy02817vpgcqjnj139im3jl7vkq4h68kykdqqh577d18ggq";
        libName = "num_rational";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "num-bigint" "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "num-bigint-std" = [ "num-bigint/std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-bigint?/std" "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "num-bigint" "num-bigint-std" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        description = "Numeric traits for generic mathematics";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "libm" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.17.0";
        edition = "2015";
        description = "Get the number of CPUs on a machine.";
        sha256 = "0fxjazlng4z8cgbmsvbzv411wrg7x3hyxdq8nxixgzjswyylppwi";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.5.11";
        edition = "2018";
        description = "Procedural macros to make inter-operation between primitives and enums easier.";
        sha256 = "1japmqhcxwn1d3k7q8jw58y7xfby51s16nzd6dkj483cj2pnqr0z";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.5.11";
        edition = "2018";
        description = "Internal implementation details for ::num_enum (Procedural macros to make inter-operation between primitives and enums easier)";
        sha256 = "16f7r4jila0ckcgdnfgqyhhb90w9m2pdbwayyqmwcci0j6ygkgyw";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "number_prefix" = rec {
        crateName = "number_prefix";
        version = "0.4.0";
        edition = "2015";
        description = "Library for numeric prefixes (kilo, giga, kibi).";
        sha256 = "1wvh13wvlajqxkb1filsfzbrnq0vrmrw298v2j3sy82z1rm282w3";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "nybbles" = rec {
        crateName = "nybbles";
        version = "0.3.4";
        edition = "2021";
        description = "Efficient nibble-sized (4-bit) byte sequence data structure";
        sha256 = "01xk08vfpcsl6bzgya1c135spd89jrs3lk0cxqj8j97p9mivp0w9";
        authors = [
          "DaniPopes <57450786+DaniPopes@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "const-hex";
            packageId = "const-hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
            features = [ "const_new" "union" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" "dep:proptest" "smallvec/arbitrary" "std" ];
          "default" = [ "std" ];
          "nightly" = [ "smallvec/specialization" "smallvec/may_dangle" ];
          "rlp" = [ "dep:alloy-rlp" ];
          "serde" = [ "dep:serde" "smallvec/serde" ];
          "std" = [ "const-hex/std" "serde?/std" "alloy-rlp?/std" "proptest?/std" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        description = "A unified interface for reading and writing object file formats.";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        description = "Single assignment cells and lazy values.";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "once_cell_polyfill" = rec {
        crateName = "once_cell_polyfill";
        version = "1.70.1";
        edition = "2021";
        description = "Polyfill for `OnceCell` stdlib feature for use with older MSRVs";
        sha256 = "1bg0w99srq8h4mkl68l1mza2n2f2hvrg0n8vfa3izjr5nism32d4";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.73";
        edition = "2021";
        description = "OpenSSL bindings";
        sha256 = "1y7b3kanpgb92wiqhwbyqfsdr1xdjzssxqywl4cixay88r6p61c5";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "openssl-macros";
            packageId = "openssl-macros";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            rename = "ffi";
          }
        ];
        features = {
          "aws-lc" = [ "ffi/aws-lc" ];
          "bindgen" = [ "ffi/bindgen" ];
          "unstable_boringssl" = [ "ffi/unstable_boringssl" ];
          "vendored" = [ "ffi/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "openssl-macros" = rec {
        crateName = "openssl-macros";
        version = "0.1.1";
        edition = "2018";
        description = "Internal macros used by the openssl crate.";
        sha256 = "173xxvfc63rr5ybwqwylsir0vq6xsj4kxiv4hmg4c3vscdmncj59";
        procMacro = true;
        libName = "openssl_macros";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.6";
        edition = "2021";
        description = "Tool for helping to find SSL certificate locations on the system for OpenSSL
";
        sha256 = "0bl52x55laalqb707k009h8kfawliwp992rlsvkzy49n47p2fpnh";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.109";
        edition = "2021";
        description = "FFI bindings to OpenSSL";
        links = "openssl";
        sha256 = "0wc54dshsac1xicq6b5wz01p358zcbf542f2s6vph3b38wp6w2ch";
        build = "build/main.rs";
        libName = "openssl_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "aws-lc" = [ "dep:aws-lc-sys" ];
          "bindgen" = [ "dep:bindgen" ];
          "bssl-sys" = [ "dep:bssl-sys" ];
          "openssl-src" = [ "dep:openssl-src" ];
          "unstable_boringssl" = [ "bssl-sys" ];
          "vendored" = [ "openssl-src" ];
        };
      };
      "option-ext" = rec {
        crateName = "option-ext";
        version = "0.2.0";
        edition = "2015";
        description = "Extends `Option` with additional operations";
        sha256 = "0zbf7cx8ib99frnlanpyikm1bx8qn8x602sw1n7bg6p9x94lyx04";
        libName = "option_ext";
        authors = [
          "Simon Ochsenreither <simon@ochsenreither.de>"
        ];

      };
      "overload" = rec {
        crateName = "overload";
        version = "0.1.1";
        edition = "2018";
        description = "Provides a macro to simplify operator overloading.";
        sha256 = "0fdgbaqwknillagy1xq7xfgv60qdbk010diwl7s1p0qx7hb16n5i";
        authors = [
          "Daniel Salvadori <danaugrs@gmail.com>"
        ];

      };
      "p256" = rec {
        crateName = "p256";
        version = "0.13.2";
        edition = "2021";
        description = "Pure Rust implementation of the NIST P-256 (a.k.a. secp256r1, prime256v1)
elliptic curve as defined in SP 800-186, with support for ECDH, ECDSA
signing/verification, and general purpose curve arithmetic
";
        sha256 = "0jyd3c3k239ybs59ixpnl7dqkmm072fr1js8kh7ldx58bzc3m1n9";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "der" ];
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "hazmat" "sec1" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            optional = true;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "ecdsa";
            packageId = "ecdsa";
            rename = "ecdsa-core";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
          {
            name = "primeorder";
            packageId = "primeorder";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "ecdsa-core?/alloc" "elliptic-curve/alloc" ];
          "arithmetic" = [ "dep:primeorder" "elliptic-curve/arithmetic" ];
          "bits" = [ "arithmetic" "elliptic-curve/bits" ];
          "default" = [ "arithmetic" "ecdsa" "pem" "std" ];
          "digest" = [ "ecdsa-core/digest" "ecdsa-core/hazmat" ];
          "ecdh" = [ "arithmetic" "elliptic-curve/ecdh" ];
          "ecdsa" = [ "arithmetic" "ecdsa-core/signing" "ecdsa-core/verifying" "sha256" ];
          "ecdsa-core" = [ "dep:ecdsa-core" ];
          "expose-field" = [ "arithmetic" ];
          "hash2curve" = [ "arithmetic" "elliptic-curve/hash2curve" ];
          "jwk" = [ "elliptic-curve/jwk" ];
          "pem" = [ "elliptic-curve/pem" "ecdsa-core/pem" "pkcs8" ];
          "pkcs8" = [ "ecdsa-core?/pkcs8" "elliptic-curve/pkcs8" ];
          "serde" = [ "ecdsa-core?/serde" "elliptic-curve/serde" "primeorder?/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "sha2" = [ "dep:sha2" ];
          "sha256" = [ "digest" "sha2" ];
          "std" = [ "alloc" "ecdsa-core?/std" "elliptic-curve/std" ];
          "test-vectors" = [ "dep:hex-literal" ];
          "voprf" = [ "elliptic-curve/voprf" "sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc" "arithmetic" "default" "digest" "ecdsa" "ecdsa-core" "expose-field" "pem" "pkcs8" "sha2" "sha256" "std" ];
      };
      "p3-air" = rec {
        crateName = "p3-air";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "05b6c0sbkrm206bpxn7pkzck30pw07cq34g64s3gl72b5i2rfnnh";
        libName = "p3_air";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
        ];

      };
      "p3-baby-bear" = rec {
        crateName = "p3-baby-bear";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "1s101283jv2iv8d5qj4qjmr18960dv8bmvjcpkvz9pdjra7868bm";
        libName = "p3_baby_bear";
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-mds";
            packageId = "p3-mds";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "min_const_gen" ];
          }
        ];
        features = {
        };
      };
      "p3-bn254-fr" = rec {
        crateName = "p3-bn254-fr";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0m6s4gblpvdk7jwqlq2lpshq3mrzygywb7yhic4q6ir5bl4lvpf0";
        libName = "p3_bn254_fr";
        dependencies = [
          {
            name = "ff";
            packageId = "ff 0.13.1";
            features = [ "derive" "derive_bits" ];
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "p3-challenger" = rec {
        crateName = "p3-challenger";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0409naqjy4634jcqcydjwdg7smfcysihy1wimks7f0by7ci8rlf5";
        libName = "p3_challenger";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-commit" = rec {
        crateName = "p3-commit";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0a5f2kwjwm2w2s4y91ghr1xnpgd1kv6v6h4c2mj1skrxsmwyk3xk";
        libName = "p3_commit";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "test-utils" = [ "dep:p3-dft" ];
        };
      };
      "p3-dft" = rec {
        crateName = "p3-dft";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "06knfqn5f72jm6mnwss855byvg74hh21r0f1rppiwvvrvnp4sha6";
        libName = "p3_dft";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-field" = rec {
        crateName = "p3-field";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "1nd04901rgwj9f5wfp4cwr20q0gflqv74pmrrp8yjjdk2q2qm528";
        libName = "p3_field";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "p3-fri" = rec {
        crateName = "p3-fri";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "181si0fs75xjq8nhkmhpi7qaapwz2bvzicwsxb6n1l6wnbd79hm0";
        libName = "p3_fri";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-interpolation";
            packageId = "p3-interpolation";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-interpolation" = rec {
        crateName = "p3-interpolation";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "1n6l84w97cp8jil2jgvnnk57zk296yj2d1xpgfhx02mv78ryg3gd";
        libName = "p3_interpolation";
        dependencies = [
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
        ];

      };
      "p3-keccak-air" = rec {
        crateName = "p3-keccak-air";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "1sidji6aab0fl41g3pbiy4zncvdrhpnf8a44b0wmsibw64hyriq1";
        libName = "p3_keccak_air";
        dependencies = [
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        features = {
          "parallel" = [ "p3-maybe-rayon/parallel" ];
        };
      };
      "p3-matrix" = rec {
        crateName = "p3-matrix";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0by4ndcc5yn72i34nrh3bs9j1vcqb098x9ayfg5pg52qfgry6k9y";
        libName = "p3_matrix";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-maybe-rayon" = rec {
        crateName = "p3-maybe-rayon";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Feature-gated wrapper around rayon";
        sha256 = "17lpf1rrnvsfqssxd31bdcfzwf7sxpsab4agn1p2j4032v8qm5n3";
        libName = "p3_maybe_rayon";
        dependencies = [
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
        ];
        features = {
          "parallel" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
        };
        resolvedDefaultFeatures = [ "parallel" "rayon" ];
      };
      "p3-mds" = rec {
        crateName = "p3-mds";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "1jcpdspl023aq7754jirfirq5pkg999wwf53yzxmsvfx1bnv2mi3";
        libName = "p3_mds";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "min_const_gen" ];
          }
        ];

      };
      "p3-merkle-tree" = rec {
        crateName = "p3-merkle-tree";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "024nncd838x7qq9wsv9yrnxh7kmrxckbz413s802rq5ymxry0ngi";
        libName = "p3_merkle_tree";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-poseidon2" = rec {
        crateName = "p3-poseidon2";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0fhwcnlshmyjr5r9igjmvl45d5zl3rpfg5fxps0hb45nw73yx8bx";
        libName = "p3_poseidon2";
        dependencies = [
          {
            name = "gcd";
            packageId = "gcd";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-mds";
            packageId = "p3-mds";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "min_const_gen" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "p3-symmetric" = rec {
        crateName = "p3-symmetric";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0q63znwyzrnmzwb6vf7qmlyd304y63im2jzz84xn48nql6z3kd7d";
        libName = "p3_symmetric";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];

      };
      "p3-uni-stark" = rec {
        crateName = "p3-uni-stark";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0z89l1h8qwbmdnsqi8xc9xni87kib83d4iv5rd5glimz6afg51js";
        libName = "p3_uni_stark";
        dependencies = [
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "p3-util" = rec {
        crateName = "p3-util";
        version = "0.2.3-succinct";
        edition = "2021";
        description = "Plonky3 is a toolkit for implementing polynomial IOPs (PIOPs), such as PLONK and STARKs.";
        sha256 = "0p6svn3w0hbm5hgacp2bm70qbd8m94v3iaiyaqmk7fbq0q0w5hmn";
        libName = "p3_util";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];

      };
      "pairing" = rec {
        crateName = "pairing";
        version = "0.22.0";
        edition = "2021";
        description = "Pairing-friendly elliptic curve library";
        sha256 = "0fvbifnnxss25514yal3bq9zaa93j4mgplcwdws32axsppc90m8k";
        authors = [
          "Sean Bowe <ewillbefull@gmail.com>"
          "Jack Grigg <jack@z.cash>"
        ];
        dependencies = [
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
        ];

      };
      "parity-scale-codec" = rec {
        crateName = "parity-scale-codec";
        version = "3.7.5";
        edition = "2021";
        description = "SCALE - Simple Concatenating Aggregated Little Endians";
        sha256 = "1yhhk02h2ww5vmh5f94d0l0abgvh16j28j1xw54ajycxcyp835vr";
        libName = "parity_scale_codec";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "byte-slice-cast";
            packageId = "byte-slice-cast";
            usesDefaultFeatures = false;
          }
          {
            name = "const_format";
            packageId = "const_format";
          }
          {
            name = "impl-trait-for-tuples";
            packageId = "impl-trait-for-tuples";
          }
          {
            name = "parity-scale-codec-derive";
            packageId = "parity-scale-codec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        devDependencies = [
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "parity-scale-codec-derive" ];
          "fuzz" = [ "std" "arbitrary" ];
          "generic-array" = [ "dep:generic-array" ];
          "max-encoded-len" = [ "parity-scale-codec-derive?/max-encoded-len" ];
          "parity-scale-codec-derive" = [ "dep:parity-scale-codec-derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde/std" "bitvec?/std" "byte-slice-cast/std" "chain-error" ];
        };
        resolvedDefaultFeatures = [ "derive" "max-encoded-len" "parity-scale-codec-derive" ];
      };
      "parity-scale-codec-derive" = rec {
        crateName = "parity-scale-codec-derive";
        version = "3.7.5";
        edition = "2021";
        description = "Serialization and deserialization derive macro for Parity SCALE Codec";
        sha256 = "0yiyc8y9iyjj2mqpkypb5ckbhzymps7c1r69ac8iaqxmd0qnbd1l";
        procMacro = true;
        libName = "parity_scale_codec_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "visit" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "max-encoded-len" ];
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.4";
        edition = "2021";
        description = "More compact and efficient implementations of the standard synchronization primitives.";
        sha256 = "04sab1c7304jg8k0d5b2pxbj1fvgzcf69l3n2mfpkdb96vs8pmbh";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.11";
        edition = "2021";
        description = "An advanced API for creating custom synchronization primitives.";
        sha256 = "19g4d6m5k4ggacinqprnn8xvdaszc3y5smsmbz1adcdmaqm8v0xw";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "pasta_curves 0.4.1" = rec {
        crateName = "pasta_curves";
        version = "0.4.1";
        edition = "2021";
        description = "Implementation of the Pallas and Vesta (Pasta) curve cycle";
        sha256 = "1n218dh96ygqfwafffv6m6cx9vm02ylpr7xazfqv84vkispmzijw";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" "blake2b_simd" ];
          "bits" = [ "ff/bits" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "default" = [ "bits" "sqrt-table" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "alloc" "ec-gpu" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sqrt-table" = [ "alloc" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "blake2b_simd" "default" "lazy_static" "sqrt-table" ];
      };
      "pasta_curves 0.5.1" = rec {
        crateName = "pasta_curves";
        version = "0.5.1";
        edition = "2021";
        description = "Implementation of the Pallas and Vesta (Pasta) curve cycle";
        sha256 = "15d0wy6j1d8ilg5cs0n4sxy8g81igd8rriv3mjrf3irwyyc7brfk";
        authors = [
          "Sean Bowe <sean@electriccoin.co>"
          "Ying Tong Lai <yingtong@electriccoin.co>"
          "Daira Hopwood <daira@electriccoin.co>"
          "Jack Grigg <jack@electriccoin.co>"
        ];
        dependencies = [
          {
            name = "blake2b_simd";
            packageId = "blake2b_simd";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            usesDefaultFeatures = false;
          }
          {
            name = "group";
            packageId = "group 0.13.0";
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
            features = [ "spin_no_std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "group/alloc" "blake2b_simd" ];
          "bits" = [ "ff/bits" ];
          "blake2b_simd" = [ "dep:blake2b_simd" ];
          "default" = [ "bits" "sqrt-table" ];
          "ec-gpu" = [ "dep:ec-gpu" ];
          "gpu" = [ "alloc" "ec-gpu" ];
          "hex" = [ "dep:hex" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "serde" = [ "hex" "serde_crate" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "sqrt-table" = [ "alloc" "lazy_static" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bits" "blake2b_simd" "default" "lazy_static" "sqrt-table" ];
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        description = "Macros for all your token pasting needs";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "pathdiff" = rec {
        crateName = "pathdiff";
        version = "0.2.3";
        edition = "2018";
        description = "Library for diffing paths to obtain relative paths";
        sha256 = "1lrqp4ip05df8dzldq6gb2c1sq2gs54gly8lcnv3rhav1qhwx56z";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "camino" = [ "dep:camino" ];
        };
      };
      "pem-rfc7468" = rec {
        crateName = "pem-rfc7468";
        version = "0.7.0";
        edition = "2021";
        description = "PEM Encoding (RFC 7468) for PKIX, PKCS, and CMS Structures, implementing a
strict subset of the original Privacy-Enhanced Mail encoding intended
specifically for use with cryptographic keys, certificates, and other messages.
Provides a no_std-friendly, constant-time implementation suitable for use with
cryptographic private keys.
";
        sha256 = "04l4852scl4zdva31c1z6jafbak0ni5pi0j38ml108zwzjdrrcw8";
        libName = "pem_rfc7468";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
          }
        ];
        features = {
          "alloc" = [ "base64ct/alloc" ];
          "std" = [ "alloc" "base64ct/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        description = "Percent encoding and decoding";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pin-project" = rec {
        crateName = "pin-project";
        version = "1.1.10";
        edition = "2021";
        description = "A crate for safe and ergonomic pin-projection.
";
        sha256 = "12kadbnfm1f43cyadw9gsbyln1cy7vj764wz5c8wxaiza3filzv7";
        libName = "pin_project";
        dependencies = [
          {
            name = "pin-project-internal";
            packageId = "pin-project-internal";
          }
        ];

      };
      "pin-project-internal" = rec {
        crateName = "pin-project-internal";
        version = "1.1.10";
        edition = "2021";
        description = "Implementation detail of the `pin-project` crate.
";
        sha256 = "0qgqzfl0f4lzaz7yl5llhbg97g68r15kljzihaw9wm64z17qx4bf";
        procMacro = true;
        libName = "pin_project_internal";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" "clone-impls" "proc-macro" "full" "visit-mut" ];
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        description = "A lightweight version of pin-project written with declarative macros.
";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        description = "Utilities for pinning
";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkcs8" = rec {
        crateName = "pkcs8";
        version = "0.10.2";
        edition = "2021";
        description = "Pure Rust implementation of Public-Key Cryptography Standards (PKCS) #8:
Private-Key Information Syntax Specification (RFC 5208), with additional
support for PKCS#8v2 asymmetric key packages (RFC 5958)
";
        sha256 = "1dx7w21gvn07azszgqd3ryjhyphsrjrmq5mmz1fbxkj5g0vv4l7r";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
          {
            name = "spki";
            packageId = "spki";
          }
        ];
        features = {
          "3des" = [ "encryption" "pkcs5/3des" ];
          "alloc" = [ "der/alloc" "der/zeroize" "spki/alloc" ];
          "des-insecure" = [ "encryption" "pkcs5/des-insecure" ];
          "encryption" = [ "alloc" "pkcs5/alloc" "pkcs5/pbes2" "rand_core" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "pem" = [ "alloc" "der/pem" "spki/pem" ];
          "pkcs5" = [ "dep:pkcs5" ];
          "rand_core" = [ "dep:rand_core" ];
          "sha1-insecure" = [ "encryption" "pkcs5/sha1-insecure" ];
          "std" = [ "alloc" "der/std" "spki/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.32";
        edition = "2018";
        description = "A library to run the pkg-config system tool at build time in order to be used in
Cargo build scripts.
";
        sha256 = "0k4h3gnzs94sjb2ix6jyksacs52cf1fanpwsmlhjnwrdnp8dppby";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "poem" = rec {
        crateName = "poem";
        version = "3.1.11";
        edition = "2024";
        description = "Poem is a full-featured and easy-to-use web framework with the Rust programming language.";
        sha256 = "08a1p4sd1mxfidz9km3lp57z024d1xv44lyicai1r6r70a9kx9iy";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "sink" ];
          }
          {
            name = "headers";
            packageId = "headers";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "http1" "http2" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            features = [ "server-auto" "tokio" ];
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "multer";
            packageId = "multer";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "nix";
            packageId = "nix";
            target = { target, features }: (target."unix" or false);
            features = [ "fs" "user" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "poem-derive";
            packageId = "poem-derive";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
            optional = true;
            features = [ "serialize" ];
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "rfc7239";
            packageId = "rfc7239";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = [ "futures" ];
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            rename = "libtempfile";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "time" "macros" "net" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            optional = true;
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            features = [ "io" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "wildmatch";
            packageId = "wildmatch";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt-multi-thread" "macros" ];
          }
        ];
        features = {
          "acme" = [ "acme-native-roots" ];
          "acme-base" = [ "server" "reqwest" "rustls" "ring" "base64" "rcgen" "x509-parser" "chrono" ];
          "acme-native-roots" = [ "acme-base" "reqwest/rustls-tls-native-roots" ];
          "acme-webpki-roots" = [ "acme-base" "reqwest/rustls-tls-webpki-roots" ];
          "anyhow" = [ "dep:anyhow" ];
          "async-compression" = [ "dep:async-compression" ];
          "base64" = [ "dep:base64" ];
          "chrono" = [ "dep:chrono" ];
          "compression" = [ "async-compression" ];
          "cookie" = [ "libcookie" "chrono" "time" ];
          "csrf" = [ "cookie" "base64" "libcsrf" ];
          "default" = [ "server" ];
          "embed" = [ "rust-embed" "hex" "mime_guess" ];
          "eyre06" = [ "dep:eyre06" ];
          "fluent" = [ "dep:fluent" ];
          "fluent-langneg" = [ "dep:fluent-langneg" ];
          "fluent-syntax" = [ "dep:fluent-syntax" ];
          "hex" = [ "dep:hex" ];
          "httpdate" = [ "dep:httpdate" ];
          "i18n" = [ "fluent" "fluent-langneg" "fluent-syntax" "unic-langid" "intl-memoizer" ];
          "intl-memoizer" = [ "dep:intl-memoizer" ];
          "libcookie" = [ "dep:libcookie" ];
          "libcsrf" = [ "dep:libcsrf" ];
          "libopentelemetry" = [ "dep:libopentelemetry" ];
          "libprometheus" = [ "dep:libprometheus" ];
          "libtempfile" = [ "dep:libtempfile" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "multer" = [ "dep:multer" ];
          "multipart" = [ "multer" ];
          "native-tls" = [ "server" "tokio-native-tls" ];
          "openssl" = [ "dep:openssl" ];
          "openssl-tls" = [ "server" "tokio-openssl" "openssl" ];
          "opentelemetry" = [ "libopentelemetry" "opentelemetry-http" "opentelemetry-semantic-conventions" ];
          "opentelemetry-http" = [ "dep:opentelemetry-http" ];
          "opentelemetry-prometheus" = [ "dep:opentelemetry-prometheus" ];
          "opentelemetry-semantic-conventions" = [ "dep:opentelemetry-semantic-conventions" ];
          "priority-queue" = [ "dep:priority-queue" ];
          "prometheus" = [ "libopentelemetry" "opentelemetry-prometheus" "libprometheus" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "rand" = [ "dep:rand" ];
          "rcgen" = [ "dep:rcgen" ];
          "redis" = [ "dep:redis" ];
          "redis-session" = [ "session" "redis" ];
          "requestid" = [ "dep:uuid" ];
          "reqwest" = [ "dep:reqwest" ];
          "ring" = [ "dep:ring" ];
          "rust-embed" = [ "dep:rust-embed" ];
          "rustls" = [ "server" "tokio-rustls" "rustls-pemfile" ];
          "rustls-pemfile" = [ "dep:rustls-pemfile" ];
          "serde_yaml" = [ "dep:serde_yaml" ];
          "server" = [ "tokio/rt" "tokio/net" "hyper/server" ];
          "session" = [ "tokio/rt" "cookie" "rand" "priority-queue" "base64" ];
          "sonic-rs" = [ "dep:sonic-rs" ];
          "sse" = [ "tokio-stream" ];
          "sse-codec" = [ "dep:sse-codec" ];
          "static-files" = [ "httpdate" "mime_guess" "tokio/io-util" "tokio/fs" ];
          "tempfile" = [ "libtempfile" "tokio/fs" ];
          "test" = [ "sse" "sse-codec" "tokio-util/compat" ];
          "time" = [ "dep:time" ];
          "tokio-metrics" = [ "dep:tokio-metrics" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-openssl" = [ "dep:tokio-openssl" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-tungstenite" = [ "dep:tokio-tungstenite" ];
          "tower" = [ "dep:tower" ];
          "tower-compat" = [ "tokio/rt" "tower" ];
          "unic-langid" = [ "dep:unic-langid" ];
          "websocket" = [ "tokio/rt" "tokio-tungstenite" "base64" ];
          "x509-parser" = [ "dep:x509-parser" ];
          "xml" = [ "quick-xml" ];
          "yaml" = [ "serde_yaml" ];
        };
        resolvedDefaultFeatures = [ "anyhow" "default" "libtempfile" "multer" "multipart" "quick-xml" "serde_yaml" "server" "sse" "tempfile" "tokio-stream" "xml" "yaml" ];
      };
      "poem-derive" = rec {
        crateName = "poem-derive";
        version = "3.1.11";
        edition = "2024";
        description = "Macros for poem";
        sha256 = "0f6k6c86cdaqar44wjxsxdv4crxyvm2c8jjx9qszxds3agipykl2";
        procMacro = true;
        libName = "poem_derive";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "poem-openapi" = rec {
        crateName = "poem-openapi";
        version = "5.1.15";
        edition = "2024";
        description = "OpenAPI support for Poem.";
        sha256 = "0835avazpsad3qgxbfx5np6y3gjjdssg5lwq56mcglrf28nsk8wb";
        libName = "poem_openapi";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "derive_more";
            packageId = "derive_more 2.0.1";
            features = [ "display" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "poem";
            packageId = "poem";
            features = [ "multipart" "tempfile" "sse" "xml" "yaml" ];
          }
          {
            name = "poem-openapi-derive";
            packageId = "poem-openapi-derive";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
            features = [ "serialize" ];
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "serde_yaml";
            packageId = "serde_yaml";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" ];
          }
        ];
        devDependencies = [
          {
            name = "poem";
            packageId = "poem";
            usesDefaultFeatures = false;
            features = [ "test" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt-multi-thread" ];
          }
        ];
        features = {
          "bson" = [ "dep:bson" ];
          "chrono" = [ "dep:chrono" ];
          "cookie" = [ "poem/cookie" ];
          "email" = [ "email_address" ];
          "email_address" = [ "dep:email_address" ];
          "geo" = [ "dep:geo-types" "dep:geojson" ];
          "hostname" = [ "hostname-validator" ];
          "hostname-validator" = [ "dep:hostname-validator" ];
          "humantime" = [ "dep:humantime" ];
          "ipnet" = [ "dep:ipnet" ];
          "prost-wkt-types" = [ "dep:prost-wkt-types" ];
          "rust_decimal" = [ "dep:rust_decimal" ];
          "sonic-rs" = [ "poem/sonic-rs" ];
          "sqlx" = [ "dep:sqlx" ];
          "static-files" = [ "poem/static-files" ];
          "time" = [ "dep:time" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
          "websocket" = [ "poem/websocket" ];
        };
        resolvedDefaultFeatures = [ "swagger-ui" ];
      };
      "poem-openapi-derive" = rec {
        crateName = "poem-openapi-derive";
        version = "5.1.15";
        edition = "2024";
        description = "Macros for poem-openapi";
        sha256 = "1s45s8vrzp5r6qsz4lxyfy2kcysc4978nzpab68zsww2hqhxqgfz";
        procMacro = true;
        libName = "poem_openapi_derive";
        authors = [
          "sunli <scott_s829@163.com>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "mime";
            packageId = "mime";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "visit-mut" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.1";
        edition = "2018";
        description = "Portable atomic types including support for 128-bit atomics, atomic float, etc.
";
        sha256 = "10s4cx9y3jvw0idip09ar52s2kymq8rq9a668f793shn1ar6fhpq";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" ];
      };
      "postcard" = rec {
        crateName = "postcard";
        version = "1.1.2";
        edition = "2021";
        description = "A no_std + serde compatible message library for Rust";
        sha256 = "0ynip6riqihal0kxnn9jh16qai70j13crbrwlx6g47gm41pfj7bc";
        authors = [
          "James Munns <james@onevariable.com>"
        ];
        dependencies = [
          {
            name = "cobs";
            packageId = "cobs";
            usesDefaultFeatures = false;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.4.0";
            rename = "embedded-io-04";
            optional = true;
          }
          {
            name = "embedded-io";
            packageId = "embedded-io 0.6.1";
            rename = "embedded-io-06";
            optional = true;
          }
          {
            name = "heapless";
            packageId = "heapless 0.7.17";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "embedded-io-04?/alloc" "embedded-io-06?/alloc" ];
          "crc" = [ "dep:crc" ];
          "default" = [ "heapless-cas" ];
          "defmt" = [ "dep:defmt" ];
          "embedded-io" = [ "dep:embedded-io-04" ];
          "embedded-io-04" = [ "dep:embedded-io-04" ];
          "embedded-io-06" = [ "dep:embedded-io-06" ];
          "experimental-derive" = [ "postcard-derive" ];
          "heapless" = [ "dep:heapless" ];
          "heapless-cas" = [ "heapless" "dep:heapless" "heapless/cas" ];
          "nalgebra-v0_33" = [ "nalgebra_v0_33" ];
          "nalgebra_v0_33" = [ "dep:nalgebra_v0_33" ];
          "postcard-derive" = [ "dep:postcard-derive" ];
          "use-crc" = [ "crc" ];
          "use-defmt" = [ "defmt" ];
          "use-std" = [ "serde/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "heapless" "heapless-cas" ];
      };
      "potential_utf" = rec {
        crateName = "potential_utf";
        version = "0.1.2";
        edition = "2021";
        description = "Unvalidated string and character types";
        sha256 = "11dm6k3krx3drbvhgjw8z508giiv0m09wzl6ghza37176w4c79z5";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "serde" = [ "dep:serde" ];
          "writeable" = [ "dep:writeable" "alloc" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        description = "    `powerfmt` is a library that provides utilities for formatting values. This crate makes it
    significantly easier to support filling to a minimum width with alignment, avoid heap
    allocation, and avoid repetitive calculations.
";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        description = "Cross-platform cryptography-oriented low-level SIMD library.";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "prettyplease" = rec {
        crateName = "prettyplease";
        version = "0.2.35";
        edition = "2021";
        description = "A minimal `syn` syntax tree pretty-printer";
        links = "prettyplease02";
        sha256 = "16jklwmgqfzi6izcs6c4mqbmkzjv4zrbn9cx8wk9n1qycchi4706";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "extra-traits" "parsing" "printing" "visit-mut" ];
          }
        ];
        features = {
          "verbatim" = [ "syn/parsing" ];
        };
        resolvedDefaultFeatures = [ "verbatim" ];
      };
      "primeorder" = rec {
        crateName = "primeorder";
        version = "0.13.6";
        edition = "2021";
        description = "Pure Rust implementation of complete addition formulas for prime order elliptic
curves (Renes-Costello-Batina 2015). Generic over field elements and curve
equation coefficients
";
        sha256 = "1rp16710mxksagcjnxqjjq9r9wf5vf72fs8wxffnvhb6i6hiqgim";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
            usesDefaultFeatures = false;
            features = [ "arithmetic" "sec1" ];
          }
        ];
        features = {
          "alloc" = [ "elliptic-curve/alloc" ];
          "serde" = [ "elliptic-curve/serde" "serdect" ];
          "serdect" = [ "dep:serdect" ];
          "std" = [ "alloc" "elliptic-curve/std" ];
        };
      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        description = "Replacement for crate (macro_rules keyword) in proc-macros
";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 3.3.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        description = "Replacement for crate (macro_rules keyword) in proc-macros
";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.27";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro-error-attr2" = rec {
        crateName = "proc-macro-error-attr2";
        version = "2.0.0";
        edition = "2021";
        description = "Attribute macro for the proc-macro-error2 crate";
        sha256 = "1ifzi763l7swl258d8ar4wbpxj4c9c2im7zy89avm6xv6vgl5pln";
        procMacro = true;
        libName = "proc_macro_error_attr2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "proc-macro-error2" = rec {
        crateName = "proc-macro-error2";
        version = "2.0.1";
        edition = "2021";
        description = "Almost drop-in replacement to panics in proc-macros";
        sha256 = "00lq21vgh7mvyx51nwxwf822w2fpww1x0z8z0q47p8705g2hbv0i";
        libName = "proc_macro_error2";
        authors = [
          "CreepySkeleton <creepy-skeleton@yandex.ru>"
          "GnomedDev <david2005thomas@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-error-attr2";
            packageId = "proc-macro-error-attr2";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "syn-error" ];
          "syn-error" = [ "dep:syn" ];
        };
        resolvedDefaultFeatures = [ "default" "syn-error" ];
      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        description = "A substitute implementation of the compiler's `proc_macro` API to decouple token-based libraries from the procedural macro use case.";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "proptest" = rec {
        crateName = "proptest";
        version = "1.7.0";
        edition = "2021";
        description = "Hypothesis-like property-based testing and shrinking.
";
        sha256 = "07s73fqbhdzmnhnd8ks6l5mlkwaz048a49kprwqml6dmvqcspkbg";
        authors = [
          "Jason Lingle"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_xorshift";
            packageId = "rand_xorshift";
          }
          {
            name = "unarray";
            packageId = "unarray";
          }
        ];
        features = {
          "attr-macro" = [ "proptest-macro" ];
          "bit-set" = [ "dep:bit-set" "dep:bit-vec" ];
          "default" = [ "std" "fork" "timeout" "bit-set" ];
          "default-code-coverage" = [ "std" "fork" "timeout" "bit-set" ];
          "fork" = [ "std" "rusty-fork" "tempfile" ];
          "handle-panics" = [ "std" ];
          "hardware-rng" = [ "x86" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "no_std" = [ "num-traits/libm" ];
          "proptest-macro" = [ "dep:proptest-macro" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "rusty-fork" = [ "dep:rusty-fork" ];
          "std" = [ "rand/std" "rand/os_rng" "lazy_static" "regex-syntax" "num-traits/std" ];
          "tempfile" = [ "dep:tempfile" ];
          "timeout" = [ "fork" "rusty-fork/timeout" ];
          "x86" = [ "dep:x86" ];
        };
        resolvedDefaultFeatures = [ "alloc" "no_std" ];
      };
      "prost" = rec {
        crateName = "prost";
        version = "0.13.5";
        edition = "2021";
        description = "A Protocol Buffers implementation for the Rust Language.";
        sha256 = "1r8yi6zxxwv9gq5ia9p55nspgwmchs94sqpp64x33v5k3njgm5i7";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "prost-derive";
            packageId = "prost-derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "derive" "std" ];
          "derive" = [ "dep:prost-derive" ];
          "prost-derive" = [ "derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" ];
      };
      "prost-derive" = rec {
        crateName = "prost-derive";
        version = "0.13.5";
        edition = "2021";
        description = "Generate encoding and decoding implementations for Prost annotated types.";
        sha256 = "0kgc9gbzsa998xixblfi3kfydka64zqf6rmpm53b761cjxbxfmla";
        procMacro = true;
        libName = "prost_derive";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Casper Meijn <casper@meijn.net>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "itertools";
            packageId = "itertools 0.14.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
        ];

      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.36.2";
        edition = "2021";
        description = "High performance xml reader and writer";
        sha256 = "1zj3sjcjk6sn544wb2wvhr1km5f9cy664vzclygfsnph9mxrlr7p";
        libName = "quick_xml";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "serialize" ];
      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.8";
        edition = "2021";
        description = "Versatile QUIC transport protocol implementation";
        sha256 = "1j02h87nfxww5mjcw4vjcnx8b70q0yinnc8xvjv82ryskii18qk2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "rt-multi-thread" "time" "macros" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "aws-lc-rs" = [ "proto/aws-lc-rs" ];
          "aws-lc-rs-fips" = [ "proto/aws-lc-rs-fips" ];
          "bloom" = [ "proto/bloom" ];
          "default" = [ "log" "platform-verifier" "runtime-tokio" "rustls-ring" "bloom" ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [ "tracing/log" "proto/log" "udp/log" ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [ "async-io" "async-std" ];
          "runtime-smol" = [ "async-io" "smol" ];
          "runtime-tokio" = [ "tokio/time" "tokio/rt" "tokio/net" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "ring" "proto/rustls-ring" "proto/ring" ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [ "ring" "runtime-tokio" "rustls" "rustls-ring" ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.12";
        edition = "2021";
        description = "State machine for the QUIC transport protocol";
        sha256 = "0bj2yyrf1mrg2bcj19ipsspvrj5sq0di0pz5maw5pj31j4x89ps9";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm_js" ];
          }
          {
            name = "lru-slab";
            packageId = "lru-slab";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm32_unknown_unknown_js" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash 2.1.1";
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "web" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "aws-lc-rs" "aws-lc-rs?/fips" ];
          "bloom" = [ "dep:fastbloom" ];
          "default" = [ "rustls-ring" "log" "bloom" ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "rustls-aws-lc-rs" "aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "rustls?/ring" "ring" ];
        };
        resolvedDefaultFeatures = [ "ring" "rustls-ring" ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.13";
        edition = "2021";
        description = "UDP sockets with ECN information for the QUIC transport protocol";
        sha256 = "0w0ri3wv5g419i5dfv4qmjxh4ayc4hp77y2gy4p3axp2kqhb3szw";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "tracing" "log" ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "tracing" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        description = "Quasi-quoting macro quote!(...)";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.3.0";
        edition = "2018";
        description = "UEFI Reference Specification Protocol Constants and Definitions";
        sha256 = "03sbfm3g7myvzyylff6qaxk4z6fy76yv860yy66jiswc2m6b7kb9";
        libName = "r_efi";
        features = {
          "core" = [ "dep:core" ];
          "examples" = [ "native" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "radium" = rec {
        crateName = "radium";
        version = "0.7.0";
        edition = "2018";
        description = "Portable interfaces for maybe-atomic types";
        sha256 = "02cxfi3ky3c4yhyqx9axqwhyaca804ws46nn4gc1imbk94nzycyw";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        description = "Random number generators and other randomness functionality.
";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "min_const_gen" "rand_chacha" "serde" "small_rng" "std" "std_rng" ];
      };
      "rand 0.9.1" = rec {
        crateName = "rand";
        version = "0.9.1";
        edition = "2021";
        description = "Random number generators and other randomness functionality.
";
        sha256 = "15yxfcxbgmwba5cv7mjg9bhc1r5c9483dfcdfspg62x4jk8dkgwz";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "std" "std_rng" "os_rng" "small_rng" "thread_rng" ];
          "log" = [ "dep:log" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" "rand_core/serde" ];
          "std" = [ "rand_core/std" "rand_chacha?/std" "alloc" ];
          "std_rng" = [ "dep:rand_chacha" ];
          "thread_rng" = [ "std" "std_rng" "os_rng" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "os_rng" "serde" "small_rng" "std" "std_rng" "thread_rng" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        description = "ChaCha random number generator
";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.9.0" = rec {
        crateName = "rand_chacha";
        version = "0.9.0";
        edition = "2021";
        description = "ChaCha random number generator
";
        sha256 = "1jr5ygix7r60pz0s1cv3ms1f6pd1i9pcdmnxzzhjc3zn3mgjn0nk";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            features = [ "os_rng" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "ppv-lite86/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        description = "Core random number generator traits and tools for implementation.
";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.9.3" = rec {
        crateName = "rand_core";
        version = "0.9.3";
        edition = "2021";
        description = "Core random number generator traits and tools for implementation.
";
        sha256 = "0f3xhf16yks5ic6kmgxcpv1ngdhp48mmfy4ag82i1wnwh8ws3ncr";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "os_rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "getrandom?/std" ];
        };
        resolvedDefaultFeatures = [ "os_rng" "serde" "std" ];
      };
      "rand_xorshift" = rec {
        crateName = "rand_xorshift";
        version = "0.4.0";
        edition = "2021";
        description = "Xorshift random number generator
";
        sha256 = "0njsn25pis742gb6b89cpq7jp48v9n23a9fvks10yczwks8n4fai";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "range-set-blaze" = rec {
        crateName = "range-set-blaze";
        version = "0.1.16";
        edition = "2021";
        description = "Integer sets as fast, sorted, integer ranges with full set operations";
        sha256 = "1lhk1wpwnshx6kz6rb2fnhq3hgpzjwl3d38496zanbi6b7aba8c4";
        libName = "range_set_blaze";
        authors = [
          "Carl Kadie"
        ];
        dependencies = [
          {
            name = "gen_ops";
            packageId = "gen_ops";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "itertools/use_alloc" "num-traits" "num-integer" ];
          "default" = [ "std" ];
          "itertools" = [ "dep:itertools" ];
          "num-integer" = [ "dep:num-integer" ];
          "num-traits" = [ "dep:num-traits" ];
          "std" = [ "itertools/use_std" "num-traits/std" "num-integer/std" ];
        };
        resolvedDefaultFeatures = [ "default" "itertools" "num-integer" "num-traits" "std" ];
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        description = "Simple work-stealing parallelism for Rust";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        description = "Core APIs for Rayon";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "rayon-scan" = rec {
        crateName = "rayon-scan";
        version = "0.1.1";
        edition = "2021";
        description = "A parallel prefix scan function for ParallelIterator";
        sha256 = "057sg3q0sb0bj84ak01dcw9ipik0ay48kj7zl06ln2qll08wr1rz";
        libName = "rayon_scan";
        authors = [
          "Ariel Uy"
        ];
        dependencies = [
          {
            name = "rayon";
            packageId = "rayon";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.13";
        edition = "2021";
        description = "A Rust library to access raw Redox system calls";
        sha256 = "1mlzna9bcd7ss1973bmysr3hpjrys82b3bd7l03h4jkbxv8bf10d";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "redox_users" = rec {
        crateName = "redox_users";
        version = "0.4.6";
        edition = "2021";
        description = "A Rust library to access Redox users and groups functionality";
        sha256 = "0hya2cxx6hxmjfxzv9n8rjl5igpychav7zfi1f81pz6i4krry05s";
        authors = [
          "Jose Narvaez <goyox86@gmail.com>"
          "Wesley Hershberger <mggmugginsmc@gmail.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            features = [ "std" ];
          }
          {
            name = "libredox";
            packageId = "libredox";
            usesDefaultFeatures = false;
            features = [ "std" "call" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "auth" = [ "rust-argon2" "zeroize" ];
          "default" = [ "auth" ];
          "rust-argon2" = [ "dep:rust-argon2" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        description = "An implementation of regular expressions for Rust. This implementation uses
finite automata and guarantees linear time matching on all inputs.
";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata 0.4.9";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata 0.1.10" = rec {
        crateName = "regex-automata";
        version = "0.1.10";
        edition = "2015";
        description = "Automata construction and matching using regular expressions.";
        sha256 = "0ci1hvbzhrfby5fdpf4ganhf7kla58acad9i1ff1p34dzdrhs8vc";
        libName = "regex_automata";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.6.29";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fst" = [ "dep:fst" ];
          "regex-syntax" = [ "dep:regex-syntax" ];
          "std" = [ "regex-syntax" ];
          "transducer" = [ "std" "fst" ];
        };
        resolvedDefaultFeatures = [ "default" "regex-syntax" "std" ];
      };
      "regex-automata 0.4.9" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        description = "Automata construction and matching using regular expressions.";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax 0.8.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax 0.6.29" = rec {
        crateName = "regex-syntax";
        version = "0.6.29";
        edition = "2018";
        description = "A regular expression parser.";
        sha256 = "1qgj49vm6y3zn1hi09x91jvgkl2b1fiaq402skj83280ggfwcqpi";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-syntax 0.8.5" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        description = "A regular expression parser.";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "relative-path" = rec {
        crateName = "relative-path";
        version = "2.0.1";
        edition = "2021";
        description = "Portable, relative paths for Rust.";
        sha256 = "1c4jm6x0p88722c77xx53mb7zcs4xznp9d3whdsbmn1248qhm95w";
        libName = "relative_path";
        authors = [
          "John-John Tedro <udoprog@tedro.se>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" "alloc" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.12.22";
        edition = "2021";
        description = "higher level HTTP client library";
        sha256 = "0cbmfrcrk6wbg93apmji0fln1ca9322af2kc7dpa18vcgs9k3jfb";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "encoding_rs";
            packageId = "encoding_rs";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "tls12" ];
          }
          {
            name = "hyper-tls";
            packageId = "hyper-tls";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" "client-legacy" "client-proxy" "tokio" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "mime";
            packageId = "mime";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "native-tls";
            packageId = "native-tls";
            rename = "native-tls-crate";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rustls" "runtime-tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "tls12" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = [ "futures" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-native-tls";
            packageId = "tokio-native-tls";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tls12" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "codec" "io" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "timeout" "util" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "follow-redirect" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-streams";
            packageId = "wasm-streams";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "client-legacy" "server-auto" "server-graceful" "tokio" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
            features = [ "limit" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "dep:hyper-rustls" "dep:tokio-rustls" "dep:rustls" "__tls" ];
          "__rustls-ring" = [ "hyper-rustls?/ring" "tokio-rustls?/ring" "rustls?/ring" "quinn?/ring" ];
          "__tls" = [ "dep:rustls-pki-types" "tokio/io-util" ];
          "blocking" = [ "dep:futures-channel" "futures-channel?/sink" "dep:futures-util" "futures-util?/io" "futures-util?/sink" "tokio/sync" ];
          "brotli" = [ "dep:async-compression" "async-compression?/brotli" "dep:futures-util" "dep:tokio-util" ];
          "charset" = [ "dep:encoding_rs" "dep:mime" ];
          "cookies" = [ "dep:cookie_crate" "dep:cookie_store" ];
          "default" = [ "default-tls" "charset" "http2" "system-proxy" ];
          "default-tls" = [ "dep:hyper-tls" "dep:native-tls-crate" "__tls" "dep:tokio-native-tls" ];
          "deflate" = [ "dep:async-compression" "async-compression?/zlib" "dep:futures-util" "dep:tokio-util" ];
          "gzip" = [ "dep:async-compression" "async-compression?/gzip" "dep:futures-util" "dep:tokio-util" ];
          "h2" = [ "dep:h2" ];
          "hickory-dns" = [ "dep:hickory-resolver" "dep:once_cell" ];
          "http2" = [ "h2" "hyper/http2" "hyper-util/http2" "hyper-rustls?/http2" ];
          "http3" = [ "rustls-tls-manual-roots" "dep:h3" "dep:h3-quinn" "dep:quinn" "tokio/macros" ];
          "json" = [ "dep:serde_json" ];
          "macos-system-configuration" = [ "system-proxy" ];
          "multipart" = [ "dep:mime_guess" "dep:futures-util" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate?/alpn" "hyper-tls?/alpn" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate?/vendored" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "rustls-tls-manual-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-manual-roots-no-provider" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "rustls-tls-native-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-native-roots-no-provider" = [ "dep:rustls-native-certs" "hyper-rustls?/native-tokio" "__rustls" ];
          "rustls-tls-no-provider" = [ "rustls-tls-manual-roots-no-provider" ];
          "rustls-tls-webpki-roots" = [ "rustls-tls-webpki-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-webpki-roots-no-provider" = [ "dep:webpki-roots" "hyper-rustls?/webpki-tokio" "__rustls" ];
          "stream" = [ "tokio/fs" "dep:futures-util" "dep:tokio-util" "dep:wasm-streams" ];
          "system-proxy" = [ "hyper-util/client-proxy-system" ];
          "zstd" = [ "dep:async-compression" "async-compression?/zstd" "dep:futures-util" "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__rustls-ring" "__tls" "blocking" "charset" "default" "default-tls" "h2" "http2" "json" "rustls-tls" "rustls-tls-webpki-roots" "rustls-tls-webpki-roots-no-provider" "stream" "system-proxy" "trust-dns" ];
      };
      "reqwest-middleware" = rec {
        crateName = "reqwest-middleware";
        version = "0.3.3";
        edition = "2018";
        description = "Wrapper around reqwest to allow for client middleware chains.";
        sha256 = "011b8n9a1bwalyk2y6x5s0wz52pxk70l4bbrba47qgsdc1dfnb2n";
        libName = "reqwest_middleware";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "charset" = [ "reqwest/charset" ];
          "http2" = [ "reqwest/http2" ];
          "json" = [ "reqwest/json" ];
          "multipart" = [ "reqwest/multipart" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
        };
      };
      "rfc6979" = rec {
        crateName = "rfc6979";
        version = "0.4.0";
        edition = "2021";
        description = "Pure Rust implementation of RFC6979: Deterministic Usage of the
Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)
";
        sha256 = "1chw95jgcfrysyzsq6a10b1j5qb7bagkx8h0wda4lv25in02mpgq";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
            usesDefaultFeatures = false;
            features = [ "reset" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];

      };
      "rfc7239" = rec {
        crateName = "rfc7239";
        version = "0.1.3";
        edition = "2018";
        description = "Parser for rfc7239 formatted Forwarded headers";
        sha256 = "03rmb1l2l2pqn311wn6qii7ckwnn5vravkzzb2xqb6lfwg8z30ja";
        authors = [
          "Robin Appelman <robin@icewind.nl>"
        ];
        dependencies = [
          {
            name = "uncased";
            packageId = "uncased";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        description = "An experiment.";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("apple" == target."vendor" or null) && (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("tvos" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) || (("arm" == target."arch" or null) && ("little" == target."endian" or null))) && (("android" == target."os" or null) || ("linux" == target."os" or null)));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "wasm32_unknown_unknown_js" ];
      };
      "rlp" = rec {
        crateName = "rlp";
        version = "0.6.1";
        edition = "2021";
        description = "Recursive-length prefix encoding, decoding, and compression";
        sha256 = "1qvr8kcm0zfrsgj9d1hb8a66n1zpz4fsfqfnfsxrhcd8n8myj97s";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            usesDefaultFeatures = false;
          }
          {
            name = "rustc-hex";
            packageId = "rustc-hex";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "rlp-derive" ];
          "rlp-derive" = [ "dep:rlp-derive" ];
          "std" = [ "bytes/std" "rustc-hex/std" ];
        };
      };
      "rrs-succinct" = rec {
        crateName = "rrs-succinct";
        version = "0.1.0";
        edition = "2018";
        description = "A library for building RISC-V instruction set simulators";
        sha256 = "1a8g71ym33lmimwkva3rfg8pya0p01ljsycfx4c7vxm9jdc6hwik";
        libName = "rrs_succinct";
        authors = [
          "Greg Chadwick <mail@gregchadwick.co.uk>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];

      };
      "ruint" = rec {
        crateName = "ruint";
        version = "1.15.0";
        edition = "2021";
        description = "Unsigned integer type with const-generic bit length";
        sha256 = "1d3zkj42w569v502fy54cwikvwwjwlh0gvrrdyn5d3y6x1gnn98i";
        authors = [
          "Remco Bloemen <remco@wicked.ventures>"
        ];
        dependencies = [
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "proptest";
            packageId = "proptest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "no_std" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "rand-08";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            rename = "rand-09";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ruint-macro";
            packageId = "ruint-macro";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "proptest";
            packageId = "proptest";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            rename = "rand-09";
          }
        ];
        features = {
          "alloc" = [ "proptest?/alloc" "rand-08?/alloc" "rand-09?/alloc" "serde?/alloc" "valuable?/alloc" "zeroize?/alloc" ];
          "alloy-rlp" = [ "dep:alloy-rlp" "alloc" ];
          "arbitrary" = [ "dep:arbitrary" "std" ];
          "ark-ff" = [ "dep:ark-ff-03" ];
          "ark-ff-04" = [ "dep:ark-ff-04" ];
          "bn-rs" = [ "dep:bn-rs" "std" ];
          "borsh" = [ "dep:borsh" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "der" = [ "dep:der" "alloc" ];
          "diesel" = [ "dep:diesel" "std" "dep:thiserror" ];
          "fastrlp" = [ "dep:fastrlp-03" "alloc" ];
          "fastrlp-04" = [ "dep:fastrlp-04" "alloc" ];
          "generic_const_exprs" = [ "nightly" ];
          "num-bigint" = [ "dep:num-bigint" "alloc" ];
          "num-integer" = [ "dep:num-integer" "num-traits" "alloc" ];
          "num-traits" = [ "dep:num-traits" "alloc" ];
          "parity-scale-codec" = [ "dep:parity-scale-codec" "alloc" ];
          "postgres" = [ "dep:postgres-types" "dep:bytes" "dep:thiserror" "std" ];
          "primitive-types" = [ "dep:primitive-types" ];
          "proptest" = [ "dep:proptest" "alloc" ];
          "pyo3" = [ "dep:pyo3" "std" ];
          "quickcheck" = [ "dep:quickcheck" "std" ];
          "rand" = [ "dep:rand-08" ];
          "rand-09" = [ "dep:rand-09" ];
          "rlp" = [ "dep:rlp" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "sqlx" = [ "dep:sqlx-core" "std" "dep:thiserror" ];
          "ssz" = [ "std" "dep:ethereum_ssz" ];
          "std" = [ "alloc" "alloy-rlp?/std" "ark-ff-03?/std" "ark-ff-04?/std" "bytes?/std" "fastrlp-03?/std" "fastrlp-04?/std" "num-bigint?/std" "num-integer?/std" "num-traits?/std" "parity-scale-codec?/std" "primitive-types?/std" "proptest?/std" "rand-08?/std" "rand-08?/std_rng" "rand-09?/std" "rand-09?/thread_rng" "rlp?/std" "serde?/std" "valuable?/std" "zeroize?/std" ];
          "subtle" = [ "dep:subtle" ];
          "valuable" = [ "dep:valuable" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "alloy-rlp" "serde" ];
      };
      "ruint-macro" = rec {
        crateName = "ruint-macro";
        version = "1.2.1";
        edition = "2021";
        description = "The `uint!` macro for `Uint` and `Bits` literals";
        sha256 = "065fmbmrpixy4y8qnz5ygb3dv50v6wjyra22knniaziplvc7pza8";
        procMacro = true;
        libName = "ruint_macro";
        authors = [
          "Remco Bloemen <remco@wicked.ventures>"
        ];

      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.25";
        edition = "2015";
        description = "Rust compiler symbol demangling.
";
        sha256 = "0kxq6m0drr40434ch32j31dkg00iaf4zxmqg7sqxajhcz0wng7lq";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "rustc-hash 1.1.0" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        description = "speed, non-cryptographic hash used in rustc";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hash 2.1.1" = rec {
        crateName = "rustc-hash";
        version = "2.1.1";
        edition = "2021";
        description = "A speedy, non-cryptographic hashing algorithm used by rustc";
        sha256 = "03gz5lvd9ghcwsal022cgkq67dmimcgdjghfb5yb5d352ga06xrm";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc-hex" = rec {
        crateName = "rustc-hex";
        version = "2.1.0";
        edition = "2018";
        description = "rustc-serialize compatible hex conversion traits
";
        sha256 = "1mkjy2vbn5kzg67wgngwddlk4snmd8mkjkql2dzrzzfh6ajzcx9y";
        libName = "rustc_hex";
        authors = [
          "The Rust Project Developers"
          "debris <marek.kotewicz@gmail.com>"
          "Robert Habermeier"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        description = "A library for querying the version of a installed rustc compiler";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rustix" = rec {
        crateName = "rustix";
        version = "1.0.7";
        edition = "2021";
        description = "Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls";
        sha256 = "0rhjh16bnxi86nrn9qwcnw5632mvd5m1vdy61s4n9zz7mzb867n7";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."windows" or false)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((("android" == target."os" or null) || ("linux" == target."os" or null)) && ((target."rustix_use_libc" or false) || (target."miri" or false) || (!(("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null)))))));
            features = [ "general" "ioctl" "no_std" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys";
            usesDefaultFeatures = false;
            target = { target, features }: ((!(target."rustix_use_libc" or false)) && (!(target."miri" or false)) && ("linux" == target."os" or null) && (("little" == target."endian" or null) || (("s390x" == target."arch" or null) || ("powerpc" == target."arch" or null))) && (("arm" == target."arch" or null) || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null)) || ("riscv64" == target."arch" or null) || ((target."rustix_use_experimental_asm" or false) && ("powerpc" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("s390x" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null)) || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null)) || ("x86" == target."arch" or null) || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))));
            features = [ "general" "errno" "ioctl" "no_std" "elf" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [ "event" "fs" "io_uring" "mm" "mount" "net" "param" "pipe" "process" "pty" "rand" "runtime" "shm" "stdio" "system" "termios" "thread" "time" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "io_uring" = [ "event" "fs" "net" "thread" "linux-raw-sys/io_uring" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_5_1" = [ "linux_4_11" ];
          "linux_5_11" = [ "linux_5_1" ];
          "linux_latest" = [ "linux_5_11" ];
          "net" = [ "linux-raw-sys/net" "linux-raw-sys/netlink" "linux-raw-sys/if_ether" "linux-raw-sys/xdp" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "pty" = [ "fs" ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" "compiler_builtins" "linux-raw-sys/rustc-dep-of-std" "bitflags/rustc-dep-of-std" "compiler_builtins?/rustc-dep-of-std" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [ "bitflags/std" "alloc" "libc?/std" "libc_errno?/std" ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [ "libc_errno" "libc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "fs" "std" ];
      };
      "rustls" = rec {
        crateName = "rustls";
        version = "0.23.29";
        edition = "2021";
        description = "Rustls is a modern TLS library written in Rust.";
        sha256 = "1lcvzvzqk8xx8jzg0x5v3mkqgwkwr7v6zdq8zw8rp6xj74h3i494";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" "race" ];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "brotli" = [ "dep:brotli" "dep:brotli-decompressor" "std" ];
          "default" = [ "aws_lc_rs" "logging" "prefer-post-quantum" "std" "tls12" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" "webpki/aws-lc-rs-fips" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "prefer-post-quantum" = [ "aws_lc_rs" ];
          "read_buf" = [ "rustversion" "std" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [ "webpki/std" "pki-types/std" "once_cell/std" ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [ "log" "logging" "ring" "std" "tls12" ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.8.1";
        edition = "2021";
        description = "rustls-native-certs allows rustls to use the platform native certificate store";
        sha256 = "1ls7laa3748mkn23fmi3g4mlwk131lx6chq2lyc8v2mmabfz5kvz";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework 3.2.0";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pemfile" = rec {
        crateName = "rustls-pemfile";
        version = "2.2.0";
        edition = "2018";
        description = "Basic .pem file parser for keys and certificates";
        sha256 = "0l3f3mrfkgdjrava7ibwzgwc4h3dljw3pdkbsi9rkwz3zvji9qyw";
        libName = "rustls_pemfile";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.12.0";
        edition = "2021";
        description = "Shared types for the rustls PKI ecosystem";
        sha256 = "0yawbdpix8jif6s8zj1p2hbyb7y3bj66fhx0y7hyf4qh4964m6i2";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "dep:zeroize" ];
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "web" "web-time" ];
      };
      "rustls-webpki" = rec {
        crateName = "rustls-webpki";
        version = "0.103.4";
        edition = "2021";
        description = "Web PKI X.509 Certificate Verification.";
        sha256 = "1z4jmmgasjgk9glb160a66bshvgifa64mgfjrkqp7dy1w158h5qa";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "dep:aws-lc-rs" "aws-lc-rs/fips" ];
          "aws-lc-rs-unstable" = [ "aws-lc-rs" "aws-lc-rs/unstable" ];
          "default" = [ "std" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ring" "std" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.21";
        edition = "2018";
        description = "Conditional compilation according to rustc compiler version";
        sha256 = "07bb1xx05hhwpnl43sqrhsmxyk5sd5m5baadp19nxp69s9xij3ca";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        description = "Fast floating point to string conversion";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "scale-info" = rec {
        crateName = "scale-info";
        version = "2.11.6";
        edition = "2021";
        description = "Info about SCALE encodable Rust types";
        sha256 = "02sdd1yx0aic804zwwjvys8dxwq8dc2jfnfbm4bhsr52xcr3nsil";
        libName = "scale_info";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "derive_more";
            packageId = "derive_more 1.0.0";
            usesDefaultFeatures = false;
            features = [ "from" ];
          }
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "scale";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "scale-info-derive";
            packageId = "scale-info-derive";
          }
        ];
        features = {
          "bit-vec" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "decode" = [ "scale/full" ];
          "default" = [ "std" ];
          "derive" = [ "scale-info-derive" ];
          "docs" = [ "scale-info-derive/docs" ];
          "scale-info-derive" = [ "dep:scale-info-derive" ];
          "schema" = [ "std" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "bitvec?/std" "scale/std" ];
        };
        resolvedDefaultFeatures = [ "derive" "scale-info-derive" ];
      };
      "scale-info-derive" = rec {
        crateName = "scale-info-derive";
        version = "2.11.6";
        edition = "2021";
        description = "Derive type info for SCALE encodable types";
        sha256 = "1gvyzvqvyzb7fv9waqj284cziflqi2r29d0zp5wj37kkpwj00qy6";
        procMacro = true;
        libName = "scale_info_derive";
        authors = [
          "Parity Technologies <admin@parity.io>"
          "Centrality Developers <support@centrality.ai>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "derive" "visit" "visit-mut" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "docs" ];
        };
      };
      "scc" = rec {
        crateName = "scc";
        version = "2.3.4";
        edition = "2021";
        description = "High-performance containers and utilities for concurrent and asynchronous programming";
        sha256 = "1x1739jz8bx9x46d26aagwin9psykka1siw9fn0lbwi8zdsxgci2";
        authors = [
          "wvwwvwwv <wvwwvwwv@me.com>"
        ];
        dependencies = [
          {
            name = "sdd";
            packageId = "sdd";
          }
        ];
        features = {
          "equivalent" = [ "dep:equivalent" ];
          "loom" = [ "dep:loom" "sdd/loom" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.27";
        edition = "2018";
        description = "Schannel bindings for rust, allowing SSL/TLS (e.g. https) without openssl";
        sha256 = "0gbbhy28v72kd5iina0z2vcdl3vz63mk5idvkzn5r52z6jmfna8z";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_SystemInformation" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        description = "A RAII scope guard that will run a given closure when it goes out of scope,
even if the code between panics (assuming unwinding panic).

Defines the macros `defer!`, `defer_on_unwind!`, `defer_on_success!` as
shorthands for guards with one of the implemented strategies.
";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "sdd" = rec {
        crateName = "sdd";
        version = "3.0.9";
        edition = "2021";
        description = "Scalable lock-free delayed memory reclaimer";
        sha256 = "1d061ar78mncfh3vn1g8gk65lks91rmqb9vb4gymmpdx5dymbxb2";
        authors = [
          "wvwwvwwv <wvwwvwwv@me.com>"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "sec1" = rec {
        crateName = "sec1";
        version = "0.7.3";
        edition = "2021";
        description = "Pure Rust implementation of SEC1: Elliptic Curve Cryptography encoding formats
including ASN.1 DER-serialized private keys as well as the
Elliptic-Curve-Point-to-Octet-String encoding
";
        sha256 = "1p273j8c87pid6a1iyyc7vxbvifrw55wbxgr0dh3l8vnbxb7msfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            optional = true;
            features = [ "oid" ];
          }
          {
            name = "generic-array";
            packageId = "generic-array 0.14.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "pkcs8";
            packageId = "pkcs8";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serdect";
            packageId = "serdect";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "der?/alloc" "pkcs8?/alloc" "zeroize?/alloc" ];
          "default" = [ "der" "point" ];
          "der" = [ "dep:der" "zeroize" ];
          "pem" = [ "alloc" "der/pem" "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "point" = [ "dep:base16ct" "dep:generic-array" ];
          "serde" = [ "dep:serdect" ];
          "std" = [ "alloc" "der?/std" ];
          "subtle" = [ "dep:subtle" ];
          "zeroize" = [ "dep:zeroize" "der?/zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "der" "pem" "pkcs8" "point" "serde" "std" "subtle" "zeroize" ];
      };
      "security-framework 2.11.1" = rec {
        crateName = "security-framework";
        version = "2.11.1";
        edition = "2021";
        description = "Security.framework bindings for macOS and iOS";
        sha256 = "00ldclwx78dm61v7wkach9lcx76awlrv0fdgjdwch4dmy12j4yw9";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" "security-framework-sys/OSX_10_10" ];
          "OSX_10_11" = [ "OSX_10_10" "security-framework-sys/OSX_10_11" ];
          "OSX_10_12" = [ "OSX_10_11" "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" "serial-number-bigint" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "OSX_10_9" = [ "security-framework-sys/OSX_10_9" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "serial-number-bigint" = [ "dep:num-bigint" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_9" "default" ];
      };
      "security-framework 3.2.0" = rec {
        crateName = "security-framework";
        version = "3.2.0";
        edition = "2021";
        description = "Security.framework bindings for macOS and iOS";
        sha256 = "05mkrddi9i18h9p098d0iimqv1xxz0wd8mbgpbvh9jj67x0205r7";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.10.1";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_12" = [ "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "sync-keychain" = [ "OSX_10_13" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_12" "default" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.14.0";
        edition = "2021";
        description = "Apple `Security.framework` low-level FFI bindings";
        sha256 = "0chwn01qrnvs59i5220bymd38iddy4krbnmfnhf4k451aqfj7ns9";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_9" "default" ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        description = "Parser and evaluator for Cargo's flavor of Semantic Versioning";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        description = "A generic serialization/deserialization framework";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "rc" "serde_derive" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        description = "Macros 1.1 implementation of #[derive(Serialize, Deserialize)]";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.140";
        edition = "2021";
        description = "A JSON serialization file format";
        sha256 = "0wwkp4vc20r87081ihj3vpyz5qf7wqkqipq17v99nv6wjrp8n1i0";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "raw_value" "std" "unbounded_depth" ];
      };
      "serde_path_to_error" = rec {
        crateName = "serde_path_to_error";
        version = "0.1.17";
        edition = "2021";
        description = "Path to the element that failed to deserialize";
        sha256 = "0alb447z25dvczd6ll3vfjbf51pypn23mgs5hv8978vzjczv3yjr";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.9";
        edition = "2021";
        description = "Serde-compatible spanned Value";
        sha256 = "18vmxq6qfrm110caszxrzibjhy2s54n1g5w1bshxq9kjmz7y0hdz";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        description = "`x-www-form-urlencoded` meets Serde";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_yaml" = rec {
        crateName = "serde_yaml";
        version = "0.9.34+deprecated";
        edition = "2021";
        description = "YAML data format for Serde";
        sha256 = "0isba1fjyg3l6rxk156k600ilzr8fp7crv82rhal0rxz5qd1m2va";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "unsafe-libyaml";
            packageId = "unsafe-libyaml";
          }
        ];

      };
      "serdect" = rec {
        crateName = "serdect";
        version = "0.2.0";
        edition = "2021";
        description = "Constant-time serde serializer/deserializer helpers for data that potentially
contains secrets (e.g. cryptographic keys)
";
        sha256 = "0xw1b6acw6nd0jchzyxzr97f0s4shbcqh92iyjwln0cskshi8kx8";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base16ct";
            packageId = "base16ct";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "base16ct/alloc" "serde/alloc" ];
          "default" = [ "alloc" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "serial_test" = rec {
        crateName = "serial_test";
        version = "3.2.0";
        edition = "2018";
        description = "Allows for the creation of serialised Rust tests";
        sha256 = "1a8zg87gi28952hzj363ykwd8p1ssrakl1gi3f4xdqa4y84q298v";
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "executor" ];
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            usesDefaultFeatures = false;
          }
          {
            name = "scc";
            packageId = "scc";
            usesDefaultFeatures = false;
          }
          {
            name = "serial_test_derive";
            packageId = "serial_test_derive";
          }
        ];
        features = {
          "async" = [ "dep:futures" "serial_test_derive/async" ];
          "default" = [ "logging" "async" ];
          "docsrs" = [ "dep:document-features" ];
          "file_locks" = [ "dep:fslock" ];
          "logging" = [ "dep:log" ];
          "test_logging" = [ "logging" "dep:env_logger" "serial_test_derive/test_logging" ];
        };
        resolvedDefaultFeatures = [ "async" "default" "logging" ];
      };
      "serial_test_derive" = rec {
        crateName = "serial_test_derive";
        version = "3.2.0";
        edition = "2018";
        description = "Helper crate for serial_test";
        sha256 = "1vwyz2k5kiy5jmba0fvp6ph8ia707801bz918n2ff7bm11d2csax";
        procMacro = true;
        authors = [
          "Tom Parker-Shemilt <palfrey@tevp.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "full" "printing" "parsing" "clone-impls" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "async" "default" ];
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        description = "SHA-1 hash function";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.10.8" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        description = "Pure Rust implementation of the SHA-2 hash function family
including SHA-224, SHA-256, SHA-384, and SHA-512.
";
        workspace_member = null;
        src = builtins.fetchGit {
          url = "https://github.com/sp1-patches/RustCrypto-hashes";
          rev = "1f224388fdede7cef649bce0d63876d1a9e3f515";
          ref = "refs/tags/patch-sha2-0.10.8-sp1-4.0.0";
          submodules = true;
        };
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "oid" "std" ];
      };
      "sha2 0.10.9" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        description = "Pure Rust implementation of the SHA-2 hash function family
including SHA-224, SHA-256, SHA-384, and SHA-512.
";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        description = "Pure Rust implementation of SHA-3, a family of Keccak-based hash functions
including the SHAKE family of eXtendable-Output Functions (XOFs), as well as
the accelerated variant TurboSHAKE
";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sharded-slab" = rec {
        crateName = "sharded-slab";
        version = "0.1.7";
        edition = "2018";
        description = "A lock-free concurrent slab.
";
        sha256 = "1xipjr4nqsgw34k7a2cgj9zaasl2ds6jwn89886kww93d32a637l";
        libName = "sharded_slab";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        description = "Split a string into shell words, like Python's shlex.";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        description = "Backend crate for signal-hook";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature" = rec {
        crateName = "signature";
        version = "2.2.0";
        edition = "2021";
        description = "Traits for cryptographic signature algorithms (e.g. ECDSA, Ed25519)";
        sha256 = "1pi9hd5vqfr3q3k49k37z06p7gs5si0in32qia4mmr1dancr6m3p";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "derive" = [ "dep:derive" ];
          "digest" = [ "dep:digest" ];
          "rand_core" = [ "dep:rand_core" ];
          "std" = [ "alloc" "rand_core?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "digest" "rand_core" "std" ];
      };
      "size" = rec {
        crateName = "size";
        version = "0.4.1";
        edition = "2018";
        description = "A crate for expressing, formatting, and interacting with file sizes";
        sha256 = "0vdxh3h5zjx8zb5sk8fydqvcwzsrzb44yiljif36v1djgx691vcz";
        authors = [
          "Mahmoud Al-Qudsi <mqudsi@neosmart.net>"
          "NeoSmart Technologies"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.10";
        edition = "2018";
        description = "Pre-allocated storage for a uniform data type";
        sha256 = "03f5a9gdp33mngya4qwq2555138pj74pl015scv57wsic5rikp04";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.1";
        edition = "2018";
        description = "'Small vector' optimization: store up to a small number of items on the stack";
        sha256 = "00xxdxxpgyq5vjnpljvkmy99xij5rxgh913ii1v16kzynnivgcb7";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bincode" = [ "dep:bincode" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "impl_bincode" = [ "bincode" "unty" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "unty" = [ "dep:unty" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" "serde" "union" "write" ];
      };
      "snowbridge-amcl" = rec {
        crateName = "snowbridge-amcl";
        version = "1.0.2";
        edition = "2021";
        description = "The Apache Milagro Cryptographic Library (version 3)";
        sha256 = "1r97qkbjbgh5grrlm7l6sppw86dsynji52kyhjww20yz7kb9w2j6";
        libName = "snowbridge_amcl";
        authors = [
          "Nikita Khateev <nikita.khateev@dsr-corporation.com>"
          "Kirk Baird <baird.k@outlook.com>"
        ];
        dependencies = [
          {
            name = "parity-scale-codec";
            packageId = "parity-scale-codec";
            rename = "codec";
            usesDefaultFeatures = false;
            features = [ "derive" "max-encoded-len" ];
          }
          {
            name = "scale-info";
            packageId = "scale-info";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "all" = [ "anssi" "bls24" "bls48" "bls381" "bls383" "bls461" "bn254" "bn254cx" "brainpool" "c25519" "c41417" "ed25519" "fp256bn" "fp512bn" "goldilocks" "hifive" "nist256" "nist384" "nist521" "nums256e" "nums256w" "nums384e" "nums384w" "nums512e" "nums512w" "rsa2048" "rsa3072" "rsa4096" "secp256k1" ];
          "bench" = [ "all" ];
          "default" = [ "std" ];
          "std" = [ "codec/std" "scale-info/std" ];
        };
        resolvedDefaultFeatures = [ "bls381" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.10";
        edition = "2021";
        description = "Utilities for handling networking sockets with a maximal amount of configuration
possible intended.
";
        sha256 = "0y067ki5q946w91xlz2sb175pnfazizva6fi3kfp639mxnmpc8z2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "sp1-build" = rec {
        crateName = "sp1-build";
        version = "5.0.8";
        edition = "2021";
        description = "Build an SP1 program.";
        sha256 = "1fjsdyisxc2z7p3s5rrsscana7yjf1jc32a3vwzg61wmhljnbnc8";
        libName = "sp1_build";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "cargo_metadata";
            packageId = "cargo_metadata";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "clock" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "env" ];
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "sp1-prover";
            packageId = "sp1-prover";
          }
        ];

      };
      "sp1-core-executor" = rec {
        crateName = "sp1-core-executor";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "1k82ykdhb8mjl08vjb8h0b992mg69jrig0zv68ra0fhy8z2k8vmm";
        libName = "sp1_core_executor";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "elf";
            packageId = "elf";
          }
          {
            name = "enum-map";
            packageId = "enum-map";
            features = [ "serde" ];
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "range-set-blaze";
            packageId = "range-set-blaze";
          }
          {
            name = "rrs-succinct";
            packageId = "rrs-succinct";
            rename = "rrs_lib";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp1-curves";
            packageId = "sp1-curves";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "strum";
            packageId = "strum";
            features = [ "derive" ];
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "subenum";
            packageId = "subenum";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tiny-keccak";
            packageId = "tiny-keccak";
            features = [ "keccak" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
            features = [ "serde" ];
          }
        ];
        features = {
          "bigint-rug" = [ "sp1-curves/bigint-rug" ];
          "profiling" = [ "dep:goblin" "dep:rustc-demangle" "dep:gecko_profile" "dep:indicatif" ];
        };
      };
      "sp1-core-machine" = rec {
        crateName = "sp1-core-machine";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        links = "sp1-core-machine-sys";
        sha256 = "05lzyrb80kh67s0pqs6kikg2j1l6d21cc0bd961k5cp5pi53wqr4";
        libName = "sp1_core_machine";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
          }
          {
            name = "generic-array";
            packageId = "generic-array 1.1.0";
            features = [ "alloc" "serde" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "k256";
            packageId = "k256";
            features = [ "expose-field" ];
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "p256";
            packageId = "p256";
            features = [ "expose-field" ];
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-keccak-air";
            packageId = "p3-keccak-air";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-uni-stark";
            packageId = "p3-uni-stark";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "rayon-scan";
            packageId = "rayon-scan";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "size";
            packageId = "size";
          }
          {
            name = "snowbridge-amcl";
            packageId = "snowbridge-amcl";
            rename = "amcl";
            usesDefaultFeatures = false;
            features = [ "bls381" ];
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-curves";
            packageId = "sp1-curves";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-forest";
            packageId = "tracing-forest";
            features = [ "ansi" "smallvec" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "std" "env-filter" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
        ];
        buildDependencies = [
          {
            name = "cbindgen";
            packageId = "cbindgen";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "pathdiff";
            packageId = "pathdiff";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
        ];
        devDependencies = [
          {
            name = "num";
            packageId = "num";
            features = [ "rand" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "bigint-rug" = [ "sp1-curves/bigint-rug" ];
          "default" = [ "sys" ];
        };
        resolvedDefaultFeatures = [ "default" "sys" ];
      };
      "sp1-cuda" = rec {
        crateName = "sp1-cuda";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "1546zghmsh33ll4gaf8m84rks7vr7sfp8svlhh8j01q7nl4n5mfk";
        libName = "sp1_cuda";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "ctrlc";
            packageId = "ctrlc";
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-prover";
            packageId = "sp1-prover";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "twirp-rs";
            packageId = "twirp-rs";
            rename = "twirp";
          }
        ];
        features = {
          "protobuf" = [ "dep:prost-build" "dep:twirp-build" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "sp1-curves" = rec {
        crateName = "sp1-curves";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "0w8w2lrfnpmv1gsjjxhb02zd4in3q3nn4hlr3zcxf9bdmlnahh9z";
        libName = "sp1_curves";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashu";
            packageId = "dashu";
          }
          {
            name = "elliptic-curve";
            packageId = "elliptic-curve";
          }
          {
            name = "generic-array";
            packageId = "generic-array 1.1.0";
            features = [ "alloc" "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "k256";
            packageId = "k256";
            features = [ "expose-field" ];
          }
          {
            name = "num";
            packageId = "num";
          }
          {
            name = "p256";
            packageId = "p256";
            features = [ "expose-field" ];
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "snowbridge-amcl";
            packageId = "snowbridge-amcl";
            rename = "amcl";
            usesDefaultFeatures = false;
            features = [ "bls381" ];
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        devDependencies = [
          {
            name = "num";
            packageId = "num";
            features = [ "rand" ];
          }
        ];
        features = {
          "bigint-rug" = [ "rug" ];
          "rug" = [ "dep:rug" ];
        };
      };
      "sp1-derive" = rec {
        crateName = "sp1-derive";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "1yqfr6j0lb3wrbz018xc6cmygymxan0cjdmxiwyn7475h70hmkdq";
        procMacro = true;
        libName = "sp1_derive";
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "sp1-lib" = rec {
        crateName = "sp1-lib";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "0k0j10g0gs2rxj746bhrinavzp1bkbfx4x3ylgdgrh21hwynxfvz";
        libName = "sp1_lib";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
        ];
        features = {
          "default" = [ "ecdsa" ];
          "ecdsa" = [ "dep:elliptic-curve" ];
        };
      };
      "sp1-primitives" = rec {
        crateName = "sp1-primitives";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "0ppj91r96mapfcn8r9kny72x2nipxgavcqc8byc79kmc0fcbxlm4";
        libName = "sp1_primitives";
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "blake3";
            packageId = "blake3";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];

      };
      "sp1-prover" = rec {
        crateName = "sp1-prover";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        crateBin = [];
        sha256 = "1zwnjf9azb6lrpcaad27fxsi99j8qgf00aa78l86rlrcnjr3pynm";
        libName = "sp1_prover";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" "env" ];
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "enum-map";
            packageId = "enum-map";
          }
          {
            name = "eyre";
            packageId = "eyre";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "inline-more" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "lru";
            packageId = "lru 0.12.5";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "serial_test";
            packageId = "serial_test";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-circuit";
            packageId = "sp1-recursion-circuit";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
          }
          {
            name = "sp1-recursion-gnark-ffi";
            packageId = "sp1-recursion-gnark-ffi";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-appender";
            packageId = "tracing-appender";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        buildDependencies = [
          {
            name = "downloader";
            packageId = "downloader";
            usesDefaultFeatures = false;
            features = [ "rustls-tls" "verify" ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];
        features = {
          "debug" = [ "sp1-core-machine/debug" ];
          "native-gnark" = [ "sp1-recursion-gnark-ffi/native" ];
        };
      };
      "sp1-recursion-circuit" = rec {
        crateName = "sp1-recursion-circuit";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "0g8vgidcdnc63hyklv38jm0hlgm5z1n6dlxqxr4053asis1mywjf";
        libName = "sp1_recursion_circuit";
        dependencies = [
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-uni-stark";
            packageId = "p3-uni-stark";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
          }
          {
            name = "sp1-recursion-gnark-ffi";
            packageId = "sp1-recursion-gnark-ffi";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "debug" = [ "sp1-core-machine/debug" "sp1-recursion-compiler/debug" ];
          "native-gnark" = [ "sp1-recursion-gnark-ffi/native" ];
        };
      };
      "sp1-recursion-compiler" = rec {
        crateName = "sp1-recursion-compiler";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "08k8qvnrgz78l4awhxfzldcp1icsk6p6l9br66rhk7s224pv285k";
        libName = "sp1_recursion_compiler";
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-recursion-core";
            packageId = "sp1-recursion-core";
          }
          {
            name = "sp1-recursion-derive";
            packageId = "sp1-recursion-derive";
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
        ];
        features = {
          "debug" = [ "sp1-recursion-core/debug" "dep:backtrace" ];
          "default" = [ "debug" ];
        };
        resolvedDefaultFeatures = [ "debug" "default" ];
      };
      "sp1-recursion-core" = rec {
        crateName = "sp1-recursion-core";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        links = "sp1-recursion-core-sys";
        sha256 = "07g7iflij2ncg1gnq357bslcf454274kpmxvh95q2iyc6rp2qaj7";
        libName = "sp1_recursion_core";
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            features = [ "serde" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "ff";
            packageId = "ff 0.13.1";
            features = [ "derive" "derive_bits" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-bn254-fr";
            packageId = "p3-bn254-fr";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" "rc" ];
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "vec_map";
            packageId = "vec_map";
          }
          {
            name = "zkhash";
            packageId = "zkhash";
          }
        ];
        buildDependencies = [
          {
            name = "cbindgen";
            packageId = "cbindgen";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "pathdiff";
            packageId = "pathdiff";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
        ];
        features = {
          "default" = [ "sys" ];
          "program_validation" = [ "dep:range-set-blaze" "dep:smallvec" ];
          "sys" = [ "sp1-core-machine/sys" ];
        };
        resolvedDefaultFeatures = [ "debug" "default" "sys" ];
      };
      "sp1-recursion-derive" = rec {
        crateName = "sp1-recursion-derive";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "1753m7c65zs25miaz6q9m1n0ji4x6q1riqmibwlb3dbpf73kpd5p";
        procMacro = true;
        libName = "sp1_recursion_derive";
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "sp1-recursion-gnark-ffi" = rec {
        crateName = "sp1-recursion-gnark-ffi";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "0mr8jy9242yvc3zbbnpwhj2qnbx8ymhjxb02pjrik4xd4b3lh3yb";
        libName = "sp1_recursion_gnark_ffi";
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-recursion-compiler";
            packageId = "sp1-recursion-compiler";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        buildDependencies = [
          {
            name = "bindgen";
            packageId = "bindgen";
          }
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
        };
      };
      "sp1-sdk" = rec {
        crateName = "sp1-sdk";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "18b1rws60npblyb8l42pplv4xzsf28kr92nadl5mrxdixz2p6vxv";
        libName = "sp1_sdk";
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 1.2.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "k256" "serde" ];
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "backoff";
            packageId = "backoff";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dirs";
            packageId = "dirs";
          }
          {
            name = "eventsource-stream";
            packageId = "eventsource-stream";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "k256";
            packageId = "k256";
            features = [ "serde" ];
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rustls-tls" "trust-dns" "stream" "json" ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sp1-build";
            packageId = "sp1-build";
          }
          {
            name = "sp1-core-executor";
            packageId = "sp1-core-executor";
          }
          {
            name = "sp1-core-machine";
            packageId = "sp1-core-machine";
          }
          {
            name = "sp1-cuda";
            packageId = "sp1-cuda";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "sp1-prover";
            packageId = "sp1-prover";
          }
          {
            name = "sp1-stark";
            packageId = "sp1-stark";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "full" ];
          }
          {
            name = "tonic";
            packageId = "tonic";
            optional = true;
            features = [ "tls" "tls-roots" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "twirp-rs";
            packageId = "twirp-rs";
            rename = "twirp";
            optional = true;
          }
        ];
        features = {
          "bigint-rug" = [ "sp1-core-machine/bigint-rug" ];
          "default" = [ "network" ];
          "native-gnark" = [ "sp1-prover/native-gnark" ];
          "network" = [ "dep:prost" "dep:alloy-primitives" "dep:tokio" "dep:reqwest" "dep:twirp" "dep:reqwest-middleware" "dep:tonic" "dep:backoff" ];
          "profiling" = [ "sp1-core-executor/profiling" ];
          "sepolia" = [ "network" "dep:alloy-sol-types" ];
        };
        resolvedDefaultFeatures = [ "default" "network" ];
      };
      "sp1-stark" = rec {
        crateName = "sp1-stark";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "104gxbshidsl2drs5vcz6m602lnrcxd0asp4l8s6pcx52ck3jq0f";
        libName = "sp1_stark";
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            features = [ "serde" "inline-more" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "p3-air";
            packageId = "p3-air";
          }
          {
            name = "p3-baby-bear";
            packageId = "p3-baby-bear";
          }
          {
            name = "p3-challenger";
            packageId = "p3-challenger";
          }
          {
            name = "p3-commit";
            packageId = "p3-commit";
          }
          {
            name = "p3-dft";
            packageId = "p3-dft";
          }
          {
            name = "p3-field";
            packageId = "p3-field";
          }
          {
            name = "p3-fri";
            packageId = "p3-fri";
          }
          {
            name = "p3-matrix";
            packageId = "p3-matrix";
          }
          {
            name = "p3-maybe-rayon";
            packageId = "p3-maybe-rayon";
            features = [ "parallel" ];
          }
          {
            name = "p3-merkle-tree";
            packageId = "p3-merkle-tree";
          }
          {
            name = "p3-poseidon2";
            packageId = "p3-poseidon2";
          }
          {
            name = "p3-symmetric";
            packageId = "p3-symmetric";
          }
          {
            name = "p3-uni-stark";
            packageId = "p3-uni-stark";
          }
          {
            name = "p3-util";
            packageId = "p3-util";
          }
          {
            name = "rayon-scan";
            packageId = "rayon-scan";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "sp1-derive";
            packageId = "sp1-derive";
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
          {
            name = "strum";
            packageId = "strum";
          }
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
          {
            name = "sysinfo";
            packageId = "sysinfo";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];

      };
      "sp1-zkvm" = rec {
        crateName = "sp1-zkvm";
        version = "5.0.8";
        edition = "2021";
        description = "SP1 is a performant, 100% open-source, contributor-friendly zkVM.";
        sha256 = "1l2zbrzwhxzwv9vf7frci5jcp6sr4qbwlkjbd3kays22l0d48djx";
        libName = "sp1_zkvm";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            rename = "getrandom_v2";
            features = [ "custom" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            rename = "getrandom_v3";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libm";
            packageId = "libm";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sp1-lib";
            packageId = "sp1-lib";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sp1-primitives";
            packageId = "sp1-primitives";
          }
        ];
        features = {
          "blake3" = [ "dep:blake3" ];
          "default" = [ "libm" "lib" ];
          "embedded" = [ "dep:embedded-alloc" "dep:critical-section" ];
          "lib" = [ "dep:sp1-lib" ];
          "libm" = [ "dep:libm" ];
          "verify" = [ "dep:p3-baby-bear" "dep:p3-field" "sp1-lib/verify" ];
        };
        resolvedDefaultFeatures = [ "default" "lib" "libm" ];
      };
      "spin" = rec {
        crateName = "spin";
        version = "0.9.8";
        edition = "2015";
        description = "Spin-based synchronization primitives";
        sha256 = "0rvam5r0p3a6qhc18scqpvpgb3ckzyqxpgdfyjnghh8ja7byi039";
        authors = [
          "Mathijs van de Nes <git@mathijs.vd-nes.nl>"
          "John Ericson <git@JohnEricson.me>"
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
            rename = "lock_api_crate";
            optional = true;
          }
        ];
        features = {
          "barrier" = [ "mutex" ];
          "default" = [ "lock_api" "mutex" "spin_mutex" "rwlock" "once" "lazy" "barrier" ];
          "fair_mutex" = [ "mutex" ];
          "lazy" = [ "once" ];
          "lock_api" = [ "lock_api_crate" ];
          "lock_api_crate" = [ "dep:lock_api_crate" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "portable_atomic" = [ "portable-atomic" ];
          "spin_mutex" = [ "mutex" ];
          "ticket_mutex" = [ "mutex" ];
          "use_ticket_mutex" = [ "mutex" "ticket_mutex" ];
        };
        resolvedDefaultFeatures = [ "barrier" "default" "lazy" "lock_api" "lock_api_crate" "mutex" "once" "rwlock" "spin_mutex" ];
      };
      "spki" = rec {
        crateName = "spki";
        version = "0.7.3";
        edition = "2021";
        description = "X.509 Subject Public Key Info (RFC5280) describing public keys as well as their
associated AlgorithmIdentifiers (i.e. OIDs)
";
        sha256 = "17fj8k5fmx4w9mp27l970clrh5qa7r5sjdvbsln987xhb34dc7nr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "base64ct";
            packageId = "base64ct";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "der";
            packageId = "der";
            features = [ "oid" ];
          }
        ];
        features = {
          "alloc" = [ "base64ct?/alloc" "der/alloc" ];
          "arbitrary" = [ "std" "dep:arbitrary" "der/arbitrary" ];
          "base64" = [ "dep:base64ct" ];
          "fingerprint" = [ "sha2" ];
          "pem" = [ "alloc" "der/pem" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "der/std" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "pem" "std" ];
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        description = "An unsafe marker trait for types like Box and Rc that dereference to a stable address even when moved, and hence can be used with libraries such as owning_ref and rental.
";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        description = "Compile-time assertions to ensure that invariants are met.";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        description = "Implementations of string similarity metrics. Includes Hamming, Levenshtein,
OSA, Damerau-Levenshtein, Jaro, Jaro-Winkler, and Sørensen-Dice.
";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        description = "Helpful macros for working with enums and strings";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "std" "strum_macros" ];
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        description = "Helpful macros for working with enums and strings";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "parsing" "extra-traits" ];
          }
        ];

      };
      "subenum" = rec {
        crateName = "subenum";
        version = "1.1.2";
        edition = "2021";
        description = "A proc-macro to create subsets of enums, that can be converted
  to and from.";
        sha256 = "1kwfy4lrp7mppybz2sxpcw62pay8xaxiiqxmgl0h9panhpxmspag";
        procMacro = true;
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "std" "error_trait" "strum/std" ];
        };
        resolvedDefaultFeatures = [ "default" "error_trait" "std" ];
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        description = "Pure-Rust traits and utilities for constant-time cryptographic implementations.";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        description = "Parser for Rust source code";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.104" = rec {
        crateName = "syn";
        version = "2.0.104";
        edition = "2021";
        description = "Parser for Rust source code";
        sha256 = "0h2s8cxh5dsh9h41dxnlzpifqqn59cqgm0kljawws61ljq2zgdhp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "syn-solidity" = rec {
        crateName = "syn-solidity";
        version = "0.8.25";
        edition = "2021";
        description = "syn-powered Solidity parser";
        sha256 = "04llmhmn2mrcf08bicwdcrak8740sqz81k5mix5bj539plzm6q25";
        libName = "syn_solidity";
        authors = [
          "Alloy Contributors"
        ];
        dependencies = [
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "visit" "visit-mut" ];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "1.0.2";
        edition = "2021";
        description = "A tool for enlisting the compiler's help in proving the absence of concurrency";
        sha256 = "0qvjyasd6w18mjg5xlaq5jgy84jsjfsvmnn12c13gypxbv75dwhb";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "futures" "futures-core" ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.2";
        edition = "2018";
        description = "Helper methods and macros for custom derives";
        sha256 = "1lh9lx3r3jb18f8sbj29am5hm9jymvbwh6jb1izsnnxgvgrp12kj";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "sysinfo" = rec {
        crateName = "sysinfo";
        version = "0.30.13";
        edition = "2018";
        description = "Library to get system information such as processes, CPUs, disks, components and networks";
        sha256 = "1csbkx1hdlacgzw5ynjyfvgc1xg58w3h1rgh5gm2pysmxvd4snqa";
        authors = [
          "Guillaume Gomez <guillaume1.gomez@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("unknown" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "ntapi";
            packageId = "ntapi";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null) || ("android" == target."os" or null));
          }
          {
            name = "rayon";
            packageId = "rayon";
            optional = true;
          }
          {
            name = "windows";
            packageId = "windows";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32_Foundation" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_NetManagement" "Win32_NetworkManagement_Ndis" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage_FileSystem" "Win32_System_Com" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_LibraryLoader" "Win32_System_Kernel" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI_Shell" ];
          }
        ];
        features = {
          "apple-app-store" = [ "apple-sandbox" ];
          "debug" = [ "libc/extra_traits" ];
          "default" = [ "multithread" ];
          "multithread" = [ "rayon" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "multithread" "rayon" ];
      };
      "system-configuration" = rec {
        crateName = "system-configuration";
        version = "0.6.1";
        edition = "2021";
        description = "Bindings to SystemConfiguration framework for macOS";
        sha256 = "0sxslml567zm0v8g732314vd2gk9sd3k4xj22xk6p64xir29v1rw";
        libName = "system_configuration";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
          }
          {
            name = "system-configuration-sys";
            packageId = "system-configuration-sys";
          }
        ];

      };
      "system-configuration-sys" = rec {
        crateName = "system-configuration-sys";
        version = "0.6.0";
        edition = "2021";
        description = "Low level bindings to SystemConfiguration framework for macOS";
        sha256 = "1i5sqrmgy58l4704hibjbl36hclddglh73fb3wx95jnmrq81n7cf";
        libName = "system_configuration_sys";
        authors = [
          "Mullvad VPN"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "tap" = rec {
        crateName = "tap";
        version = "1.0.1";
        edition = "2015";
        description = "Generic extensions for tapping values in Rust";
        sha256 = "0sc3gl4nldqpvyhqi3bbd0l9k7fngrcl4zs47n314nqqk4bpx4sm";
        authors = [
          "Elliott Linder <elliott.darfink@gmail.com>"
          "myrrlyn <self@myrrlyn.dev>"
        ];

      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.20.0";
        edition = "2021";
        description = "A library for managing temporary files and directories.";
        sha256 = "18fnp7mjckd9c9ldlb2zhp1hd4467y2hpvx9l50j97rlhlwlx9p8";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Storage_FileSystem" "Win32_Foundation" ];
          }
        ];
        features = {
          "default" = [ "getrandom" ];
          "getrandom" = [ "dep:getrandom" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" ];
      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        description = "derive(Error)";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        description = "derive(Error)";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        description = "Implementation detail of the `thiserror` crate";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        description = "Implementation detail of the `thiserror` crate";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.9";
        edition = "2021";
        description = "Per-object thread-local storage";
        sha256 = "1191jvl8d63agnq06pcnarivf63qzgpws5xa33hgc92gjjj4c0pn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
        };
      };
      "threadpool" = rec {
        crateName = "threadpool";
        version = "1.8.1";
        edition = "2015";
        description = "A thread pool for running a number of jobs on a fixed set of worker threads.
";
        sha256 = "1amgfyzvynbm8pacniivzq9r0fh3chhs7kijic81j76l6c5ycl6h";
        authors = [
          "The Rust Project Developers"
          "Corey Farwell <coreyf@rwell.org>"
          "Stefan Schindler <dns2utf8@estada.ch>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.3.41";
        edition = "2021";
        description = "Date and time library. Fully interoperable with the standard library. Mostly compatible with #![no_std].";
        sha256 = "0h0cpiyya8cjlrh00d2r72bmgg4lsdcncs76qpwy0rn2kghijxla";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "formatting" "parsing" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.4";
        edition = "2021";
        description = "This crate is an implementation detail and should not be relied upon directly.";
        sha256 = "0z5h9fknvdvbs2k2s1chpi3ab3jvgkfhdnqwrvixjngm263s7sf9";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.22";
        edition = "2021";
        description = "    Procedural macros for the time crate.
    This crate is an implementation detail and should not be relied upon directly.
";
        sha256 = "0jcaxpw220han2bzbrdlpqhy1s5k9i8ri3lw6n5zv4zcja9p69im";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" ];
      };
      "tiny-keccak" = rec {
        crateName = "tiny-keccak";
        version = "2.0.2";
        edition = "2018";
        description = "An implementation of Keccak derived functions.";
        sha256 = "0dq2x0hjffmixgyf6xv9wgsbcxkd65ld0wrfqmagji8a829kg79c";
        libName = "tiny_keccak";
        authors = [
          "debris <marek.kotewicz@gmail.com>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "fips202" = [ "keccak" "shake" "sha3" ];
          "kmac" = [ "cshake" ];
          "parallel_hash" = [ "cshake" ];
          "sp800" = [ "cshake" "kmac" "tuple_hash" ];
          "tuple_hash" = [ "cshake" ];
        };
        resolvedDefaultFeatures = [ "default" "keccak" ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.8.1";
        edition = "2021";
        description = "A small ASCII-only bounded length string representation.";
        sha256 = "12sc6h3hnn6x78iycm5v6wrs2xhxph0ydm43yyn7gdfw8l8nsksx";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "zerovec" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        description = "`tinyvec` provides 100% safe vec-like data structures.";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "generic-array" = [ "dep:generic-array" ];
          "latest_stable_rust" = [ "rustc_1_61" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        description = "Some macros for tiny containers";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.46.1";
        edition = "2021";
        description = "An event-driven, non-blocking I/O platform for writing asynchronous I/O
backed applications.
";
        sha256 = "05sxldy7kcgysnxyzz1h1l8j3d9mjyqfh7r48ni27gmg9lsa5hqc";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "io-uring";
            packageId = "io-uring";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "mio";
            packageId = "mio";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
            features = [ "os-poll" "os-ext" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        description = "Tokio's proc macros.
";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "tokio-native-tls" = rec {
        crateName = "tokio-native-tls";
        version = "0.3.1";
        edition = "2018";
        description = "An implementation of TLS/SSL streams for Tokio using native-tls giving an implementation of TLS
for nonblocking I/O streams.
";
        sha256 = "1wkfg6zn85zckmv4im7mv20ca6b1vmlib5xwz9p7g19wjfmpdbmv";
        libName = "tokio_native_tls";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "native-tls";
            packageId = "native-tls";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "rt" "rt-multi-thread" "io-util" "net" ];
          }
        ];
        features = {
          "vendored" = [ "native-tls/vendored" ];
        };
      };
      "tokio-rustls" = rec {
        crateName = "tokio-rustls";
        version = "0.26.2";
        edition = "2021";
        description = "Asynchronous TLS/SSL streams for Tokio using Rustls.";
        sha256 = "16wf007q3584j46wc4s0zc4szj6280g23hka6x6bgs50l4v7nwlf";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "logging" "tls12" "aws_lc_rs" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "logging" "ring" "tls12" ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        description = "Utilities to work with `Stream` and `tokio`.
";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [ "time" "net" "io-util" "fs" "sync" "signal" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "net" "time" ];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.15";
        edition = "2021";
        description = "Additional utilities for working with Tokio.
";
        sha256 = "1pypd9lm1fdnpw0779pqvc16qqrxjy63dgfm20ajhpbdmnlkk9b6";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "io" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.8.23";
        edition = "2021";
        description = "A native Rust encoder and decoder of TOML-formatted files and streams. Provides
implementations of the standard Serialize/Deserialize traits for TOML data to
facilitate deserializing and serializing Rust structures.
";
        sha256 = "0qnkrq4lm2sdhp3l6cb6f26i8zbnhqb7mhbmksd550wxdfcyn6yw";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.27";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" "toml_edit?/display" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" "toml_edit?/parse" ];
          "preserve_order" = [ "indexmap" ];
          "unbounded" = [ "toml_edit?/unbounded" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.11";
        edition = "2021";
        description = "A TOML-compatible datetime type";
        sha256 = "077ix2hb1dcya49hmi1avalwbixmrs75zgzb3b2i7g2gizwdmk92";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        description = "Yet another format-preserving TOML parser.";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.22.27" = rec {
        crateName = "toml_edit";
        version = "0.22.27";
        edition = "2021";
        description = "Yet another format-preserving TOML parser.";
        sha256 = "16l15xm40404asih8vyjvnka9g0xs9i4hfb6ry3ph9g419k8rzj1";
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap 2.10.0";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "toml_write";
            packageId = "toml_write";
            optional = true;
          }
          {
            name = "winnow";
            packageId = "winnow 0.7.12";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
          "unstable-debug" = [ "winnow?/debug" ];
        };
        resolvedDefaultFeatures = [ "display" "parse" "serde" ];
      };
      "toml_write" = rec {
        crateName = "toml_write";
        version = "0.1.2";
        edition = "2021";
        description = "A low-level interface for writing out TOML
";
        sha256 = "008qlhqlqvljp1gpp9rn5cqs74gwvdgbvs92wnpq8y3jlz4zi6ax";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "tonic" = rec {
        crateName = "tonic";
        version = "0.12.3";
        edition = "2021";
        description = "A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.
";
        sha256 = "0ljd1lfjpw0vrm5wbv15x6nq2i38llsanls5rkzmdn2n0wrmnz47";
        authors = [
          "Lucio Franco <luciofranco14@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-stream";
            packageId = "async-stream";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
            optional = true;
          }
          {
            name = "axum";
            packageId = "axum";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "h2";
            packageId = "h2";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            optional = true;
            features = [ "http1" "http2" ];
          }
          {
            name = "hyper-timeout";
            packageId = "hyper-timeout";
            optional = true;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            optional = true;
            features = [ "tokio" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "pin-project";
            packageId = "pin-project";
          }
          {
            name = "prost";
            packageId = "prost";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            optional = true;
          }
          {
            name = "rustls-pemfile";
            packageId = "rustls-pemfile";
            optional = true;
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "logging" "tls12" "ring" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "macros" ];
          }
          {
            name = "tower";
            packageId = "tower 0.4.13";
            features = [ "full" ];
          }
        ];
        features = {
          "channel" = [ "dep:hyper" "hyper?/client" "dep:hyper-util" "hyper-util?/client-legacy" "dep:tower" "tower?/balance" "tower?/buffer" "tower?/discover" "tower?/limit" "tower?/util" "dep:tokio" "tokio?/time" "dep:hyper-timeout" ];
          "codegen" = [ "dep:async-trait" ];
          "default" = [ "transport" "codegen" "prost" ];
          "gzip" = [ "dep:flate2" ];
          "prost" = [ "dep:prost" ];
          "router" = [ "dep:axum" "dep:tower" "tower?/util" ];
          "server" = [ "router" "dep:async-stream" "dep:h2" "dep:hyper" "hyper?/server" "dep:hyper-util" "hyper-util?/service" "hyper-util?/server-auto" "dep:socket2" "dep:tokio" "tokio?/macros" "tokio?/net" "tokio?/time" "tokio-stream/net" "dep:tower" "tower?/util" "tower?/limit" ];
          "tls" = [ "dep:rustls-pemfile" "dep:tokio-rustls" "dep:tokio" "tokio?/rt" "tokio?/macros" ];
          "tls-native-roots" = [ "tls" "channel" "dep:rustls-native-certs" ];
          "tls-roots" = [ "tls-native-roots" ];
          "tls-webpki-roots" = [ "tls" "channel" "dep:webpki-roots" ];
          "transport" = [ "server" "channel" ];
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "channel" "codegen" "default" "prost" "router" "server" "tls" "tls-native-roots" "tls-roots" "transport" ];
      };
      "tower 0.4.13" = rec {
        crateName = "tower";
        version = "0.4.13";
        edition = "2018";
        description = "Tower is a library of modular and reusable components for building robust
clients and servers.
";
        sha256 = "073wncyqav4sak1p755hf6vl66njgfc1z1g1di9rxx3cvvh9pymq";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "indexmap";
            packageId = "indexmap 1.9.3";
            optional = true;
          }
          {
            name = "pin-project";
            packageId = "pin-project";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
            features = [ "small_rng" ];
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "rand" "slab" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "default" = [ "log" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project" = [ "dep:pin-project" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "rand" = [ "dep:rand" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project" ];
        };
        resolvedDefaultFeatures = [ "__common" "balance" "buffer" "discover" "futures-core" "futures-util" "indexmap" "limit" "load" "make" "pin-project" "pin-project-lite" "rand" "ready-cache" "slab" "tokio" "tokio-util" "tracing" "util" ];
      };
      "tower 0.5.2" = rec {
        crateName = "tower";
        version = "0.5.2";
        edition = "2018";
        description = "Tower is a library of modular and reusable components for building robust
clients and servers.
";
        sha256 = "1ybmd59nm4abl9bsvy6rx31m4zvzp5rja2slzpn712y9b68ssffh";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "slab" "util" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" "util" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "sync_wrapper" = [ "dep:sync_wrapper" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project-lite" "sync_wrapper" ];
        };
        resolvedDefaultFeatures = [ "__common" "futures-core" "futures-util" "log" "make" "pin-project-lite" "sync_wrapper" "timeout" "tokio" "tracing" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.6.6";
        edition = "2018";
        description = "Tower middleware and utilities for HTTP clients and servers";
        sha256 = "1wh51y4rf03f91c6rvli6nwzsarx7097yx6sqlm75ag27pbjzj5d";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body";
            packageId = "http-body";
            optional = true;
          }
          {
            name = "iri-string";
            packageId = "iri-string";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            features = [ "buffer" "util" "retry" "make" "timeout" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" "validate-request" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" "dep:http-body" "dep:http-body-util" ];
          "compression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" "compression-zstd" ];
          "compression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd" ];
          "decompression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "follow-redirect" = [ "futures-util" "dep:http-body" "iri-string" "tower/util" ];
          "fs" = [ "futures-core" "futures-util" "dep:http-body" "dep:http-body-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "limit" = [ "dep:http-body" "dep:http-body-util" ];
          "metrics" = [ "dep:http-body" "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "dep:http-body" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "dep:http-body" "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "follow-redirect" "futures-util" "iri-string" "tower" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        description = "Decorates a `Service` to allow easy composition between `Service`s.
";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        description = "Trait representing an asynchronous, request / response based, client or server.
";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        description = "Application-level tracing for Rust.
";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "attributes" "default" "log" "std" "tracing-attributes" ];
      };
      "tracing-appender" = rec {
        crateName = "tracing-appender";
        version = "0.2.3";
        edition = "2018";
        description = "Provides utilities for file appenders and making non-blocking writers.
";
        sha256 = "1kq69qyjvb4dxch5c9zgii6cqhy9nkk81z0r4pj3y2nc537fhrim";
        libName = "tracing_appender";
        authors = [
          "Zeki Sherif <zekshi@amazon.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "time";
            packageId = "time";
            usesDefaultFeatures = false;
            features = [ "formatting" "parsing" ];
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            usesDefaultFeatures = false;
            features = [ "fmt" "std" ];
          }
        ];
        features = {
          "parking_lot" = [ "dep:parking_lot" ];
        };
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.30";
        edition = "2018";
        description = "Procedural macro attributes for automatically instrumenting functions.
";
        sha256 = "00v9bhfgfg3v101nmmy7s3vdwadb7ngc8c1iw6wai9vj9sv3lf41";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "full" "parsing" "printing" "visit-mut" "clone-impls" "extra-traits" "proc-macro" ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.34";
        edition = "2018";
        description = "Core primitives for application-level tracing.
";
        sha256 = "0y3nc4mpnr79rzkrcylv5f5bnjjp19lsxwis9l4kzs97ya0jbldr";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "valuable";
            packageId = "valuable";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."tracing_unstable" or false);
          }
        ];
        features = {
          "default" = [ "std" "valuable?/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "default" "once_cell" "std" ];
      };
      "tracing-forest" = rec {
        crateName = "tracing-forest";
        version = "0.1.6";
        edition = "2018";
        description = "Preserving contextual coherence among trace data from concurrent tasks";
        sha256 = "0bsr88f4shanjr86ajrx9p8dmsfxxmr24a8llhxixpadn5fq6h7f";
        libName = "tracing_forest";
        authors = [
          "Quinn Okabayashi"
        ];
        dependencies = [
          {
            name = "ansi_term";
            packageId = "ansi_term";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "write" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
          }
        ];
        features = {
          "ansi" = [ "ansi_term" ];
          "ansi_term" = [ "dep:ansi_term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" ];
          "env-filter" = [ "tracing-subscriber/env-filter" ];
          "full" = [ "uuid" "chrono" "smallvec" "tokio" "serde" "env-filter" "ansi" ];
          "serde" = [ "dep:serde" ];
          "smallvec" = [ "dep:smallvec" ];
          "tokio" = [ "dep:tokio" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "ansi" "ansi_term" "default" "smallvec" ];
      };
      "tracing-log" = rec {
        crateName = "tracing-log";
        version = "0.2.0";
        edition = "2018";
        description = "Provides compatibility between `tracing` and the `log` crate.
";
        sha256 = "1hs77z026k730ij1a9dhahzrl0s073gfa2hm5p0fbl0b80gmz1gf";
        libName = "tracing_log";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "default" = [ "log-tracer" "std" ];
          "interest-cache" = [ "lru" "ahash" ];
          "lru" = [ "dep:lru" ];
          "std" = [ "log/std" ];
        };
        resolvedDefaultFeatures = [ "log-tracer" "std" ];
      };
      "tracing-subscriber" = rec {
        crateName = "tracing-subscriber";
        version = "0.3.19";
        edition = "2018";
        description = "Utilities for implementing and composing `tracing` subscribers.
";
        sha256 = "0220rignck8072i89jjsh140vmh14ydwpdwnifyaf3xcnpn9s678";
        libName = "tracing_subscriber";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <me@davidbarsky.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "matchers";
            packageId = "matchers";
            optional = true;
          }
          {
            name = "nu-ansi-term";
            packageId = "nu-ansi-term";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "unicode-case" "unicode-perl" ];
          }
          {
            name = "sharded-slab";
            packageId = "sharded-slab";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
          }
          {
            name = "thread_local";
            packageId = "thread_local";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "log-tracer" "std" ];
          }
        ];
        devDependencies = [
          {
            name = "regex";
            packageId = "regex";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "tracing-log";
            packageId = "tracing-log";
          }
        ];
        features = {
          "ansi" = [ "fmt" "nu-ansi-term" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "smallvec" "fmt" "ansi" "tracing-log" "std" ];
          "env-filter" = [ "matchers" "regex" "once_cell" "tracing" "std" "thread_local" ];
          "fmt" = [ "registry" "std" ];
          "json" = [ "tracing-serde" "serde" "serde_json" ];
          "local-time" = [ "time/local-offset" ];
          "matchers" = [ "dep:matchers" ];
          "nu-ansi-term" = [ "dep:nu-ansi-term" ];
          "once_cell" = [ "dep:once_cell" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "regex" = [ "dep:regex" ];
          "registry" = [ "sharded-slab" "thread_local" "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "sharded-slab" = [ "dep:sharded-slab" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tracing-core/std" ];
          "thread_local" = [ "dep:thread_local" ];
          "time" = [ "dep:time" ];
          "tracing" = [ "dep:tracing" ];
          "tracing-log" = [ "dep:tracing-log" ];
          "tracing-serde" = [ "dep:tracing-serde" ];
          "valuable" = [ "tracing-core/valuable" "valuable_crate" "valuable-serde" "tracing-serde/valuable" ];
          "valuable-serde" = [ "dep:valuable-serde" ];
          "valuable_crate" = [ "dep:valuable_crate" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ansi" "default" "env-filter" "fmt" "matchers" "nu-ansi-term" "once_cell" "regex" "registry" "sharded-slab" "smallvec" "std" "thread_local" "tracing" "tracing-log" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        description = "A lightweight atomic lock.";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "tungstenite" = rec {
        crateName = "tungstenite";
        version = "0.26.2";
        edition = "2021";
        description = "Lightweight stream-based WebSocket implementation";
        sha256 = "04rwwcxx95m3avi46rmn0kmpb6nynqimnla3v2qwn3k8argcp4s7";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "rustls-pki-types" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-pki-types" = [ "dep:rustls-pki-types" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "data-encoding" "default" "handshake" "http" "httparse" "sha1" ];
      };
      "twirp-rs" = rec {
        crateName = "twirp-rs";
        version = "0.13.0-succinct";
        edition = "2021";
        description = "An async-compatible library for Twirp RPC in Rust.";
        sha256 = "03bx49ivg7fyfrl0g86q5njp36dgary89ldqsk12n9nrp03crpr7";
        libName = "twirp_rs";
        authors = [
          "The blackbird team <support@github.com>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "axum";
            packageId = "axum";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "http";
            packageId = "http";
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
          }
          {
            name = "prost";
            packageId = "prost";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
          }
          {
            name = "tower";
            packageId = "tower 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
        };
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        description = "Typenum is a Rust library for type-level numbers evaluated at
    compile time. It currently supports bits, unsigned integers, and signed
    integers. It also provides a type-level array of type-level numbers, but its
    implementation is incomplete.";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
        resolvedDefaultFeatures = [ "const-generics" ];
      };
      "unarray" = rec {
        crateName = "unarray";
        version = "0.1.4";
        edition = "2018";
        description = "Utilities for working with uninitialized arrays";
        sha256 = "154smf048k84prsdgh09nkm2n0w0336v84jd4zikyn6v6jrqbspa";

      };
      "uncased" = rec {
        crateName = "uncased";
        version = "0.9.10";
        edition = "2018";
        description = "Case-preserving, ASCII case-insensitive, no_std string types.";
        sha256 = "15q6r6g4fszr8c2lzg9z9k9g52h8g29h24awda3d72cyw37qzf71";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "with-serde" = [ "serde" ];
          "with-serde-alloc" = [ "serde" "serde/alloc" "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        description = "Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.2.1";
        edition = "2021";
        description = "Determine displayed width of `char` and `str` types
according to Unicode Standard Annex #11 rules.
";
        sha256 = "0k0mlq7xy1y1kq6cgv1r2rs2knn6rln3g3af50rhi0dkgp60f6ja";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        description = "Determine whether characters have the XID_Start
or XID_Continue properties according to
Unicode Standard Annex #31.
";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unsafe-libyaml" = rec {
        crateName = "unsafe-libyaml";
        version = "0.2.11";
        edition = "2021";
        description = "libyaml transpiled to rust by c2rust";
        crateBin = [];
        sha256 = "0qdq69ffl3v5pzx9kzxbghzn0fzn266i1xn70y88maybz9csqfk7";
        libName = "unsafe_libyaml";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        description = "Safe, fast, zero-panic, zero-crashing, zero-allocation parsing of untrusted inputs in Rust.";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "unty" = rec {
        crateName = "unty";
        version = "0.0.4";
        edition = "2021";
        description = "Explicitly types your generics";
        sha256 = "1blhyv01qiv5sb72sal3xa1l8nzck3answawxkkiw3fd2x1phjbd";
        authors = [
          "Victor Koenders <bincode@trang.ar>"
        ];

      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        description = "URL library for Rust, based on the WHATWG URL Standard";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = [ "alloc" "compiled_data" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "idna/std" "percent-encoding/std" "form_urlencoded/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        description = "Incremental, zero-copy UTF-8 decoding with error handling";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        description = "Iterator by char over potentially-invalid UTF-8 in &[u8]";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        description = "Table-driven UTF-8 parser";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "valence-coprocessor" = rec {
        crateName = "valence-coprocessor";
        version = "0.3.5";
        edition = "2021";
        description = "The Valence co-processor definition";
        workspace_member = null;
        src = builtins.fetchGit {
          url = "https://github.com/timewave-computer/valence-coprocessor.git";
          rev = "4fa2cb08f164e6ed710ff6f2987de00738debfe6";
          ref = "refs/tags/v0.3.5";
          submodules = true;
        };
        libName = "valence_coprocessor";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "base64";
            packageId = "base64";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "blake3";
            packageId = "blake3";
            usesDefaultFeatures = false;
          }
          {
            name = "buf-fs";
            packageId = "buf-fs";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            optional = true;
            features = [ "blocking" "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "alloc" "derive" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "reqwest" = [ "dep:reqwest" ];
          "std" = [ "base64/std" "blake3/std" "serde/std" "reqwest" ];
        };
        resolvedDefaultFeatures = [ "default" "reqwest" "std" ];
      };
      "valence-coprocessor-ethereum" = rec {
        crateName = "valence-coprocessor-ethereum";
        version = "0.4.2";
        edition = "2021";
        description = "The Valence co-processor domain definition.";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/core; };
        libName = "valence_coprocessor_ethereum";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-rlp";
            packageId = "alloy-rlp";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "alloy-rpc-types-eth";
            packageId = "alloy-rpc-types-eth";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "alloy-serde";
            packageId = "alloy-serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "alloy-trie";
            packageId = "alloy-trie";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "ethereum" "serde" ];
          }
          {
            name = "anyhow";
            packageId = "anyhow";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "bincode";
            packageId = "bincode 2.0.1";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" "serde" ];
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "rlp";
            packageId = "rlp";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
          {
            name = "valence-coprocessor-wasm";
            packageId = "valence-coprocessor-wasm";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "alloy-sol-types";
            packageId = "alloy-sol-types";
            usesDefaultFeatures = false;
            features = [ "eip712-serde" ];
          }
          {
            name = "hex";
            packageId = "hex";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "rlp";
            packageId = "rlp";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloy-primitives" = [ "dep:alloy-primitives" ];
          "alloy-rlp" = [ "dep:alloy-rlp" ];
          "alloy-rpc-types-eth" = [ "dep:alloy-rpc-types-eth" ];
          "alloy-serde" = [ "dep:alloy-serde" ];
          "alloy-trie" = [ "dep:alloy-trie" ];
          "anyhow" = [ "dep:anyhow" ];
          "bincode" = [ "dep:bincode" ];
          "circuit" = [ "anyhow" "alloy-primitives" "alloy-rlp" "alloy-rpc-types-eth" "alloy-trie" "bincode" "serde_json" ];
          "controller" = [ "anyhow" "alloy-primitives" "alloy-rpc-types-eth" "alloy-serde" "bincode" "rlp" "serde_json" "valence-coprocessor-wasm" ];
          "default" = [ "circuit" "controller" ];
          "rlp" = [ "dep:rlp" ];
          "serde_json" = [ "dep:serde_json" ];
          "valence-coprocessor-wasm" = [ "dep:valence-coprocessor-wasm" ];
        };
        resolvedDefaultFeatures = [ "alloy-primitives" "alloy-rlp" "alloy-rpc-types-eth" "alloy-serde" "alloy-trie" "anyhow" "bincode" "circuit" "controller" "default" "rlp" "serde_json" "valence-coprocessor-wasm" ];
      };
      "valence-coprocessor-ethereum-controller" = rec {
        crateName = "valence-coprocessor-ethereum-controller";
        version = "0.4.2";
        edition = "2021";
        description = "The Valence co-processor domain definition.";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/domain; };
        libName = "valence_coprocessor_ethereum_controller";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
          {
            name = "valence-coprocessor-ethereum";
            packageId = "valence-coprocessor-ethereum";
            usesDefaultFeatures = false;
            features = [ "controller" ];
          }
        ];

      };
      "valence-coprocessor-ethereum-service" = rec {
        crateName = "valence-coprocessor-ethereum-service";
        version = "0.4.2";
        edition = "2021";
        description = "The Valence co-processor domain definition.";
        crateBin = [
          {
            name = "valence-coprocessor-ethereum-service";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/lightclient/service; };
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "alloy-primitives";
            packageId = "alloy-primitives 0.8.25";
            usesDefaultFeatures = false;
          }
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "poem";
            packageId = "poem";
            features = [ "anyhow" ];
          }
          {
            name = "poem-openapi";
            packageId = "poem-openapi";
            features = [ "swagger-ui" ];
          }
          {
            name = "postcard";
            packageId = "postcard";
            features = [ "alloc" ];
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "json" ];
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "sp1-sdk";
            packageId = "sp1-sdk";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
          {
            name = "valence-coprocessor-ethereum";
            packageId = "valence-coprocessor-ethereum";
          }
          {
            name = "valence-coprocessor-prover";
            packageId = "valence-coprocessor-prover";
            usesDefaultFeatures = false;
          }
        ];

      };
      "valence-coprocessor-ethereum-service-circuit" = rec {
        crateName = "valence-coprocessor-ethereum-service-circuit";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "valence-coprocessor-ethereum-service-circuit";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./crates/lightclient/circuit; };
        dependencies = [
          {
            name = "sp1-zkvm";
            packageId = "sp1-zkvm";
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
        ];

      };
      "valence-coprocessor-prover" = rec {
        crateName = "valence-coprocessor-prover";
        version = "0.3.5";
        edition = "2021";
        description = "The Valence co-processor prover service.";
        crateBin = [];
        workspace_member = null;
        src = builtins.fetchGit {
          url = "https://github.com/timewave-computer/valence-coprocessor.git";
          rev = "4fa2cb08f164e6ed710ff6f2987de00738debfe6";
          ref = "refs/tags/v0.3.5";
          submodules = true;
        };
        libName = "valence_coprocessor_prover";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "flume";
            packageId = "flume";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "lru";
            packageId = "lru 0.14.0";
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            features = [ "alloc" "derive" ];
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sp1-sdk";
            packageId = "sp1-sdk";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "tracing-subscriber";
            packageId = "tracing-subscriber";
            features = [ "env-filter" ];
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
          }
          {
            name = "valence-coprocessor-sp1";
            packageId = "valence-coprocessor-sp1";
          }
        ];
        features = {
          "gpu" = [ "sp1-sdk/cuda" "sp1-sdk/native-gnark" ];
        };
      };
      "valence-coprocessor-sp1" = rec {
        crateName = "valence-coprocessor-sp1";
        version = "0.3.5";
        edition = "2021";
        description = "The Valence co-processor SP1 prover backend.";
        workspace_member = null;
        src = builtins.fetchGit {
          url = "https://github.com/timewave-computer/valence-coprocessor.git";
          rev = "4fa2cb08f164e6ed710ff6f2987de00738debfe6";
          ref = "refs/tags/v0.3.5";
          submodules = true;
        };
        libName = "valence_coprocessor_sp1";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "ark-bn254";
            packageId = "ark-bn254";
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
          }
          {
            name = "ark-ff";
            packageId = "ark-ff 0.5.0";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize 0.5.0";
          }
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
            optional = true;
          }
          {
            name = "lru";
            packageId = "lru 0.14.0";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.8";
            rename = "sha2-v0-10-8";
            usesDefaultFeatures = false;
            features = [ "oid" ];
          }
          {
            name = "sp1-sdk";
            packageId = "sp1-sdk";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode 1.3.3";
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            features = [ "mocks" "std" ];
          }
        ];
        features = {
          "anyhow" = [ "dep:anyhow" ];
          "bincode" = [ "dep:bincode" ];
          "default" = [ "host" "std" ];
          "host" = [ "anyhow" "bincode" "lru" "sp1-sdk" "std" "valence-coprocessor/std" ];
          "lru" = [ "dep:lru" ];
          "sp1-sdk" = [ "dep:sp1-sdk" ];
          "std" = [ "sha2-v0-10-8/std" ];
        };
        resolvedDefaultFeatures = [ "anyhow" "bincode" "default" "host" "lru" "sp1-sdk" "std" ];
      };
      "valence-coprocessor-wasm" = rec {
        crateName = "valence-coprocessor-wasm";
        version = "0.3.5";
        edition = "2021";
        description = "The Valence co-processor WASM module backend.";
        workspace_member = null;
        src = builtins.fetchGit {
          url = "https://github.com/timewave-computer/valence-coprocessor.git";
          rev = "4fa2cb08f164e6ed710ff6f2987de00738debfe6";
          ref = "refs/tags/v0.3.5";
          submodules = true;
        };
        libName = "valence_coprocessor_wasm";
        authors = [
          "Timewave Labs"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "lru";
            packageId = "lru 0.14.0";
          }
          {
            name = "msgpacker";
            packageId = "msgpacker";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "valence-coprocessor";
            packageId = "valence-coprocessor";
            features = [ "mocks" "std" ];
          }
        ];
        features = {
          "abi-handlers" = [ "dlmalloc" ];
          "default" = [ "std" ];
          "dlmalloc" = [ "dep:dlmalloc" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "valence-coprocessor/std" "anyhow/std" "hashbrown" "msgpacker/std" "serde" "serde/std" "serde_json/std" "tracing/std" "wasmtime" ];
          "tests-runtime" = [ "std" ];
          "wasmtime" = [ "dep:wasmtime" ];
        };
      };
      "valuable" = rec {
        crateName = "valuable";
        version = "0.1.1";
        edition = "2021";
        description = "Object-safe value inspection, used to pass un-typed structured data across trait-object boundaries.
";
        sha256 = "0r9srp55v7g27s5bg7a2m095fzckrcdca5maih6dy9bay6fflwxs";
        features = {
          "default" = [ "std" ];
          "derive" = [ "valuable-derive" ];
          "std" = [ "alloc" ];
          "valuable-derive" = [ "dep:valuable-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        description = "A library to find native dependencies in a vcpkg tree at build
time in order to be used in Cargo build scripts.
";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "vec_map" = rec {
        crateName = "vec_map";
        version = "0.8.2";
        edition = "2015";
        description = "A simple map based on a vector for small integer keys";
        sha256 = "1481w9g1dw9rxp3l6snkdqihzyrd2f8vispzqmwjwsdyhw8xzggi";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Jorge Aparicio <japaricious@gmail.com>"
          "Alexis Beingessner <a.beingessner@gmail.com>"
          "Brian Anderson <>"
          "tbu- <>"
          "Manish Goregaokar <>"
          "Aaron Turon <aturon@mozilla.com>"
          "Adolfo Ochagavía <>"
          "Niko Matsakis <>"
          "Steven Fackler <>"
          "Chase Southwood <csouth3@illinois.edu>"
          "Eduard Burtescu <>"
          "Florian Wilkens <>"
          "Félix Raimundo <>"
          "Tibor Benke <>"
          "Markus Siemens <markus@m-siemens.de>"
          "Josh Branchaud <jbranchaud@gmail.com>"
          "Huon Wilson <dbau.pp@gmail.com>"
          "Corey Farwell <coref@rwell.org>"
          "Aaron Liblong <>"
          "Nick Cameron <nrc@ncameron.org>"
          "Patrick Walton <pcwalton@mimiga.net>"
          "Felix S Klock II <>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
          "Sean McArthur <sean.monstar@gmail.com>"
          "Vadim Petrochenkov <>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "eders" = [ "serde" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        description = "Tiny crate to check the version of the installed/running rustc.";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        description = "Detect when another Future wants a result.";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.11.1+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.1+wasi-snapshot-preview1";
        edition = "2018";
        description = "Experimental WASI API bindings for Rust";
        sha256 = "0jx49r7nbkbhyfrfyhz0bm4817yrnxgd3jiwwwfv0zl439jyrwyc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.14.2+wasi-0.2.4" = rec {
        crateName = "wasi";
        version = "0.14.2+wasi-0.2.4";
        edition = "2021";
        description = "WASI API bindings for Rust";
        sha256 = "1cwcqjr3dgdq8j325awgk8a715h0hg0f7jqzsb077n4qm6jzk0wn";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen-rt";
            packageId = "wit-bindgen-rt";
            features = [ "bitflags" ];
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.100";
        edition = "2021";
        description = "Easy support for interacting between JS and Rust.
";
        sha256 = "1x8ymcm6yi3i1rwj78myl1agqv2m86i648myy3lc97s9swlqkp0y";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "std" "msrv" ];
          "enable-interning" = [ "std" ];
          "msrv" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "msrv" "rustversion" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.100";
        edition = "2021";
        description = "Backend code generation of the wasm-bindgen tool
";
        sha256 = "1ihbf1hq3y81c4md9lyh6lcwbx6a5j0fw4fygd423g62lm8hc2ig";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.50";
        edition = "2021";
        description = "Bridging the gap between Rust Futures and JavaScript Promises";
        sha256 = "0q8ymi6i9r3vxly551dhxcyai7nc491mspj0j1wbafxwq074fpam";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" "web-sys/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.100";
        edition = "2021";
        description = "Definition of the `#[wasm_bindgen]` attribute, an internal dependency
";
        sha256 = "01xls2dvzh38yj17jgrbiib1d3nyad7k2yw9s0mpklwys333zrkz";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.100";
        edition = "2021";
        description = "The part of the implementation of the `#[wasm_bindgen]` attribute that is not in the shared backend crate
";
        sha256 = "1plm8dh20jg2id0320pbmrlsv6cazfv6b6907z19ys4z1jj7xs4a";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "visit" "visit-mut" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.100";
        edition = "2021";
        description = "Shared support between wasm-bindgen and wasm-bindgen cli, an internal
dependency.
";
        links = "wasm_bindgen";
        sha256 = "0gffxvqgbh9r9xl36gprkfnh3w9gl8wgia6xrin7v11sjcxxf18s";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];

      };
      "wasm-streams" = rec {
        crateName = "wasm-streams";
        version = "0.4.2";
        edition = "2021";
        description = "Bridging between web streams and Rust streams using WebAssembly
";
        sha256 = "0rddn007hp6k2cm91mm9y33n79b0jxv0c3znzszcvv67hn6ks18m";
        libName = "wasm_streams";type = [ "cdylib" "rlib" ];
        authors = [
          "Mattias Buelens <mattias@buelens.com>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            features = [ "io" "sink" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "AbortSignal" "QueuingStrategy" "ReadableStream" "ReadableStreamType" "ReadableWritablePair" "ReadableStreamByobReader" "ReadableStreamReaderMode" "ReadableStreamReadResult" "ReadableStreamByobRequest" "ReadableStreamDefaultReader" "ReadableByteStreamController" "ReadableStreamGetReaderOptions" "ReadableStreamDefaultController" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" ];
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "console" "AbortSignal" "ErrorEvent" "PromiseRejectionEvent" "Response" "ReadableStream" "Window" ];
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.77";
        edition = "2021";
        description = "Bindings for all Web APIs, a procedurally generated crate from WebIDL
";
        sha256 = "1lnmc1ffbq34qw91nndklqqm75rasaffj2g4f8h1yvqqz4pdvdik";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyFrameRequestEvent" = [ "Event" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MathMlElement" = [ "Element" "EventTarget" "Node" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcRtpScriptTransformer" = [ "EventTarget" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcTransformEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "SFrameTransform" = [ "EventTarget" ];
          "SFrameTransformErrorEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "Blob" "BlobPropertyBag" "Event" "EventTarget" "File" "FormData" "Headers" "MessageEvent" "QueuingStrategy" "ReadableByteStreamController" "ReadableStream" "ReadableStreamByobReader" "ReadableStreamByobRequest" "ReadableStreamDefaultController" "ReadableStreamDefaultReader" "ReadableStreamGetReaderOptions" "ReadableStreamReadResult" "ReadableStreamReaderMode" "ReadableStreamType" "ReadableWritablePair" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "StreamPipeOptions" "TransformStream" "TransformStreamDefaultController" "Transformer" "UnderlyingSink" "UnderlyingSource" "Window" "Worker" "WorkerGlobalScope" "WritableStream" "WritableStreamDefaultController" "WritableStreamDefaultWriter" "default" "std" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        description = "Drop-in replacement for std::time for Wasm in browsers";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "webpki-roots" = rec {
        crateName = "webpki-roots";
        version = "1.0.1";
        edition = "2021";
        description = "Mozilla's CA root certificates for use with webpki";
        sha256 = "00mm4bhkvis59pm2a7yz3ak6q8rykcj0ddj09wxfskm285ddv0l7";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wildmatch" = rec {
        crateName = "wildmatch";
        version = "2.4.0";
        edition = "2018";
        description = "Simple string matching with single- and multi-character wildcard operator.";
        sha256 = "1zbi3q4djhlli496mg45sfacy1g5c6f5h3rmw7mma9n6z2qimkk8";
        authors = [
          "Armin Becher <armin.becher@gmail.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        description = "Raw FFI bindings for all of Windows API.";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (target.name == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "cfg" "consoleapi" "errhandlingapi" "evntrace" "fileapi" "handleapi" "in6addr" "inaddr" "minwinbase" "ntsecapi" "processenv" "windef" "winioctl" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        description = "Import libraries for the i686-pc-windows-gnu target. Please don't use this crate directly, depend on winapi instead.";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        description = "Import libraries for the x86_64-pc-windows-gnu target. Please don't use this crate directly, depend on winapi instead.";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows" = rec {
        crateName = "windows";
        version = "0.52.0";
        edition = "2021";
        description = "Rust for Windows";
        sha256 = "1gnh210qjlprpd1szaq04rjm1zqgdm9j7l9absg0kawi2rwm72p4";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core 0.52.0";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [ "windows-implement" "windows-interface" "windows-core/implement" ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_System" "Wdk_System_SystemInformation" "Wdk_System_SystemServices" "Wdk_System_Threading" "Win32" "Win32_Foundation" "Win32_NetworkManagement" "Win32_NetworkManagement_IpHelper" "Win32_NetworkManagement_Ndis" "Win32_NetworkManagement_NetManagement" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Authorization" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Com" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "Win32_System_IO" "Win32_System_Ioctl" "Win32_System_Kernel" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Ole" "Win32_System_Performance" "Win32_System_Power" "Win32_System_ProcessStatus" "Win32_System_Registry" "Win32_System_RemoteDesktop" "Win32_System_Rpc" "Win32_System_SystemInformation" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_Variant" "Win32_System_WindowsProgramming" "Win32_System_Wmi" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-core 0.52.0" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        description = "Rust for Windows";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-core 0.61.2" = rec {
        crateName = "windows-core";
        version = "0.61.2";
        edition = "2021";
        description = "Core type support for COM and Windows";
        sha256 = "1qsa3iw14wk4ngfl7ipcvdf9xyq456ms7cx2i9iwf406p7fx7zf0";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "windows-result/std" "windows-strings/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.60.0";
        edition = "2021";
        description = "The implement macro for the windows crate";
        sha256 = "0dm88k3hlaax85xkls4gf597ar4z8m5vzjjagzk910ph7b8xszx4";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.59.1";
        edition = "2021";
        description = "The interface macro for the windows crate";
        sha256 = "1a4zr8740gyzzhq02xgl6vx8l669jwfby57xgf0zmkcdkyv134mx";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "parsing" "proc-macro" "printing" "full" "clone-impls" ];
          }
        ];

      };
      "windows-link" = rec {
        crateName = "windows-link";
        version = "0.1.3";
        edition = "2021";
        description = "Linking for Windows";
        sha256 = "12kr1p46dbhpijr4zbwr2spfgq8i8c5x55mvvfmyl96m01cx4sjy";
        libName = "windows_link";
        authors = [
          "Microsoft"
        ];

      };
      "windows-registry" = rec {
        crateName = "windows-registry";
        version = "0.5.3";
        edition = "2021";
        description = "Windows registry";
        sha256 = "17j9cxlnksdypanazss6cnh36v3rwvs86j4mpixwkvv5hz99x2jv";
        libName = "windows_registry";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-result";
            packageId = "windows-result";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-strings";
            packageId = "windows-strings";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "windows-result/std" "windows-strings/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "windows-result" = rec {
        crateName = "windows-result";
        version = "0.3.4";
        edition = "2021";
        description = "Windows error handling";
        sha256 = "1il60l6idrc6hqsij0cal0mgva6n3w6gq4ziban8wv6c6b9jpx2n";
        libName = "windows_result";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-strings" = rec {
        crateName = "windows-strings";
        version = "0.4.2";
        edition = "2021";
        description = "Windows string types";
        sha256 = "0mrv3plibkla4v5kaakc2rfksdd0b14plcmidhbkcfqc78zwkrjn";
        libName = "windows_strings";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-link";
            packageId = "windows-link";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        description = "Rust for Windows";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Globalization" "Win32_System" "Win32_System_Com" "Win32_UI" "Win32_UI_Shell" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        description = "Rust for Windows";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        description = "Rust for Windows";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemInformation" "Win32_System_Threading" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "default" ];
      };
      "windows-sys 0.60.2" = rec {
        crateName = "windows-sys";
        version = "0.60.2";
        edition = "2021";
        description = "Rust for Windows";
        sha256 = "1jrbc615ihqnhjhxplr2kw7rasrskv9wj3lr80hgfd42sbj01xgj";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.53.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_Beep" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Cdrom" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Dvd" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_Nfc" = [ "Win32_Devices" ];
          "Win32_Devices_Nfp" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_System" "Win32_System_Diagnostics" "Win32_System_Diagnostics_Debug" "default" ];
      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        description = "Import libs for Windows";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        description = "Import libs for Windows";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.52.6";
            target = { target, features }: (target.name == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows-targets 0.53.2" = rec {
        crateName = "windows-targets";
        version = "0.53.2";
        edition = "2021";
        description = "Import libs for Windows";
        sha256 = "1vwanhx2br7dh8mmrszdbcf01bccjr01mcyxcscxl4ffr7y6jvy6";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.53.0";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.53.0";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm 0.53.0";
            target = { target, features }: (target.name == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.53.0";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.53.0";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.53.0";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.53.0";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.53.0" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0r77pbpbcf8bq4yfwpz2hpq3vns8m0yacpvs2i5cn6fx1pwxbf46";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.53.0" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0v766yqw51pzxxwp203yqy39ijgjamp54hhdbsyqq6x1c8gilrf7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.53.0" = rec {
        crateName = "windows_i686_gnu";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "1hvjc8nv95sx5vdd79fivn8bpm7i517dqyf4yvsqgwrmkmjngp61";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.52.6" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm 0.53.0" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "04df1in2k91qyf1wzizvh560bvyzq20yf68k8xa66vdzxnywrrlw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.53.0" = rec {
        crateName = "windows_i686_msvc";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0pcvb25fkvqnp91z25qr5x61wyya12lx8p7nsa137cbb82ayw7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.53.0" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "1flh84xkssn1n6m1riddipydcksp2pdl45vdf70jygx3ksnbam9f";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.53.0" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "0mvc8119xpbi3q2m6mrjcdzl6afx4wffacp13v76g4jrs1fh6vha";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        description = "Import lib for Windows";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.53.0" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.53.0";
        edition = "2021";
        description = "Import lib for Windows";
        sha256 = "11h4i28hq0zlnjcaqi2xdxr7ibnpa8djfggch9rki1zzb8qi8517";
        authors = [
          "Microsoft"
        ];

      };
      "winnow 0.5.40" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        description = "A byte-oriented, zero-copy, parser combinators library";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "winnow 0.7.12" = rec {
        crateName = "winnow";
        version = "0.7.12";
        edition = "2021";
        description = "A byte-oriented, zero-copy, parser combinators library";
        sha256 = "159y8inpy86xswmr4yig9hxss0v2fssyqy1kk12504n8jbsfpvgk";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is_terminal_polyfill" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "wit-bindgen-rt" = rec {
        crateName = "wit-bindgen-rt";
        version = "0.39.0";
        edition = "2021";
        description = "Runtime support for the `wit-bindgen` crate
";
        sha256 = "1hd65pa5hp0nl664m94bg554h4zlhrzmkjsf6lsgsb7yc4734hkg";
        libName = "wit_bindgen_rt";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "async" = [ "dep:futures" "dep:once_cell" ];
          "bitflags" = [ "dep:bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.6.1";
        edition = "2021";
        description = "A more efficient alternative to fmt::Display";
        sha256 = "1fx29zncvbrqzgz7li88vzdm8zvgwgwy2r9bnjqxya09pfwi0bza";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = [ "dep:either" ];
        };
      };
      "wyz" = rec {
        crateName = "wyz";
        version = "0.5.1";
        edition = "2018";
        description = "myrrlyn’s utility collection";
        sha256 = "1vdrfy7i2bznnzjdl9vvrzljvs4s3qm8bnlgqwln6a941gy61wq5";
        authors = [
          "myrrlyn <self@myrrlyn.dev>"
        ];
        dependencies = [
          {
            name = "tap";
            packageId = "tap";
          }
        ];
        features = {
          "default" = [ "std" ];
          "garbage" = [ "once_cell" "typemap" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "alloc" ];
          "typemap" = [ "dep:typemap" ];
        };
      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.8.0";
        edition = "2021";
        description = "Abstraction allowing borrowed data to be carried along with the backing data it borrows from";
        sha256 = "1k4mfr48vgi7wh066y11b7v1ilakghlnlhw9snzz8vi2p00vnhaz";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc" ];
          "default" = [ "alloc" "zerofrom" ];
          "derive" = [ "dep:yoke-derive" "zerofrom/derive" ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "zerofrom" ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.8.0";
        edition = "2021";
        description = "Custom derive for the yoke crate";
        sha256 = "1dha5jrjz9jaq8kmxq1aag86b98zbnm9lyjrihy5sv716sbkrniq";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.26";
        edition = "2021";
        description = "Zerocopy makes zero-cost memory manipulation effortless. We write \"unsafe\" so you don't have to.";
        sha256 = "0bvsj0qzq26zc6nlrm3z10ihvjspyngs7n0jw1fz031i7h6xsf8h";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "simd" "zerocopy-derive" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.26";
        edition = "2021";
        description = "Custom derive for traits from the zerocopy crate";
        sha256 = "10aiywi5qkha0mpsnb1zjwi44wl2rhdncaf3ykbp4i9nqm65pkwy";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.6";
        edition = "2021";
        description = "ZeroFrom trait for constructing";
        sha256 = "19dyky67zkjichsb7ykhv0aqws3q0jfvzww76l66c19y6gh45k2h";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.6";
        edition = "2021";
        description = "Custom derive for the zerofrom crate";
        sha256 = "00l5niw7c1b0lf1vhvajpjmcnbdp2vn96jg4nmkhq2db0rp5s7np";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        description = "Securely clear secrets from memory with a simple trait built on
stable Rust primitives which guarantee memory is zeroed using an
operation will not be 'optimized away' by the compiler.
Uses a portable pure Rust implementation that works everywhere,
even WASM!
";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        description = "Custom derive support for zeroize";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.2.2";
        edition = "2021";
        description = "A data structure that efficiently maps strings to integers";
        sha256 = "15gmka7vw5k0d24s0vxgymr2j6zn2iwl12wpmpnpjgsqg3abpw1n";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "zerovec?/databake" ];
          "litemap" = [ "dep:litemap" "alloc" ];
          "serde" = [ "dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde" ];
          "yoke" = [ "dep:yoke" ];
          "zerofrom" = [ "dep:zerofrom" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "yoke" "zerofrom" ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.11.2";
        edition = "2021";
        description = "Zero-copy vector backed by a byte array";
        sha256 = "0a2457fmz39k9vrrj3rm82q5ykdhgxgbwfz2r6fa6nq11q4fn1aa";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:twox-hash" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "yoke" ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.11.1";
        edition = "2021";
        description = "Custom derive for the zerovec crate";
        sha256 = "13zms8hj7vzpfswypwggyfr4ckmyc7v3di49pmj8r1qcz9z275jv";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
        ];

      };
      "zkhash" = rec {
        crateName = "zkhash";
        version = "0.2.0";
        edition = "2018";
        description = "Rust implementations of Poseidon2 and similar arithmetization-oriented primitives";
        sha256 = "1ix1dlkyks7yyrqmgfzs9kmkywm256zlrp8w800jg4m63l4d2lj3";
        authors = [
          "Markus Schofnegger <mschofnegger@horizenlabs.io>"
          "Roman Walch <roman.walch@iaik.tugraz.at>"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff 0.4.2";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std 0.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "bitvec";
            packageId = "bitvec";
          }
          {
            name = "blake2";
            packageId = "blake2";
          }
          {
            name = "bls12_381";
            packageId = "bls12_381";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "group";
            packageId = "group 0.12.1";
            rename = "group_ped";
            features = [ "wnaf-memuse" ];
          }
          {
            name = "group";
            packageId = "group 0.13.0";
          }
          {
            name = "halo2";
            packageId = "halo2";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "jubjub";
            packageId = "jubjub";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "pasta_curves";
            packageId = "pasta_curves 0.5.1";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            rename = "random";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
        ];
        features = {
          "asm" = [ "sha2/asm" "blake2/simd_asm" "ark-ff/asm" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /*
    Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    name = platform.rust.rustcTarget;

    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor
      ;
    family = platform.rust.platform.target-family;
    env = platform.parsed.abi.name;
    endian = if platform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
    has_atomic =
      let
        maxAtomic =
          hasAtomicData.standardArchs.${platform.rust.platform.arch}
          or hasAtomicData.nonStandardTargets.${platform.rust.rustcTarget}
          or null;
        possibleAtomics = [ 8 16 32 64 128 ];
        atomics = (lib.filter (a: a <= maxAtomic) possibleAtomics);
      in
        if maxAtomic == null then []
        else (lib.map toString atomics) ++ [ "ptr" ];
  };

  registryUrl =
    { registries
    , url
    , crate
    , version
    , sha256
    ,
    }:
    let
      dl = registries.${url}.dl;
      tmpl = [
        "{crate}"
        "{version}"
        "{prefix}"
        "{lowerprefix}"
        "{sha256-checksum}"
      ];
    in
    with lib.strings;
    if lib.lists.any (i: hasInfix "{}" dl) tmpl then
      let
        prefix =
          if builtins.stringLength crate == 1 then
            "1"
          else if builtins.stringLength crate == 2 then
            "2"
          else
            "${builtins.substring 0 2 crate}/${builtins.substring 2 (builtins.stringLength crate - 2) crate}";
      in
      builtins.replaceStrings tmpl [
        crate
        version
        prefix
        (lib.strings.toLower prefix)
        sha256
      ]
    else
      "${dl}/${crate}/${version}/download";

  # Filters common temp files and build files.
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter =
    name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      !(
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory"
          && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory" && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /*
    Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest =
    { crate
    , testCrate
    , testCrateFlags
    , testInputs
    , testPreRun
    , testPostRun
    ,
    }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override (_: {
              buildTests = true;
            });
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n" (
              pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]
            );
          in
          pkgs.stdenvNoCC.mkDerivation {
            name = "run-tests-${testCrate.name}";

            inherit (crate) src;

            inherit testCrateFlags;

            buildInputs = testInputs;

            buildPhase = ''
              set -e
              export RUST_BACKTRACE=1

              # build outputs
              testRoot=target/debug
              mkdir -p $testRoot

              # executables of the crate
              # we copy to prevent std::env::current_exe() to resolve to a store location
              for i in ${crate}/bin/*; do
                cp "$i" "$testRoot"
              done
              chmod +w -R .

              # test harness executables are suffixed with a hash, like cargo does
              # this allows to prevent name collision with the main
              # executables of the crate
              hash=$(basename $out)
              for file in ${drv}/tests/*; do
                f=$testRoot/$(basename $file)-$hash
                cp $file $f
                ${testCommand}
              done
            '';
          };
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (
          lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          ''
        );

  # A restricted overridable version of builtRustCratesWithFeatures.
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
    , # Any command to run immediatelly before a test is executed.
      testPreRun ? ""
    , # Any command run immediatelly after a test is executed.
      testPostRun ? ""
    ,
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        ,
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null then
              buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides then
                  buildRustCrateForPkgs
                else
                  pkgs:
                  (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit
                    testCrateFlags
                    testInputs
                    testPreRun
                    testPostRun
                    ;
                }
            else
              drv;
        in
        derivation
      )
      {
        inherit
          features
          crateOverrides
          runTests
          testCrateFlags
          testInputs
          testPreRun
          testPostRun
          ;
      };

  /*
    Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    ,
    }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args
          // {
            inherit rootPackageId;
            target = makeTarget stdenv.hostPlatform // {
              test = runTests;
            };
          }
        );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs =
          pkgs:
          let
            self = {
              crates = lib.mapAttrs
                (
                  packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId
                )
                crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl =
          self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            targetFeaturesRustcOpts = lib.lists.optional (targetFeatures != [ ])
              "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";

            profileCfg = allProfiles.${profile};
            depProfileRustcOpts = profileToRustcOpts profileCfg true;
            buildProfileRustcOpts = profileToRustcOpts
              (profileCfg // (profileCfg.build-override or {})) true;
            devDependencies = lib.optionals (runTests && packageId == rootPackageId) (
              crateConfig'.devDependencies or [ ]
            );
            dependencies = dependencyDerivations {
              inherit features;
              inherit (self) target;
              buildByPackageId =
                depPackageId:
                # proc_macro crates must be compiled for the build architecture
                (if crateConfigs.${depPackageId}.procMacro or false then
                  self.build.crates.${depPackageId}
                else
                  self.crates.${depPackageId}
                ).override {
                  extraRustcOpts = depProfileRustcOpts ++ targetFeaturesRustcOpts ++ globalRustcOpts;
                  extraRustcOptsForBuildRs = buildProfileRustcOpts ++ targetFeaturesRustcOpts ++ globalRustcOpts;
                };
              dependencies = (crateConfig.dependencies or [ ]) ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit features;
              inherit (self.build) target;
              buildByPackageId = depPackageId: self.build.crates.${depPackageId}.override {
                extraRustcOpts = buildProfileRustcOpts ++ targetFeaturesRustcOpts ++ globalRustcOpts;
                extraRustcOptsForBuildRs = buildProfileRustcOpts ++ targetFeaturesRustcOpts ++ globalRustcOpts;
              };
              dependencies = crateConfig.buildDependencies or [ ];
            };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped = lib.groupBy (dependency: dependency.name) dependenciesWithRenames;
                versionAndRename =
                  dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  {
                    inherit (dep) rename;
                    inherit (package) version;
                  };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs (
            # description can contain invalid characters for shell variables
            (lib.removeAttrs crateConfig [ "description" ])
            // {
              pname = crateConfig.crateName;
              inherit (crateConfig) version;
              src =
                crateConfig.src or (pkgs.fetchurl rec {
                  name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                  # https://www.pietroalbini.org/blog/downloading-crates-io/
                  # Not rate-limited, CDN URL.
                  url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                  sha256 =
                    assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                    crateConfig.sha256;
                });
              meta = {
                inherit (crateConfig) description;
              };
              inherit
                features
                dependencies
                buildDependencies
                crateRenames
                ;
            }
            // (lib.optionalAttrs (packageId == rootPackageId) {
              extraRustcOpts = (profileToRustcOpts allProfiles.${profile} false) ++ targetFeaturesRustcOpts ++ globalRustcOpts;
              extraRustcOptsForBuildRs =
                (profileToRustcOpts (profileCfg // (profileCfg.build-override or {})) false)
                ++ targetFeaturesRustcOpts ++ globalRustcOpts;
            })
          );
      in
      builtByPackageIdByPkgs;

  # Returns the actual derivations for the given dependencies.
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    ,
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /*
    Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson =
    val:
    if builtins.isAttrs val then
      lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val then
      builtins.map sanitizeForJson val
    else if builtins.isFunction val then
      "function"
    else
      val;

  # Returns various tools to debug a crate.
  debugCrate =
    { packageId
    , target ? makeDefaultTarget stdenv.hostPlatform
    ,
    }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      {
        internal = debug;
      };

  /*
    Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    ,
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [
          mergedFeatures
          configs
        ];
        onlyInCargo = builtins.attrNames (
          lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined
        );
        onlyInCrate2Nix = builtins.attrNames (
          lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined
        );
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /*
    Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
    , # Adds devDependencies to the crate with rootPackageId.
      runTests ? false
    , ...
    }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures =
          dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          {
            inherit packageId features;
          };
        resolveDependencies =
          cache: path: dependencies:
            assert (builtins.isAttrs cache);
            assert (builtins.isList dependencies);
            let
              enabledDependencies = filterEnabledDependencies {
                inherit dependencies target;
                features = enabledFeatures;
              };
              directDependencies = map depWithResolvedFeatures enabledDependencies;
              foldOverCache = op: lib.foldl op cache directDependencies;
            in
            foldOverCache (
              cache:
              { packageId, features }:
              let
                cacheFeatures = cache.${packageId} or [ ];
                combinedFeatures = sortedUnique (cacheFeatures ++ features);
              in
              if cache ? ${packageId} && cache.${packageId} == combinedFeatures then
                cache
              else
                mergePackageFeatures {
                  features = combinedFeatures;
                  featuresByPackageId = cache;
                  inherit
                    crateConfigs
                    packageId
                    target
                    runTests
                    rootPackageId
                    ;
                }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies = resolveDependencies cacheWithSelf "dep" (
          crateConfig.dependencies or [ ]
          ++ lib.optionals (runTests && packageId == rootPackageId) (crateConfig.devDependencies or [ ])
        );
        cacheWithAll = resolveDependencies cacheWithDependencies "build" (
          crateConfig.buildDependencies or [ ]
        );
      in
      cacheWithAll;

  # Returns the enabled dependencies given the enabled features.
  filterEnabledDependencies =
    { dependencies
    , features
    , target
    ,
    }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter
        (
          dep:
          let
            targetFunc = dep.target or (features: true);
          in
          targetFunc { inherit features target; }
          && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep) features)
        )
        dependencies;

  # Returns whether the given feature should enable the given dependency.
  doesFeatureEnableDependency =
    dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /*
    Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures =
    featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle =
          oldSeen: inputFeatures:
          if inputFeatures != [ ] then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // {
                ${feature} = 1;
              };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else
            [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

  /*
    This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures =
    dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency);
              let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
              if (dependency.optional or false) && enabled then
                [ (dependency.rename or dependency.name) ]
              else
                [ ]
          )
          dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures =
    features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil = if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s: if lib.hasPrefix prefix s then lib.removePrefix prefix s else null;
            extractFeature =
              feature:
              lib.findFirst (f: f != null) null (
                map (prefix: stripPrefixMatch prefix feature) [
                  (name + "/")
                  (name + "?/")
                ]
              );
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  # Sorts and removes duplicates from a list of strings.
  sortedUnique =
    features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning =
    message: value:
    if strictDeprecation then
      builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else
      builtins.trace message value;

  profileToRustcOpts = profileCfg: isDep:
    let
      filterNull = lib.filterAttrs (_: v: v != null);
      finalProfileCfg = filterNull (lib.mapAttrs' (name: cfg: {
        name =
          if name == "debug"
          then "debuginfo"
          else name;
        value =
          if name == "lto" && isDep
            # disable lto on dependency crates
          then null
          else if name == "debug" && lib.isBool cfg
          then if cfg then "2" else "0"
          # Remove non-rustc opts
          else if (name == "build-override") || (name == "package")
          then null
          else cfg;
      }) profileCfg);
    in
    lib.mapAttrsToList (name: cfg:
      "-C ${name}=${if lib.isBool cfg then lib.boolToString cfg else (toString cfg)}"
    ) finalProfileCfg;

  allProfiles = cargoProfiles //
    (lib.mapAttrs (name: value:
      if value ? inherits
      then lib.recursiveUpdate allProfiles.${value.inherits} (lib.removeAttrs value ["inherits"])
      else
        if cargoProfiles ? ${name}
        then lib.recursiveUpdate cargoProfiles.${name} value
        else value
    ) profiles);

  cargoProfiles = {
    dev = {
      opt-level = 0;
      debug-assertions = true;
      overflow-checks = true;
      lto = false;
      incremental = true;
      codegen-units = 256;
      rpath = false;
      debug = true;
      # split-debuginfo = "...";
      strip = "none";
      panic = "unwind";
      build-override = {
        opt-level = 0;
        codegen-units = 256;
        debug = false;
      };
    };
    release = {
      overflow-checks = false;
      incremental = false;
      rpath = false;
      opt-level = 3;
      debug = false;
      # split-debuginfo = "...";
      strip = "none";
      lto = false;
      panic = "unwind";
      codegen-units = 16;
      debug-assertions = false;
      build-override = {
        opt-level = 0;
        codegen-units = 256;
      };
    };
  };

  hasAtomicData = {
    # Architectures that always have a specific max atomic size
    standardArchs = builtins.fromJSON ''
      {"aarch64":128,"aarch64_be":128,"amdgcn":64,"arm64_32":128
      ,"arm64e":128,"arm64ec":128,"armeb":64,"armebv7r":64
      ,"armv6":64,"armv6k":32,"armv7":64,"armv7a":64,"armv7k":64
      ,"armv7r":64,"armv7s":64,"armv8r":64,"hexagon":32,"i386":64
      ,"i586":64,"i686":64,"loongarch64":64,"mips":32,"mips64":64
      ,"mips64el":64,"mipsisa32r6":32,"mipsisa32r6el":32,"mipsisa64r6":64
      ,"mipsisa64r6el":64,"nvptx64":64,"powerpc":32,"powerpc64":64
      ,"powerpc64le":64,"riscv32":32,"riscv32gc":32,"riscv32ima":32
      ,"riscv32imac":32,"riscv32imafc":32,"riscv64":64,"riscv64gc":64
      ,"riscv64imac":64,"s390x":128,"sparc":32,"sparc64":64
      ,"sparcv9":64,"thumbv7a":64,"thumbv7em":32,"thumbv7m":32
      ,"thumbv7neon":64,"thumbv8m.base":32,"thumbv8m.main":32
      ,"wasm32":64,"wasm32v1":64,"wasm64":64,"x86_64h":128}
    '';
    # Targets with non-standard architectures
    nonStandardTargets = builtins.fromJSON ''
      {"arm-linux-androideabi":32,"arm-unknown-linux-gnueabi":64
      ,"arm-unknown-linux-gnueabihf":64,"arm-unknown-linux-musleabi":64
      ,"arm-unknown-linux-musleabihf":64,"armv4t-unknown-linux-gnueabi":32
      ,"armv5te-unknown-linux-gnueabi":32,"armv5te-unknown-linux-musleabi":32
      ,"armv5te-unknown-linux-uclibceabi":32,"mipsel-mti-none-elf":32
      ,"mipsel-sony-psp":32,"mipsel-unknown-linux-gnu":32
      ,"mipsel-unknown-linux-musl":32,"mipsel-unknown-linux-uclibc":32
      ,"mipsel-unknown-netbsd":32,"mipsel-unknown-none":32
      ,"riscv32im-risc0-zkvm-elf":64,"riscv32imc-esp-espidf":32
      ,"riscv32imc-unknown-nuttx-elf":32,"thumbv6m-nuttx-eabi":32
      ,"x86_64-apple-darwin":128,"x86_64-apple-ios":128,"x86_64-apple-ios-macabi":128
      ,"x86_64-apple-tvos":128,"x86_64-apple-watchos-sim":128
      ,"x86_64-fortanix-unknown-sgx":64,"x86_64-linux-android":64
      ,"x86_64-pc-cygwin":64,"x86_64-pc-nto-qnx710":64,"x86_64-pc-nto-qnx710_iosock":64
      ,"x86_64-pc-nto-qnx800":64,"x86_64-pc-solaris":64,"x86_64-pc-windows-gnu":128
      ,"x86_64-pc-windows-gnullvm":128,"x86_64-pc-windows-msvc":128
      ,"x86_64-unikraft-linux-musl":64,"x86_64-unknown-dragonfly":64
      ,"x86_64-unknown-freebsd":64,"x86_64-unknown-fuchsia":64
      ,"x86_64-unknown-haiku":64,"x86_64-unknown-hermit":64
      ,"x86_64-unknown-hurd-gnu":64,"x86_64-unknown-illumos":64
      ,"x86_64-unknown-l4re-uclibc":64,"x86_64-unknown-linux-gnu":64
      ,"x86_64-unknown-linux-gnux32":64,"x86_64-unknown-linux-musl":64
      ,"x86_64-unknown-linux-none":64,"x86_64-unknown-linux-ohos":64
      ,"x86_64-unknown-netbsd":64,"x86_64-unknown-none":64
      ,"x86_64-unknown-openbsd":64,"x86_64-unknown-redox":64
      ,"x86_64-unknown-trusty":64,"x86_64-unknown-uefi":64
      ,"x86_64-uwp-windows-gnu":128,"x86_64-uwp-windows-msvc":128
      ,"x86_64-win7-windows-gnu":64,"x86_64-win7-windows-msvc":64
      ,"x86_64-wrs-vxworks":64}
    '';
  };

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

